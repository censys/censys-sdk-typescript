/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
import { SDKCore } from "../core.js";
import { SDKOptions } from "../lib/config.js";
import type { ConsoleLogger } from "./console-logger.js";
import { createRegisterPrompt } from "./prompts.js";
import {
  createRegisterResource,
  createRegisterResourceTemplate,
} from "./resources.js";
import { MCPScope } from "./scopes.js";
import { createRegisterTool } from "./tools.js";
import { tool$collectionsAggregate } from "./tools/collectionsAggregate.js";
import { tool$collectionsCreate } from "./tools/collectionsCreate.js";
import { tool$collectionsDelete } from "./tools/collectionsDelete.js";
import { tool$collectionsGet } from "./tools/collectionsGet.js";
import { tool$collectionsList } from "./tools/collectionsList.js";
import { tool$collectionsListEvents } from "./tools/collectionsListEvents.js";
import { tool$collectionsSearch } from "./tools/collectionsSearch.js";
import { tool$collectionsUpdate } from "./tools/collectionsUpdate.js";
import { tool$globalDataAggregate } from "./tools/globalDataAggregate.js";
import { tool$globalDataGetCertificate } from "./tools/globalDataGetCertificate.js";
import { tool$globalDataGetCertificates } from "./tools/globalDataGetCertificates.js";
import { tool$globalDataGetHost } from "./tools/globalDataGetHost.js";
import { tool$globalDataGetHosts } from "./tools/globalDataGetHosts.js";
import { tool$globalDataGetHostTimeline } from "./tools/globalDataGetHostTimeline.js";
import { tool$globalDataGetWebProperties } from "./tools/globalDataGetWebProperties.js";
import { tool$globalDataGetWebProperty } from "./tools/globalDataGetWebProperty.js";
import { tool$globalDataSearch } from "./tools/globalDataSearch.js";
import { tool$threatHuntingValueCounts } from "./tools/threatHuntingValueCounts.js";

export function createMCPServer(deps: {
  logger: ConsoleLogger;
  allowedTools?: string[] | undefined;
  scopes?: MCPScope[] | undefined;
  serverURL?: string | undefined;
  personalAccessToken?: SDKOptions["personalAccessToken"] | undefined;
  organizationId?: SDKOptions["organizationId"] | undefined;
  serverIdx?: SDKOptions["serverIdx"] | undefined;
}) {
  const server = new McpServer({
    name: "SDK",
    version: "0.3.0",
  });

  const client = new SDKCore({
    personalAccessToken: deps.personalAccessToken,
    organizationId: deps.organizationId,
    serverURL: deps.serverURL,
    serverIdx: deps.serverIdx,
  });

  const scopes = new Set(deps.scopes);

  const allowedTools = deps.allowedTools && new Set(deps.allowedTools);
  const tool = createRegisterTool(
    deps.logger,
    server,
    client,
    scopes,
    allowedTools,
  );
  const resource = createRegisterResource(deps.logger, server, client, scopes);
  const resourceTemplate = createRegisterResourceTemplate(
    deps.logger,
    server,
    client,
    scopes,
  );
  const prompt = createRegisterPrompt(deps.logger, server, client, scopes);
  const register = { tool, resource, resourceTemplate, prompt };
  void register; // suppress unused warnings

  tool(tool$collectionsList);
  tool(tool$collectionsCreate);
  tool(tool$collectionsDelete);
  tool(tool$collectionsGet);
  tool(tool$collectionsUpdate);
  tool(tool$collectionsListEvents);
  tool(tool$collectionsAggregate);
  tool(tool$collectionsSearch);
  tool(tool$globalDataGetCertificates);
  tool(tool$globalDataGetCertificate);
  tool(tool$globalDataGetHosts);
  tool(tool$globalDataGetHost);
  tool(tool$globalDataGetHostTimeline);
  tool(tool$globalDataGetWebProperties);
  tool(tool$globalDataGetWebProperty);
  tool(tool$globalDataAggregate);
  tool(tool$globalDataSearch);
  tool(tool$threatHuntingValueCounts);

  return server;
}
