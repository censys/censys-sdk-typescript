/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { collectionsAggregate } from "../funcs/collectionsAggregate.js";
import { collectionsCreate } from "../funcs/collectionsCreate.js";
import { collectionsDelete } from "../funcs/collectionsDelete.js";
import { collectionsGet } from "../funcs/collectionsGet.js";
import { collectionsList } from "../funcs/collectionsList.js";
import { collectionsListEvents } from "../funcs/collectionsListEvents.js";
import { collectionsSearch } from "../funcs/collectionsSearch.js";
import { collectionsUpdate } from "../funcs/collectionsUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Collections extends ClientSDK {
  /**
   * List Collections
   *
   * @remarks
   * List Collections
   */
  async list(
    request: operations.V3CollectionsCrudListRequest,
    options?: RequestOptions,
  ): Promise<operations.V3CollectionsCrudListResponse> {
    return unwrapAsync(collectionsList(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a Collection
   *
   * @remarks
   * Create a Collection
   */
  async create(
    request: operations.V3CollectionsCrudCreateRequest,
    options?: RequestOptions,
  ): Promise<operations.V3CollectionsCrudCreateResponse> {
    return unwrapAsync(collectionsCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a Collection
   *
   * @remarks
   * Delete a Collection
   */
  async delete(
    request: operations.V3CollectionsCrudDeleteRequest,
    options?: RequestOptions,
  ): Promise<operations.V3CollectionsCrudDeleteResponse | undefined> {
    return unwrapAsync(collectionsDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a Collection
   *
   * @remarks
   * Get a Collection
   */
  async get(
    request: operations.V3CollectionsCrudGetRequest,
    options?: RequestOptions,
  ): Promise<operations.V3CollectionsCrudGetResponse> {
    return unwrapAsync(collectionsGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a Collection
   *
   * @remarks
   * Update a Collection
   */
  async update(
    request: operations.V3CollectionsCrudUpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.V3CollectionsCrudUpdateResponse> {
    return unwrapAsync(collectionsUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * List a Collection's events
   *
   * @remarks
   * List a Collection's events
   */
  async listEvents(
    request: operations.V3CollectionsListEventsRequest,
    options?: RequestOptions,
  ): Promise<operations.V3CollectionsListEventsResponse> {
    return unwrapAsync(collectionsListEvents(
      this,
      request,
      options,
    ));
  }

  /**
   * Search / Aggregate
   *
   * @remarks
   * Run an aggregation via a Collection data set
   */
  async aggregate(
    request: operations.V3CollectionsSearchAggregateRequest,
    options?: RequestOptions,
  ): Promise<operations.V3CollectionsSearchAggregateResponse> {
    return unwrapAsync(collectionsAggregate(
      this,
      request,
      options,
    ));
  }

  /**
   * Search / Query
   *
   * @remarks
   * Run a query via a Collection data set
   */
  async search(
    request: operations.V3CollectionsSearchQueryRequest,
    options?: RequestOptions,
  ): Promise<operations.V3CollectionsSearchQueryResponse> {
    return unwrapAsync(collectionsSearch(
      this,
      request,
      options,
    ));
  }
}
