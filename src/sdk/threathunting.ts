/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { globalDataGetTrackedScan } from "../funcs/globalDataGetTrackedScan.js";
import { globalDataGetTrackedScanThreatHunting } from "../funcs/globalDataGetTrackedScanThreatHunting.js";
import { threatHuntingCreateTrackedScan } from "../funcs/threatHuntingCreateTrackedScan.js";
import { threatHuntingGetHostObservationsWithCertificate } from "../funcs/threatHuntingGetHostObservationsWithCertificate.js";
import { threatHuntingValueCounts } from "../funcs/threatHuntingValueCounts.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class ThreatHunting extends ClientSDK {
  /**
   * Get tracked scan details
   *
   * @remarks
   * Retrieve the current status and results of a tracked scan by its ID.
   *         This endpoint works for both discovery scans and rescans.
   */
  async getTrackedScan(
    request: operations.V3GlobaldataScansGetRequest,
    options?: RequestOptions,
  ): Promise<operations.V3GlobaldataScansGetResponse> {
    return unwrapAsync(globalDataGetTrackedScan(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Host Observations With Certificate
   *
   * @remarks
   * Retrieve historical observations of hosts associated with a certificate fingerprint. Useful for threat hunting, detection engineering, and timeline generation.
   */
  async getHostObservationsWithCertificate(
    request:
      operations.V3ThreathuntingGetHostObservationsWithCertificateRequest,
    options?: RequestOptions,
  ): Promise<
    operations.V3ThreathuntingGetHostObservationsWithCertificateResponse
  > {
    return unwrapAsync(threatHuntingGetHostObservationsWithCertificate(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a tracked discovery scan
   *
   * @remarks
   * Create a new tracked discovery scan for a specified target. Discovery scans are used to scan new targets that have not been previously identified. The scan will be queued. The response will contain a scan ID that you can use with the [get tracked scan details endpoint](https://docs.censys.com/reference/v3-globaldata-scans-get#/) to monitor its status and results.<br><br>This endpoint is available to organizations that have access to the Threat Hunting module.
   */
  async createTrackedScan(
    request: operations.V3ThreathuntingScansDiscoveryRequest,
    options?: RequestOptions,
  ): Promise<operations.V3ThreathuntingScansDiscoveryResponse> {
    return unwrapAsync(threatHuntingCreateTrackedScan(
      this,
      request,
      options,
    ));
  }

  /**
   * Get tracked scan details
   *
   * @remarks
   * Retrieve the current status and results of a tracked scan by its ID.
   *         This endpoint works for both discovery scans and rescans.
   */
  async getTrackedScanThreatHunting(
    request: operations.V3ThreathuntingScansGetRequest,
    options?: RequestOptions,
  ): Promise<operations.V3ThreathuntingScansGetResponse> {
    return unwrapAsync(globalDataGetTrackedScanThreatHunting(
      this,
      request,
      options,
    ));
  }

  /**
   * CensEye: Retrieve value counts to discover pivots
   *
   * @remarks
   * Get counts of web assets for specific field-value pairs and combinations of field-value pairs. This is similar to the [CensEye functionality](https://docs.censys.com/docs/platform-threat-hunting-use-censeye-to-build-detections#/) available in the Platform web UI, but it allows you to define specific fields of interest rather than the [default fields](https://docs.censys.com/docs/platform-threat-hunting-use-censeye-to-build-detections#default-pivot-fields) leveraged by the tool in the UI.<br><br>Each array can only target fields within the same nested object. For example, you can combine `host.services.port=80` and `host.services.protocol=SSH` in the same array, but you cannot combine `host.services.port=80` and `host.location.country=”United States”` in the same array. You can input multiple arrays of objects in each API call.<br><br>To use this endpoint, your organization must have access to the Threat Hunting Module. This endpoint costs 1 credit per count condition (array of objects) included in the API call.
   */
  async valueCounts(
    request: operations.V3ThreathuntingValueCountsRequest,
    options?: RequestOptions,
  ): Promise<operations.V3ThreathuntingValueCountsResponse> {
    return unwrapAsync(threatHuntingValueCounts(
      this,
      request,
      options,
    ));
  }
}
