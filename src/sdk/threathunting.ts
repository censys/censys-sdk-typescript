/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { threatHuntingCreateTrackedScan } from "../funcs/threatHuntingCreateTrackedScan.js";
import { threatHuntingGetHostObservationsWithCertificate } from "../funcs/threatHuntingGetHostObservationsWithCertificate.js";
import { threatHuntingGetTrackedScanThreatHunting } from "../funcs/threatHuntingGetTrackedScanThreatHunting.js";
import { threatHuntingValueCounts } from "../funcs/threatHuntingValueCounts.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class ThreatHunting extends ClientSDK {
  /**
   * Get host history for a certificate
   *
   * @remarks
   * Retrieve the historical observations of hosts associated with a certificate. This is useful for threat hunting, detection engineering, and timeline generation. Certificate history is also visible to Threat Hunting users in the Platform UI on the [certificate timeline](https://docs.censys.com/docs/platform-threat-hunting-use-cert-history-to-build-better-detections#/).<br><br>You can define a specific time frame of interest. If you do not specify a time frame, this endpoint will search the historical dataset that is available to your account. You may also filter results by port and transport protocol.<br><br>This endpoint is available to organizations that have access to the Threat Hunting module. It costs 5 credits per page of results.
   */
  async getHostObservationsWithCertificate(
    request:
      operations.V3ThreathuntingGetHostObservationsWithCertificateRequest,
    options?: RequestOptions,
  ): Promise<
    operations.V3ThreathuntingGetHostObservationsWithCertificateResponse
  > {
    return unwrapAsync(threatHuntingGetHostObservationsWithCertificate(
      this,
      request,
      options,
    ));
  }

  /**
   * Live Discovery: Initiate a new scan
   *
   * @remarks
   * Initiate a scan to look for a currently unobserved service at a specific IP and port (`ip:port`) or hostname and port (`hostname:port`). This is equivalent to the [Live Discovery](https://docs.censys.com/docs/platform-threat-hunting-use-live-scan-and-rescan-to-validate-infrastructure#/) feature available in the UI, but you can also target web properties in addition to hosts.<br><br>The scan may take several minutes to complete. The response will contain a scan ID that you can use to [monitor the scan's status](https://docs.censys.com/reference/v3-threathunting-scans-get#/). After the scan completes, perform a lookup on the target asset to retrieve detailed scan information.<br><br>This endpoint is available to organizations that have access to the Threat Hunting module. It costs 15 credits to execute this endpoint.
   */
  async createTrackedScan(
    request: operations.V3ThreathuntingScansDiscoveryRequest,
    options?: RequestOptions,
  ): Promise<operations.V3ThreathuntingScansDiscoveryResponse> {
    return unwrapAsync(threatHuntingCreateTrackedScan(
      this,
      request,
      options,
    ));
  }

  /**
   * Get scan status
   *
   * @remarks
   * Retrieve the current status of a scan by its ID. This endpoint works for both [Live Discovery scans](https://docs.censys.com/reference/v3-threathunting-scans-discovery#/) and [Live Rescans](https://docs.censys.com/reference/v3-globaldata-scans-rescan#/).<br><br>If the scan was successful, perform a lookup on the target asset to retrieve detailed scan information.<br><br>This endpoint is available to all Enterprise customers. This endpoint does not cost any credits to execute.
   */
  async getTrackedScanThreatHunting(
    request: operations.V3ThreathuntingScansGetRequest,
    options?: RequestOptions,
  ): Promise<operations.V3ThreathuntingScansGetResponse> {
    return unwrapAsync(threatHuntingGetTrackedScanThreatHunting(
      this,
      request,
      options,
    ));
  }

  /**
   * CensEye: Retrieve value counts to discover pivots
   *
   * @remarks
   * Get counts of web assets for specific field-value pairs and combinations of field-value pairs. This is similar to the [CensEye functionality](https://docs.censys.com/docs/platform-threat-hunting-use-censeye-to-build-detections#/) available in the Platform web UI, but it allows you to define specific fields of interest rather than the [default fields](https://docs.censys.com/docs/platform-threat-hunting-use-censeye-to-build-detections#default-pivot-fields) leveraged by the tool in the UI.<br><br>Each array can only target fields within the same nested object. For example, you can combine `host.services.port=80` and `host.services.protocol=SSH` in the same array, but you cannot combine `host.services.port=80` and `host.location.country=”United States”` in the same array. You can input multiple arrays of objects in each API call.<br><br>To use this endpoint, your organization must have access to the Threat Hunting Module. This endpoint costs 1 credit per count condition (array of objects) included in the API call.
   */
  async valueCounts(
    request: operations.V3ThreathuntingValueCountsRequest,
    options?: RequestOptions,
  ): Promise<operations.V3ThreathuntingValueCountsResponse> {
    return unwrapAsync(threatHuntingValueCounts(
      this,
      request,
      options,
    ));
  }
}
