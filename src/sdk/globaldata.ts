/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { globalDataAggregate } from "../funcs/globalDataAggregate.js";
import { globalDataGetCertificate } from "../funcs/globalDataGetCertificate.js";
import { globalDataGetCertificates } from "../funcs/globalDataGetCertificates.js";
import { globalDataGetHost } from "../funcs/globalDataGetHost.js";
import { globalDataGetHosts } from "../funcs/globalDataGetHosts.js";
import { globalDataGetHostTimeline } from "../funcs/globalDataGetHostTimeline.js";
import { globalDataGetWebProperties } from "../funcs/globalDataGetWebProperties.js";
import { globalDataGetWebProperty } from "../funcs/globalDataGetWebProperty.js";
import { globalDataSearch } from "../funcs/globalDataSearch.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class GlobalData extends ClientSDK {
  /**
   * Get multiple certificates
   *
   * @remarks
   * Retrieve information about multiple certificates. A certificate ID is its SHA-256 fingerprint in the Censys dataset.
   */
  async getCertificates(
    request: operations.V3GlobaldataAssetCertificateListRequest,
    options?: RequestOptions,
  ): Promise<operations.V3GlobaldataAssetCertificateListResponse> {
    return unwrapAsync(globalDataGetCertificates(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a certificate
   *
   * @remarks
   * Retrieve information about a single certificate. A certificate ID is its SHA-256 fingerprint in the Censys dataset.
   */
  async getCertificate(
    request: operations.V3GlobaldataAssetCertificateRequest,
    options?: RequestOptions,
  ): Promise<operations.V3GlobaldataAssetCertificateResponse> {
    return unwrapAsync(globalDataGetCertificate(
      this,
      request,
      options,
    ));
  }

  /**
   * Get multiple hosts
   *
   * @remarks
   * Retrieve information about multiple hosts. A host ID is its IP address.
   */
  async getHosts(
    request: operations.V3GlobaldataAssetHostListRequest,
    options?: RequestOptions,
  ): Promise<operations.V3GlobaldataAssetHostListResponse> {
    return unwrapAsync(globalDataGetHosts(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a host
   *
   * @remarks
   * Retrieve information about a single host. A host ID is its IP address.
   */
  async getHost(
    request: operations.V3GlobaldataAssetHostRequest,
    options?: RequestOptions,
  ): Promise<operations.V3GlobaldataAssetHostResponse> {
    return unwrapAsync(globalDataGetHost(
      this,
      request,
      options,
    ));
  }

  /**
   * Get host event history
   *
   * @remarks
   * Retrieve event history for a host. A host ID is its IP address.
   */
  async getHostTimeline(
    request: operations.V3GlobaldataAssetHostTimelineRequest,
    options?: RequestOptions,
  ): Promise<operations.V3GlobaldataAssetHostTimelineResponse> {
    return unwrapAsync(globalDataGetHostTimeline(
      this,
      request,
      options,
    ));
  }

  /**
   * Get multiple web properties
   *
   * @remarks
   * Retrieve information about multiple web properties. Web properties are identified using a combination of a hostname and port joined with a colon, such as `platform.censys.io:80`.
   */
  async getWebProperties(
    request: operations.V3GlobaldataAssetWebpropertyListRequest,
    options?: RequestOptions,
  ): Promise<operations.V3GlobaldataAssetWebpropertyListResponse> {
    return unwrapAsync(globalDataGetWebProperties(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a web property
   *
   * @remarks
   * Retrieve information about a single web property. Web properties are identified using a combination of a hostname and port joined with a colon, such as `platform.censys.io:80`.
   */
  async getWebProperty(
    request: operations.V3GlobaldataAssetWebpropertyRequest,
    options?: RequestOptions,
  ): Promise<operations.V3GlobaldataAssetWebpropertyResponse> {
    return unwrapAsync(globalDataGetWebProperty(
      this,
      request,
      options,
    ));
  }

  /**
   * Aggregate results for a search query
   *
   * @remarks
   * Aggregate results for a Platform search query. This functionality is equivalent to the [Report Builder](https://docs.censys.com/docs/platform-report-builder#/) in the Platform web UI.
   */
  async aggregate(
    request: operations.V3GlobaldataSearchAggregateRequest,
    options?: RequestOptions,
  ): Promise<operations.V3GlobaldataSearchAggregateResponse> {
    return unwrapAsync(globalDataAggregate(
      this,
      request,
      options,
    ));
  }

  /**
   * Run a search query
   *
   * @remarks
   * Run a search query across Censys data. Reference the [documentation on Censys Query Language](https://docs.censys.com/docs/censys-query-language#/) for information about query syntax.
   */
  async search(
    request: operations.V3GlobaldataSearchQueryRequest,
    options?: RequestOptions,
  ): Promise<operations.V3GlobaldataSearchQueryResponse> {
    return unwrapAsync(globalDataSearch(
      this,
      request,
      options,
    ));
  }
}
