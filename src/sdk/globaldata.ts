/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { globalDataAggregate } from "../funcs/globalDataAggregate.js";
import { globalDataGetCertificate } from "../funcs/globalDataGetCertificate.js";
import { globalDataGetCertificates } from "../funcs/globalDataGetCertificates.js";
import { globalDataGetHost } from "../funcs/globalDataGetHost.js";
import { globalDataGetHosts } from "../funcs/globalDataGetHosts.js";
import { globalDataGetHostTimeline } from "../funcs/globalDataGetHostTimeline.js";
import { globalDataGetWebProperties } from "../funcs/globalDataGetWebProperties.js";
import { globalDataGetWebProperty } from "../funcs/globalDataGetWebProperty.js";
import { globalDataSearch } from "../funcs/globalDataSearch.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class GlobalData extends ClientSDK {
  /**
   * Asset / Certificate Bulk
   *
   * @remarks
   * Get multiple Certificates
   */
  async getCertificates(
    request: operations.V3GlobaldataAssetCertificateListRequest,
    options?: RequestOptions,
  ): Promise<operations.V3GlobaldataAssetCertificateListResponse> {
    return unwrapAsync(globalDataGetCertificates(
      this,
      request,
      options,
    ));
  }

  /**
   * Asset / Certificate
   *
   * @remarks
   * Get a Certificate
   */
  async getCertificate(
    request: operations.V3GlobaldataAssetCertificateRequest,
    options?: RequestOptions,
  ): Promise<operations.V3GlobaldataAssetCertificateResponse> {
    return unwrapAsync(globalDataGetCertificate(
      this,
      request,
      options,
    ));
  }

  /**
   * Asset / Host Bulk
   *
   * @remarks
   * Get multiple Hosts
   */
  async getHosts(
    request: operations.V3GlobaldataAssetHostListRequest,
    options?: RequestOptions,
  ): Promise<operations.V3GlobaldataAssetHostListResponse> {
    return unwrapAsync(globalDataGetHosts(
      this,
      request,
      options,
    ));
  }

  /**
   * Asset / Host
   *
   * @remarks
   * Get a Host
   */
  async getHost(
    request: operations.V3GlobaldataAssetHostRequest,
    options?: RequestOptions,
  ): Promise<operations.V3GlobaldataAssetHostResponse> {
    return unwrapAsync(globalDataGetHost(
      this,
      request,
      options,
    ));
  }

  /**
   * Asset / Host Timeline
   *
   * @remarks
   * Get the timeline of events for a Host
   */
  async getHostTimeline(
    request: operations.V3GlobaldataAssetHostTimelineRequest,
    options?: RequestOptions,
  ): Promise<operations.V3GlobaldataAssetHostTimelineResponse> {
    return unwrapAsync(globalDataGetHostTimeline(
      this,
      request,
      options,
    ));
  }

  /**
   * Asset / WebProperty Bulk
   *
   * @remarks
   * Get multiple WebProperties
   */
  async getWebProperties(
    request: operations.V3GlobaldataAssetWebpropertyListRequest,
    options?: RequestOptions,
  ): Promise<operations.V3GlobaldataAssetWebpropertyListResponse> {
    return unwrapAsync(globalDataGetWebProperties(
      this,
      request,
      options,
    ));
  }

  /**
   * Asset / WebProperty
   *
   * @remarks
   * Get a Webproperty
   */
  async getWebProperty(
    request: operations.V3GlobaldataAssetWebpropertyRequest,
    options?: RequestOptions,
  ): Promise<operations.V3GlobaldataAssetWebpropertyResponse> {
    return unwrapAsync(globalDataGetWebProperty(
      this,
      request,
      options,
    ));
  }

  /**
   * Search / Aggregate
   *
   * @remarks
   * Run an aggregation via the Global data set
   */
  async aggregate(
    request: operations.V3GlobaldataSearchAggregateRequest,
    options?: RequestOptions,
  ): Promise<operations.V3GlobaldataSearchAggregateResponse> {
    return unwrapAsync(globalDataAggregate(
      this,
      request,
      options,
    ));
  }

  /**
   * Search / Query
   *
   * @remarks
   * Search the Global data set
   */
  async search(
    request: operations.V3GlobaldataSearchQueryRequest,
    options?: RequestOptions,
  ): Promise<operations.V3GlobaldataSearchQueryResponse> {
    return unwrapAsync(globalDataSearch(
      this,
      request,
      options,
    ));
  }
}
