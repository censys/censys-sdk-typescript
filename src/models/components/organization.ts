/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Contact,
  Contact$inboundSchema,
  Contact$Outbound,
  Contact$outboundSchema,
} from "./contact.js";

export type Organization = {
  abuseContacts?: Array<Contact> | null | undefined;
  address?: string | undefined;
  adminContacts?: Array<Contact> | null | undefined;
  city?: string | undefined;
  country?: string | undefined;
  handle?: string | undefined;
  name?: string | undefined;
  postalCode?: string | undefined;
  state?: string | undefined;
  street?: string | undefined;
  techContacts?: Array<Contact> | null | undefined;
};

/** @internal */
export const Organization$inboundSchema: z.ZodType<
  Organization,
  z.ZodTypeDef,
  unknown
> = z.object({
  abuse_contacts: z.nullable(z.array(Contact$inboundSchema)).optional(),
  address: z.string().optional(),
  admin_contacts: z.nullable(z.array(Contact$inboundSchema)).optional(),
  city: z.string().optional(),
  country: z.string().optional(),
  handle: z.string().optional(),
  name: z.string().optional(),
  postal_code: z.string().optional(),
  state: z.string().optional(),
  street: z.string().optional(),
  tech_contacts: z.nullable(z.array(Contact$inboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    "abuse_contacts": "abuseContacts",
    "admin_contacts": "adminContacts",
    "postal_code": "postalCode",
    "tech_contacts": "techContacts",
  });
});

/** @internal */
export type Organization$Outbound = {
  abuse_contacts?: Array<Contact$Outbound> | null | undefined;
  address?: string | undefined;
  admin_contacts?: Array<Contact$Outbound> | null | undefined;
  city?: string | undefined;
  country?: string | undefined;
  handle?: string | undefined;
  name?: string | undefined;
  postal_code?: string | undefined;
  state?: string | undefined;
  street?: string | undefined;
  tech_contacts?: Array<Contact$Outbound> | null | undefined;
};

/** @internal */
export const Organization$outboundSchema: z.ZodType<
  Organization$Outbound,
  z.ZodTypeDef,
  Organization
> = z.object({
  abuseContacts: z.nullable(z.array(Contact$outboundSchema)).optional(),
  address: z.string().optional(),
  adminContacts: z.nullable(z.array(Contact$outboundSchema)).optional(),
  city: z.string().optional(),
  country: z.string().optional(),
  handle: z.string().optional(),
  name: z.string().optional(),
  postalCode: z.string().optional(),
  state: z.string().optional(),
  street: z.string().optional(),
  techContacts: z.nullable(z.array(Contact$outboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    abuseContacts: "abuse_contacts",
    adminContacts: "admin_contacts",
    postalCode: "postal_code",
    techContacts: "tech_contacts",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Organization$ {
  /** @deprecated use `Organization$inboundSchema` instead. */
  export const inboundSchema = Organization$inboundSchema;
  /** @deprecated use `Organization$outboundSchema` instead. */
  export const outboundSchema = Organization$outboundSchema;
  /** @deprecated use `Organization$Outbound` instead. */
  export type Outbound = Organization$Outbound;
}

export function organizationToJSON(organization: Organization): string {
  return JSON.stringify(Organization$outboundSchema.parse(organization));
}

export function organizationFromJSON(
  jsonString: string,
): SafeParseResult<Organization, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Organization$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Organization' from JSON`,
  );
}
