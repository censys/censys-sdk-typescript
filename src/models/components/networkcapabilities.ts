/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type NetworkCapabilities = {
  dhcpV6?: boolean | undefined;
  dot11Configuration?: boolean | undefined;
  dot1xConfigurations?: number | undefined;
  dynamicDns?: boolean | undefined;
  hostnameFromDhcp?: boolean | undefined;
  ipFilter?: boolean | undefined;
  ipv6?: boolean | undefined;
  ntp?: number | undefined;
  zeroConfiguration?: boolean | undefined;
};

/** @internal */
export const NetworkCapabilities$inboundSchema: z.ZodType<
  NetworkCapabilities,
  z.ZodTypeDef,
  unknown
> = z.object({
  dhcp_v6: z.boolean().optional(),
  dot11_configuration: z.boolean().optional(),
  dot1x_configurations: z.number().int().optional(),
  dynamic_dns: z.boolean().optional(),
  hostname_from_dhcp: z.boolean().optional(),
  ip_filter: z.boolean().optional(),
  ipv6: z.boolean().optional(),
  ntp: z.number().int().optional(),
  zero_configuration: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    "dhcp_v6": "dhcpV6",
    "dot11_configuration": "dot11Configuration",
    "dot1x_configurations": "dot1xConfigurations",
    "dynamic_dns": "dynamicDns",
    "hostname_from_dhcp": "hostnameFromDhcp",
    "ip_filter": "ipFilter",
    "zero_configuration": "zeroConfiguration",
  });
});

/** @internal */
export type NetworkCapabilities$Outbound = {
  dhcp_v6?: boolean | undefined;
  dot11_configuration?: boolean | undefined;
  dot1x_configurations?: number | undefined;
  dynamic_dns?: boolean | undefined;
  hostname_from_dhcp?: boolean | undefined;
  ip_filter?: boolean | undefined;
  ipv6?: boolean | undefined;
  ntp?: number | undefined;
  zero_configuration?: boolean | undefined;
};

/** @internal */
export const NetworkCapabilities$outboundSchema: z.ZodType<
  NetworkCapabilities$Outbound,
  z.ZodTypeDef,
  NetworkCapabilities
> = z.object({
  dhcpV6: z.boolean().optional(),
  dot11Configuration: z.boolean().optional(),
  dot1xConfigurations: z.number().int().optional(),
  dynamicDns: z.boolean().optional(),
  hostnameFromDhcp: z.boolean().optional(),
  ipFilter: z.boolean().optional(),
  ipv6: z.boolean().optional(),
  ntp: z.number().int().optional(),
  zeroConfiguration: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    dhcpV6: "dhcp_v6",
    dot11Configuration: "dot11_configuration",
    dot1xConfigurations: "dot1x_configurations",
    dynamicDns: "dynamic_dns",
    hostnameFromDhcp: "hostname_from_dhcp",
    ipFilter: "ip_filter",
    zeroConfiguration: "zero_configuration",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NetworkCapabilities$ {
  /** @deprecated use `NetworkCapabilities$inboundSchema` instead. */
  export const inboundSchema = NetworkCapabilities$inboundSchema;
  /** @deprecated use `NetworkCapabilities$outboundSchema` instead. */
  export const outboundSchema = NetworkCapabilities$outboundSchema;
  /** @deprecated use `NetworkCapabilities$Outbound` instead. */
  export type Outbound = NetworkCapabilities$Outbound;
}

export function networkCapabilitiesToJSON(
  networkCapabilities: NetworkCapabilities,
): string {
  return JSON.stringify(
    NetworkCapabilities$outboundSchema.parse(networkCapabilities),
  );
}

export function networkCapabilitiesFromJSON(
  jsonString: string,
): SafeParseResult<NetworkCapabilities, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NetworkCapabilities$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NetworkCapabilities' from JSON`,
  );
}
