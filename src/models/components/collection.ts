/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const CollectionStatus = {
  Unspecified: "unspecified",
  Populating: "populating",
  Active: "active",
  Paused: "paused",
  Archived: "archived",
} as const;
export type CollectionStatus = ClosedEnum<typeof CollectionStatus>;

export const StatusReason = {
  Unspecified: "unspecified",
  NotEnoughCredits: "not_enough_credits",
  NotEntitled: "not_entitled",
  TooManyAssets: "too_many_assets",
  Manual: "manual",
  QueryChanged: "query_changed",
  Initial: "initial",
} as const;
export type StatusReason = ClosedEnum<typeof StatusReason>;

export type Collection = {
  addedAssets24Hours: number;
  createTime: Date;
  description: string;
  id: string;
  name: string;
  query: string;
  removedAssets24Hours: number;
  status: CollectionStatus;
  statusReason: StatusReason | null;
  totalAssets: number;
};

/** @internal */
export const CollectionStatus$inboundSchema: z.ZodNativeEnum<
  typeof CollectionStatus
> = z.nativeEnum(CollectionStatus);

/** @internal */
export const CollectionStatus$outboundSchema: z.ZodNativeEnum<
  typeof CollectionStatus
> = CollectionStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CollectionStatus$ {
  /** @deprecated use `CollectionStatus$inboundSchema` instead. */
  export const inboundSchema = CollectionStatus$inboundSchema;
  /** @deprecated use `CollectionStatus$outboundSchema` instead. */
  export const outboundSchema = CollectionStatus$outboundSchema;
}

/** @internal */
export const StatusReason$inboundSchema: z.ZodNativeEnum<typeof StatusReason> =
  z.nativeEnum(StatusReason);

/** @internal */
export const StatusReason$outboundSchema: z.ZodNativeEnum<typeof StatusReason> =
  StatusReason$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StatusReason$ {
  /** @deprecated use `StatusReason$inboundSchema` instead. */
  export const inboundSchema = StatusReason$inboundSchema;
  /** @deprecated use `StatusReason$outboundSchema` instead. */
  export const outboundSchema = StatusReason$outboundSchema;
}

/** @internal */
export const Collection$inboundSchema: z.ZodType<
  Collection,
  z.ZodTypeDef,
  unknown
> = z.object({
  added_assets_24_hours: z.number().int(),
  create_time: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ),
  description: z.string(),
  id: z.string(),
  name: z.string(),
  query: z.string(),
  removed_assets_24_hours: z.number().int(),
  status: CollectionStatus$inboundSchema,
  status_reason: z.nullable(StatusReason$inboundSchema),
  total_assets: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    "added_assets_24_hours": "addedAssets24Hours",
    "create_time": "createTime",
    "removed_assets_24_hours": "removedAssets24Hours",
    "status_reason": "statusReason",
    "total_assets": "totalAssets",
  });
});

/** @internal */
export type Collection$Outbound = {
  added_assets_24_hours: number;
  create_time: string;
  description: string;
  id: string;
  name: string;
  query: string;
  removed_assets_24_hours: number;
  status: string;
  status_reason: string | null;
  total_assets: number;
};

/** @internal */
export const Collection$outboundSchema: z.ZodType<
  Collection$Outbound,
  z.ZodTypeDef,
  Collection
> = z.object({
  addedAssets24Hours: z.number().int(),
  createTime: z.date().transform(v => v.toISOString()),
  description: z.string(),
  id: z.string(),
  name: z.string(),
  query: z.string(),
  removedAssets24Hours: z.number().int(),
  status: CollectionStatus$outboundSchema,
  statusReason: z.nullable(StatusReason$outboundSchema),
  totalAssets: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    addedAssets24Hours: "added_assets_24_hours",
    createTime: "create_time",
    removedAssets24Hours: "removed_assets_24_hours",
    statusReason: "status_reason",
    totalAssets: "total_assets",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Collection$ {
  /** @deprecated use `Collection$inboundSchema` instead. */
  export const inboundSchema = Collection$inboundSchema;
  /** @deprecated use `Collection$outboundSchema` instead. */
  export const outboundSchema = Collection$outboundSchema;
  /** @deprecated use `Collection$Outbound` instead. */
  export type Outbound = Collection$Outbound;
}

export function collectionToJSON(collection: Collection): string {
  return JSON.stringify(Collection$outboundSchema.parse(collection));
}

export function collectionFromJSON(
  jsonString: string,
): SafeParseResult<Collection, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Collection$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Collection' from JSON`,
  );
}
