/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type TplinkKasa = {
  activeMode?: string | undefined;
  brightness?: number | undefined;
  devName?: string | undefined;
  errCode?: number | undefined;
  feature?: string | undefined;
  hwVer?: string | undefined;
  iconHash?: string | undefined;
  ledOff?: number | undefined;
  micType?: string | undefined;
  model?: string | undefined;
  onTime?: number | undefined;
  relayState?: number | undefined;
  rssi?: number | undefined;
  swVer?: string | undefined;
  updating?: number | undefined;
};

/** @internal */
export const TplinkKasa$inboundSchema: z.ZodType<
  TplinkKasa,
  z.ZodTypeDef,
  unknown
> = z.object({
  active_mode: z.string().optional(),
  brightness: z.number().int().optional(),
  dev_name: z.string().optional(),
  err_code: z.number().int().optional(),
  feature: z.string().optional(),
  hw_ver: z.string().optional(),
  icon_hash: z.string().optional(),
  led_off: z.number().int().optional(),
  mic_type: z.string().optional(),
  model: z.string().optional(),
  on_time: z.number().int().optional(),
  relay_state: z.number().int().optional(),
  rssi: z.number().int().optional(),
  sw_ver: z.string().optional(),
  updating: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "active_mode": "activeMode",
    "dev_name": "devName",
    "err_code": "errCode",
    "hw_ver": "hwVer",
    "icon_hash": "iconHash",
    "led_off": "ledOff",
    "mic_type": "micType",
    "on_time": "onTime",
    "relay_state": "relayState",
    "sw_ver": "swVer",
  });
});

/** @internal */
export type TplinkKasa$Outbound = {
  active_mode?: string | undefined;
  brightness?: number | undefined;
  dev_name?: string | undefined;
  err_code?: number | undefined;
  feature?: string | undefined;
  hw_ver?: string | undefined;
  icon_hash?: string | undefined;
  led_off?: number | undefined;
  mic_type?: string | undefined;
  model?: string | undefined;
  on_time?: number | undefined;
  relay_state?: number | undefined;
  rssi?: number | undefined;
  sw_ver?: string | undefined;
  updating?: number | undefined;
};

/** @internal */
export const TplinkKasa$outboundSchema: z.ZodType<
  TplinkKasa$Outbound,
  z.ZodTypeDef,
  TplinkKasa
> = z.object({
  activeMode: z.string().optional(),
  brightness: z.number().int().optional(),
  devName: z.string().optional(),
  errCode: z.number().int().optional(),
  feature: z.string().optional(),
  hwVer: z.string().optional(),
  iconHash: z.string().optional(),
  ledOff: z.number().int().optional(),
  micType: z.string().optional(),
  model: z.string().optional(),
  onTime: z.number().int().optional(),
  relayState: z.number().int().optional(),
  rssi: z.number().int().optional(),
  swVer: z.string().optional(),
  updating: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    activeMode: "active_mode",
    devName: "dev_name",
    errCode: "err_code",
    hwVer: "hw_ver",
    iconHash: "icon_hash",
    ledOff: "led_off",
    micType: "mic_type",
    onTime: "on_time",
    relayState: "relay_state",
    swVer: "sw_ver",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TplinkKasa$ {
  /** @deprecated use `TplinkKasa$inboundSchema` instead. */
  export const inboundSchema = TplinkKasa$inboundSchema;
  /** @deprecated use `TplinkKasa$outboundSchema` instead. */
  export const outboundSchema = TplinkKasa$outboundSchema;
  /** @deprecated use `TplinkKasa$Outbound` instead. */
  export type Outbound = TplinkKasa$Outbound;
}

export function tplinkKasaToJSON(tplinkKasa: TplinkKasa): string {
  return JSON.stringify(TplinkKasa$outboundSchema.parse(tplinkKasa));
}

export function tplinkKasaFromJSON(
  jsonString: string,
): SafeParseResult<TplinkKasa, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TplinkKasa$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TplinkKasa' from JSON`,
  );
}
