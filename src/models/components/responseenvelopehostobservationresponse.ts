/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  HostObservationResponse,
  HostObservationResponse$inboundSchema,
  HostObservationResponse$Outbound,
  HostObservationResponse$outboundSchema,
} from "./hostobservationresponse.js";

export type ResponseEnvelopeHostObservationResponse = {
  result?: HostObservationResponse | undefined;
};

/** @internal */
export const ResponseEnvelopeHostObservationResponse$inboundSchema: z.ZodType<
  ResponseEnvelopeHostObservationResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  result: HostObservationResponse$inboundSchema.optional(),
});

/** @internal */
export type ResponseEnvelopeHostObservationResponse$Outbound = {
  result?: HostObservationResponse$Outbound | undefined;
};

/** @internal */
export const ResponseEnvelopeHostObservationResponse$outboundSchema: z.ZodType<
  ResponseEnvelopeHostObservationResponse$Outbound,
  z.ZodTypeDef,
  ResponseEnvelopeHostObservationResponse
> = z.object({
  result: HostObservationResponse$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseEnvelopeHostObservationResponse$ {
  /** @deprecated use `ResponseEnvelopeHostObservationResponse$inboundSchema` instead. */
  export const inboundSchema =
    ResponseEnvelopeHostObservationResponse$inboundSchema;
  /** @deprecated use `ResponseEnvelopeHostObservationResponse$outboundSchema` instead. */
  export const outboundSchema =
    ResponseEnvelopeHostObservationResponse$outboundSchema;
  /** @deprecated use `ResponseEnvelopeHostObservationResponse$Outbound` instead. */
  export type Outbound = ResponseEnvelopeHostObservationResponse$Outbound;
}

export function responseEnvelopeHostObservationResponseToJSON(
  responseEnvelopeHostObservationResponse:
    ResponseEnvelopeHostObservationResponse,
): string {
  return JSON.stringify(
    ResponseEnvelopeHostObservationResponse$outboundSchema.parse(
      responseEnvelopeHostObservationResponse,
    ),
  );
}

export function responseEnvelopeHostObservationResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  ResponseEnvelopeHostObservationResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ResponseEnvelopeHostObservationResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ResponseEnvelopeHostObservationResponse' from JSON`,
  );
}
