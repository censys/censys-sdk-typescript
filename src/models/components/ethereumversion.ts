/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type EthereumVersion = {
  client?: string | undefined;
  compiler?: string | undefined;
  platform?: string | undefined;
  trailing?: string | undefined;
  version?: string | undefined;
};

/** @internal */
export const EthereumVersion$inboundSchema: z.ZodType<
  EthereumVersion,
  z.ZodTypeDef,
  unknown
> = z.object({
  client: z.string().optional(),
  compiler: z.string().optional(),
  platform: z.string().optional(),
  trailing: z.string().optional(),
  version: z.string().optional(),
});

/** @internal */
export type EthereumVersion$Outbound = {
  client?: string | undefined;
  compiler?: string | undefined;
  platform?: string | undefined;
  trailing?: string | undefined;
  version?: string | undefined;
};

/** @internal */
export const EthereumVersion$outboundSchema: z.ZodType<
  EthereumVersion$Outbound,
  z.ZodTypeDef,
  EthereumVersion
> = z.object({
  client: z.string().optional(),
  compiler: z.string().optional(),
  platform: z.string().optional(),
  trailing: z.string().optional(),
  version: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EthereumVersion$ {
  /** @deprecated use `EthereumVersion$inboundSchema` instead. */
  export const inboundSchema = EthereumVersion$inboundSchema;
  /** @deprecated use `EthereumVersion$outboundSchema` instead. */
  export const outboundSchema = EthereumVersion$outboundSchema;
  /** @deprecated use `EthereumVersion$Outbound` instead. */
  export type Outbound = EthereumVersion$Outbound;
}

export function ethereumVersionToJSON(
  ethereumVersion: EthereumVersion,
): string {
  return JSON.stringify(EthereumVersion$outboundSchema.parse(ethereumVersion));
}

export function ethereumVersionFromJSON(
  jsonString: string,
): SafeParseResult<EthereumVersion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EthereumVersion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EthereumVersion' from JSON`,
  );
}
