/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  RootStoreChain,
  RootStoreChain$inboundSchema,
  RootStoreChain$Outbound,
  RootStoreChain$outboundSchema,
} from "./rootstorechain.js";

/**
 * The certificate's type. Options include root, intermediate, or leaf.
 */
export const Type = {
  Unknown: "unknown",
  Root: "root",
  Intermediate: "intermediate",
  Leaf: "leaf",
} as const;
/**
 * The certificate's type. Options include root, intermediate, or leaf.
 */
export type Type = ClosedEnum<typeof Type>;

export type RootStore = {
  /**
   * A path of trusted signing certificates up to a root certificate present in a root store, represented as an ordered list of SHA-256 fingerprints.
   */
  chains?: Array<RootStoreChain> | null | undefined;
  /**
   * Whether the certificate has ever been considered valid by the root store.
   */
  everValid?: boolean | undefined;
  /**
   * Whether there ever existed a trusted path of signing certificates from a certificate present in the root certificate store.
   */
  hadTrustedPath?: boolean | undefined;
  /**
   * Whether there currently exists a trusted path of signing certificates from a certificate present in the root certificate store.
   */
  hasTrustedPath?: boolean | undefined;
  /**
   * Whether the certificate is in the revocation set (e.g. OneCRL) associated with the root store.
   */
  inRevocationSet?: boolean | undefined;
  /**
   * Whether the certificate is currently considered valid by the root store: a summary of the trust path, revoked, blocklisted/allowlisted, and expired fields.
   */
  isValid?: boolean | undefined;
  /**
   * The SHA-256 fingerprints of the certificate's immediate parents in its trust path(s).
   */
  parents?: Array<string> | null | undefined;
  /**
   * The certificate's type. Options include root, intermediate, or leaf.
   */
  type?: Type | undefined;
};

/** @internal */
export const Type$inboundSchema: z.ZodNativeEnum<typeof Type> = z.nativeEnum(
  Type,
);

/** @internal */
export const Type$outboundSchema: z.ZodNativeEnum<typeof Type> =
  Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Type$ {
  /** @deprecated use `Type$inboundSchema` instead. */
  export const inboundSchema = Type$inboundSchema;
  /** @deprecated use `Type$outboundSchema` instead. */
  export const outboundSchema = Type$outboundSchema;
}

/** @internal */
export const RootStore$inboundSchema: z.ZodType<
  RootStore,
  z.ZodTypeDef,
  unknown
> = z.object({
  chains: z.nullable(z.array(RootStoreChain$inboundSchema)).optional(),
  ever_valid: z.boolean().optional(),
  had_trusted_path: z.boolean().optional(),
  has_trusted_path: z.boolean().optional(),
  in_revocation_set: z.boolean().optional(),
  is_valid: z.boolean().optional(),
  parents: z.nullable(z.array(z.string())).optional(),
  type: Type$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "ever_valid": "everValid",
    "had_trusted_path": "hadTrustedPath",
    "has_trusted_path": "hasTrustedPath",
    "in_revocation_set": "inRevocationSet",
    "is_valid": "isValid",
  });
});

/** @internal */
export type RootStore$Outbound = {
  chains?: Array<RootStoreChain$Outbound> | null | undefined;
  ever_valid?: boolean | undefined;
  had_trusted_path?: boolean | undefined;
  has_trusted_path?: boolean | undefined;
  in_revocation_set?: boolean | undefined;
  is_valid?: boolean | undefined;
  parents?: Array<string> | null | undefined;
  type?: string | undefined;
};

/** @internal */
export const RootStore$outboundSchema: z.ZodType<
  RootStore$Outbound,
  z.ZodTypeDef,
  RootStore
> = z.object({
  chains: z.nullable(z.array(RootStoreChain$outboundSchema)).optional(),
  everValid: z.boolean().optional(),
  hadTrustedPath: z.boolean().optional(),
  hasTrustedPath: z.boolean().optional(),
  inRevocationSet: z.boolean().optional(),
  isValid: z.boolean().optional(),
  parents: z.nullable(z.array(z.string())).optional(),
  type: Type$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    everValid: "ever_valid",
    hadTrustedPath: "had_trusted_path",
    hasTrustedPath: "has_trusted_path",
    inRevocationSet: "in_revocation_set",
    isValid: "is_valid",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RootStore$ {
  /** @deprecated use `RootStore$inboundSchema` instead. */
  export const inboundSchema = RootStore$inboundSchema;
  /** @deprecated use `RootStore$outboundSchema` instead. */
  export const outboundSchema = RootStore$outboundSchema;
  /** @deprecated use `RootStore$Outbound` instead. */
  export type Outbound = RootStore$Outbound;
}

export function rootStoreToJSON(rootStore: RootStore): string {
  return JSON.stringify(RootStore$outboundSchema.parse(rootStore));
}

export function rootStoreFromJSON(
  jsonString: string,
): SafeParseResult<RootStore, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RootStore$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RootStore' from JSON`,
  );
}
