/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type RippleClioResults = {
  clioVersion?: string | undefined;
  rippledVersion?: string | undefined;
  validated?: boolean | undefined;
  validationQuorum?: number | undefined;
};

/** @internal */
export const RippleClioResults$inboundSchema: z.ZodType<
  RippleClioResults,
  z.ZodTypeDef,
  unknown
> = z.object({
  clio_version: z.string().optional(),
  rippled_version: z.string().optional(),
  validated: z.boolean().optional(),
  validation_quorum: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "clio_version": "clioVersion",
    "rippled_version": "rippledVersion",
    "validation_quorum": "validationQuorum",
  });
});

/** @internal */
export type RippleClioResults$Outbound = {
  clio_version?: string | undefined;
  rippled_version?: string | undefined;
  validated?: boolean | undefined;
  validation_quorum?: number | undefined;
};

/** @internal */
export const RippleClioResults$outboundSchema: z.ZodType<
  RippleClioResults$Outbound,
  z.ZodTypeDef,
  RippleClioResults
> = z.object({
  clioVersion: z.string().optional(),
  rippledVersion: z.string().optional(),
  validated: z.boolean().optional(),
  validationQuorum: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    clioVersion: "clio_version",
    rippledVersion: "rippled_version",
    validationQuorum: "validation_quorum",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RippleClioResults$ {
  /** @deprecated use `RippleClioResults$inboundSchema` instead. */
  export const inboundSchema = RippleClioResults$inboundSchema;
  /** @deprecated use `RippleClioResults$outboundSchema` instead. */
  export const outboundSchema = RippleClioResults$outboundSchema;
  /** @deprecated use `RippleClioResults$Outbound` instead. */
  export type Outbound = RippleClioResults$Outbound;
}

export function rippleClioResultsToJSON(
  rippleClioResults: RippleClioResults,
): string {
  return JSON.stringify(
    RippleClioResults$outboundSchema.parse(rippleClioResults),
  );
}

export function rippleClioResultsFromJSON(
  jsonString: string,
): SafeParseResult<RippleClioResults, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RippleClioResults$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RippleClioResults' from JSON`,
  );
}
