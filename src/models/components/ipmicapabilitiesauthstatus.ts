/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type IpmiCapabilitiesAuthStatus = {
  /**
   * If true, the server allows anonymous login.
   */
  anonymousLoginEnabled?: boolean | undefined;
  /**
   * If true, each message must be authenticated.
   */
  authEachMessage?: boolean | undefined;
  /**
   * If true, the server has anonymous users.
   */
  hasAnonymousUsers?: boolean | undefined;
  /**
   * If true, the server supports named users.
   */
  hasNamedUsers?: boolean | undefined;
  /**
   * The KG field.
   */
  twoKeyLoginRequired?: boolean | undefined;
  /**
   * If true, user authentication is disabled.
   */
  userAuthDisabled?: boolean | undefined;
};

/** @internal */
export const IpmiCapabilitiesAuthStatus$inboundSchema: z.ZodType<
  IpmiCapabilitiesAuthStatus,
  z.ZodTypeDef,
  unknown
> = z.object({
  anonymous_login_enabled: z.boolean().optional(),
  auth_each_message: z.boolean().optional(),
  has_anonymous_users: z.boolean().optional(),
  has_named_users: z.boolean().optional(),
  two_key_login_required: z.boolean().optional(),
  user_auth_disabled: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    "anonymous_login_enabled": "anonymousLoginEnabled",
    "auth_each_message": "authEachMessage",
    "has_anonymous_users": "hasAnonymousUsers",
    "has_named_users": "hasNamedUsers",
    "two_key_login_required": "twoKeyLoginRequired",
    "user_auth_disabled": "userAuthDisabled",
  });
});

/** @internal */
export type IpmiCapabilitiesAuthStatus$Outbound = {
  anonymous_login_enabled?: boolean | undefined;
  auth_each_message?: boolean | undefined;
  has_anonymous_users?: boolean | undefined;
  has_named_users?: boolean | undefined;
  two_key_login_required?: boolean | undefined;
  user_auth_disabled?: boolean | undefined;
};

/** @internal */
export const IpmiCapabilitiesAuthStatus$outboundSchema: z.ZodType<
  IpmiCapabilitiesAuthStatus$Outbound,
  z.ZodTypeDef,
  IpmiCapabilitiesAuthStatus
> = z.object({
  anonymousLoginEnabled: z.boolean().optional(),
  authEachMessage: z.boolean().optional(),
  hasAnonymousUsers: z.boolean().optional(),
  hasNamedUsers: z.boolean().optional(),
  twoKeyLoginRequired: z.boolean().optional(),
  userAuthDisabled: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    anonymousLoginEnabled: "anonymous_login_enabled",
    authEachMessage: "auth_each_message",
    hasAnonymousUsers: "has_anonymous_users",
    hasNamedUsers: "has_named_users",
    twoKeyLoginRequired: "two_key_login_required",
    userAuthDisabled: "user_auth_disabled",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IpmiCapabilitiesAuthStatus$ {
  /** @deprecated use `IpmiCapabilitiesAuthStatus$inboundSchema` instead. */
  export const inboundSchema = IpmiCapabilitiesAuthStatus$inboundSchema;
  /** @deprecated use `IpmiCapabilitiesAuthStatus$outboundSchema` instead. */
  export const outboundSchema = IpmiCapabilitiesAuthStatus$outboundSchema;
  /** @deprecated use `IpmiCapabilitiesAuthStatus$Outbound` instead. */
  export type Outbound = IpmiCapabilitiesAuthStatus$Outbound;
}

export function ipmiCapabilitiesAuthStatusToJSON(
  ipmiCapabilitiesAuthStatus: IpmiCapabilitiesAuthStatus,
): string {
  return JSON.stringify(
    IpmiCapabilitiesAuthStatus$outboundSchema.parse(ipmiCapabilitiesAuthStatus),
  );
}

export function ipmiCapabilitiesAuthStatusFromJSON(
  jsonString: string,
): SafeParseResult<IpmiCapabilitiesAuthStatus, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => IpmiCapabilitiesAuthStatus$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'IpmiCapabilitiesAuthStatus' from JSON`,
  );
}
