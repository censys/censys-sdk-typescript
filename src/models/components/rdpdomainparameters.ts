/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type RdpDomainParameters = {
  domainProtocolVersion?: number | undefined;
  maxChannelIds?: number | undefined;
  maxMcspduSize?: number | undefined;
  maxProviderHeight?: number | undefined;
  maxTokenIds?: number | undefined;
  maxUserIdChannels?: number | undefined;
  minThroughput?: number | undefined;
  numPriorities?: number | undefined;
};

/** @internal */
export const RdpDomainParameters$inboundSchema: z.ZodType<
  RdpDomainParameters,
  z.ZodTypeDef,
  unknown
> = z.object({
  domain_protocol_version: z.number().int().optional(),
  max_channel_ids: z.number().int().optional(),
  max_mcspdu_size: z.number().int().optional(),
  max_provider_height: z.number().int().optional(),
  max_token_ids: z.number().int().optional(),
  max_user_id_channels: z.number().int().optional(),
  min_throughput: z.number().int().optional(),
  num_priorities: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "domain_protocol_version": "domainProtocolVersion",
    "max_channel_ids": "maxChannelIds",
    "max_mcspdu_size": "maxMcspduSize",
    "max_provider_height": "maxProviderHeight",
    "max_token_ids": "maxTokenIds",
    "max_user_id_channels": "maxUserIdChannels",
    "min_throughput": "minThroughput",
    "num_priorities": "numPriorities",
  });
});

/** @internal */
export type RdpDomainParameters$Outbound = {
  domain_protocol_version?: number | undefined;
  max_channel_ids?: number | undefined;
  max_mcspdu_size?: number | undefined;
  max_provider_height?: number | undefined;
  max_token_ids?: number | undefined;
  max_user_id_channels?: number | undefined;
  min_throughput?: number | undefined;
  num_priorities?: number | undefined;
};

/** @internal */
export const RdpDomainParameters$outboundSchema: z.ZodType<
  RdpDomainParameters$Outbound,
  z.ZodTypeDef,
  RdpDomainParameters
> = z.object({
  domainProtocolVersion: z.number().int().optional(),
  maxChannelIds: z.number().int().optional(),
  maxMcspduSize: z.number().int().optional(),
  maxProviderHeight: z.number().int().optional(),
  maxTokenIds: z.number().int().optional(),
  maxUserIdChannels: z.number().int().optional(),
  minThroughput: z.number().int().optional(),
  numPriorities: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    domainProtocolVersion: "domain_protocol_version",
    maxChannelIds: "max_channel_ids",
    maxMcspduSize: "max_mcspdu_size",
    maxProviderHeight: "max_provider_height",
    maxTokenIds: "max_token_ids",
    maxUserIdChannels: "max_user_id_channels",
    minThroughput: "min_throughput",
    numPriorities: "num_priorities",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RdpDomainParameters$ {
  /** @deprecated use `RdpDomainParameters$inboundSchema` instead. */
  export const inboundSchema = RdpDomainParameters$inboundSchema;
  /** @deprecated use `RdpDomainParameters$outboundSchema` instead. */
  export const outboundSchema = RdpDomainParameters$outboundSchema;
  /** @deprecated use `RdpDomainParameters$Outbound` instead. */
  export type Outbound = RdpDomainParameters$Outbound;
}

export function rdpDomainParametersToJSON(
  rdpDomainParameters: RdpDomainParameters,
): string {
  return JSON.stringify(
    RdpDomainParameters$outboundSchema.parse(rdpDomainParameters),
  );
}

export function rdpDomainParametersFromJSON(
  jsonString: string,
): SafeParseResult<RdpDomainParameters, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RdpDomainParameters$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RdpDomainParameters' from JSON`,
  );
}
