/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PptpResponseInfo = {
  code?: number | undefined;
  meaning?: string | undefined;
};

/** @internal */
export const PptpResponseInfo$inboundSchema: z.ZodType<
  PptpResponseInfo,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.number().int().optional(),
  meaning: z.string().optional(),
});

/** @internal */
export type PptpResponseInfo$Outbound = {
  code?: number | undefined;
  meaning?: string | undefined;
};

/** @internal */
export const PptpResponseInfo$outboundSchema: z.ZodType<
  PptpResponseInfo$Outbound,
  z.ZodTypeDef,
  PptpResponseInfo
> = z.object({
  code: z.number().int().optional(),
  meaning: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PptpResponseInfo$ {
  /** @deprecated use `PptpResponseInfo$inboundSchema` instead. */
  export const inboundSchema = PptpResponseInfo$inboundSchema;
  /** @deprecated use `PptpResponseInfo$outboundSchema` instead. */
  export const outboundSchema = PptpResponseInfo$outboundSchema;
  /** @deprecated use `PptpResponseInfo$Outbound` instead. */
  export type Outbound = PptpResponseInfo$Outbound;
}

export function pptpResponseInfoToJSON(
  pptpResponseInfo: PptpResponseInfo,
): string {
  return JSON.stringify(
    PptpResponseInfo$outboundSchema.parse(pptpResponseInfo),
  );
}

export function pptpResponseInfoFromJSON(
  jsonString: string,
): SafeParseResult<PptpResponseInfo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PptpResponseInfo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PptpResponseInfo' from JSON`,
  );
}
