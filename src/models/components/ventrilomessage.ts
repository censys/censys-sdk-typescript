/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  VentriloHeader,
  VentriloHeader$inboundSchema,
  VentriloHeader$Outbound,
  VentriloHeader$outboundSchema,
} from "./ventriloheader.js";

export type VentriloMessage = {
  body?: string | undefined;
  error?: string | undefined;
  header?: VentriloHeader | undefined;
};

/** @internal */
export const VentriloMessage$inboundSchema: z.ZodType<
  VentriloMessage,
  z.ZodTypeDef,
  unknown
> = z.object({
  body: z.string().optional(),
  error: z.string().optional(),
  header: VentriloHeader$inboundSchema.optional(),
});

/** @internal */
export type VentriloMessage$Outbound = {
  body?: string | undefined;
  error?: string | undefined;
  header?: VentriloHeader$Outbound | undefined;
};

/** @internal */
export const VentriloMessage$outboundSchema: z.ZodType<
  VentriloMessage$Outbound,
  z.ZodTypeDef,
  VentriloMessage
> = z.object({
  body: z.string().optional(),
  error: z.string().optional(),
  header: VentriloHeader$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VentriloMessage$ {
  /** @deprecated use `VentriloMessage$inboundSchema` instead. */
  export const inboundSchema = VentriloMessage$inboundSchema;
  /** @deprecated use `VentriloMessage$outboundSchema` instead. */
  export const outboundSchema = VentriloMessage$outboundSchema;
  /** @deprecated use `VentriloMessage$Outbound` instead. */
  export type Outbound = VentriloMessage$Outbound;
}

export function ventriloMessageToJSON(
  ventriloMessage: VentriloMessage,
): string {
  return JSON.stringify(VentriloMessage$outboundSchema.parse(ventriloMessage));
}

export function ventriloMessageFromJSON(
  jsonString: string,
): SafeParseResult<VentriloMessage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VentriloMessage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VentriloMessage' from JSON`,
  );
}
