/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ModbusExceptionResponse = {
  exceptionFunction?: number | undefined;
  exceptionType?: number | undefined;
};

/** @internal */
export const ModbusExceptionResponse$inboundSchema: z.ZodType<
  ModbusExceptionResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  exception_function: z.number().int().optional(),
  exception_type: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "exception_function": "exceptionFunction",
    "exception_type": "exceptionType",
  });
});

/** @internal */
export type ModbusExceptionResponse$Outbound = {
  exception_function?: number | undefined;
  exception_type?: number | undefined;
};

/** @internal */
export const ModbusExceptionResponse$outboundSchema: z.ZodType<
  ModbusExceptionResponse$Outbound,
  z.ZodTypeDef,
  ModbusExceptionResponse
> = z.object({
  exceptionFunction: z.number().int().optional(),
  exceptionType: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    exceptionFunction: "exception_function",
    exceptionType: "exception_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ModbusExceptionResponse$ {
  /** @deprecated use `ModbusExceptionResponse$inboundSchema` instead. */
  export const inboundSchema = ModbusExceptionResponse$inboundSchema;
  /** @deprecated use `ModbusExceptionResponse$outboundSchema` instead. */
  export const outboundSchema = ModbusExceptionResponse$outboundSchema;
  /** @deprecated use `ModbusExceptionResponse$Outbound` instead. */
  export type Outbound = ModbusExceptionResponse$Outbound;
}

export function modbusExceptionResponseToJSON(
  modbusExceptionResponse: ModbusExceptionResponse,
): string {
  return JSON.stringify(
    ModbusExceptionResponse$outboundSchema.parse(modbusExceptionResponse),
  );
}

export function modbusExceptionResponseFromJSON(
  jsonString: string,
): SafeParseResult<ModbusExceptionResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ModbusExceptionResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ModbusExceptionResponse' from JSON`,
  );
}
