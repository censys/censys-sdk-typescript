/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const ChangeType = {
  Added: "added",
  Removed: "removed",
} as const;
export type ChangeType = ClosedEnum<typeof ChangeType>;

export type EventAssetChange = {
  changeType: ChangeType;
  eventTime: Date;
  reason: string;
};

/** @internal */
export const ChangeType$inboundSchema: z.ZodNativeEnum<typeof ChangeType> = z
  .nativeEnum(ChangeType);

/** @internal */
export const ChangeType$outboundSchema: z.ZodNativeEnum<typeof ChangeType> =
  ChangeType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChangeType$ {
  /** @deprecated use `ChangeType$inboundSchema` instead. */
  export const inboundSchema = ChangeType$inboundSchema;
  /** @deprecated use `ChangeType$outboundSchema` instead. */
  export const outboundSchema = ChangeType$outboundSchema;
}

/** @internal */
export const EventAssetChange$inboundSchema: z.ZodType<
  EventAssetChange,
  z.ZodTypeDef,
  unknown
> = z.object({
  change_type: ChangeType$inboundSchema,
  event_time: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  reason: z.string(),
}).transform((v) => {
  return remap$(v, {
    "change_type": "changeType",
    "event_time": "eventTime",
  });
});

/** @internal */
export type EventAssetChange$Outbound = {
  change_type: string;
  event_time: string;
  reason: string;
};

/** @internal */
export const EventAssetChange$outboundSchema: z.ZodType<
  EventAssetChange$Outbound,
  z.ZodTypeDef,
  EventAssetChange
> = z.object({
  changeType: ChangeType$outboundSchema,
  eventTime: z.date().transform(v => v.toISOString()),
  reason: z.string(),
}).transform((v) => {
  return remap$(v, {
    changeType: "change_type",
    eventTime: "event_time",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EventAssetChange$ {
  /** @deprecated use `EventAssetChange$inboundSchema` instead. */
  export const inboundSchema = EventAssetChange$inboundSchema;
  /** @deprecated use `EventAssetChange$outboundSchema` instead. */
  export const outboundSchema = EventAssetChange$outboundSchema;
  /** @deprecated use `EventAssetChange$Outbound` instead. */
  export type Outbound = EventAssetChange$Outbound;
}

export function eventAssetChangeToJSON(
  eventAssetChange: EventAssetChange,
): string {
  return JSON.stringify(
    EventAssetChange$outboundSchema.parse(eventAssetChange),
  );
}

export function eventAssetChangeFromJSON(
  jsonString: string,
): SafeParseResult<EventAssetChange, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EventAssetChange$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EventAssetChange' from JSON`,
  );
}
