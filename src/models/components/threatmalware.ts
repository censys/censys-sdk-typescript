/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ThreatMalware = {
  allNames?: Array<string> | null | undefined;
  id?: string | undefined;
  lastUpdatedAt?: string | undefined;
  malpediaId?: string | undefined;
  primaryName?: string | undefined;
};

/** @internal */
export const ThreatMalware$inboundSchema: z.ZodType<
  ThreatMalware,
  z.ZodTypeDef,
  unknown
> = z.object({
  all_names: z.nullable(z.array(z.string())).optional(),
  id: z.string().optional(),
  last_updated_at: z.string().optional(),
  malpedia_id: z.string().optional(),
  primary_name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "all_names": "allNames",
    "last_updated_at": "lastUpdatedAt",
    "malpedia_id": "malpediaId",
    "primary_name": "primaryName",
  });
});

/** @internal */
export type ThreatMalware$Outbound = {
  all_names?: Array<string> | null | undefined;
  id?: string | undefined;
  last_updated_at?: string | undefined;
  malpedia_id?: string | undefined;
  primary_name?: string | undefined;
};

/** @internal */
export const ThreatMalware$outboundSchema: z.ZodType<
  ThreatMalware$Outbound,
  z.ZodTypeDef,
  ThreatMalware
> = z.object({
  allNames: z.nullable(z.array(z.string())).optional(),
  id: z.string().optional(),
  lastUpdatedAt: z.string().optional(),
  malpediaId: z.string().optional(),
  primaryName: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    allNames: "all_names",
    lastUpdatedAt: "last_updated_at",
    malpediaId: "malpedia_id",
    primaryName: "primary_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ThreatMalware$ {
  /** @deprecated use `ThreatMalware$inboundSchema` instead. */
  export const inboundSchema = ThreatMalware$inboundSchema;
  /** @deprecated use `ThreatMalware$outboundSchema` instead. */
  export const outboundSchema = ThreatMalware$outboundSchema;
  /** @deprecated use `ThreatMalware$Outbound` instead. */
  export type Outbound = ThreatMalware$Outbound;
}

export function threatMalwareToJSON(threatMalware: ThreatMalware): string {
  return JSON.stringify(ThreatMalware$outboundSchema.parse(threatMalware));
}

export function threatMalwareFromJSON(
  jsonString: string,
): SafeParseResult<ThreatMalware, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ThreatMalware$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ThreatMalware' from JSON`,
  );
}
