/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  DistinguishedName,
  DistinguishedName$inboundSchema,
  DistinguishedName$Outbound,
  DistinguishedName$outboundSchema,
} from "./distinguishedname.js";
import {
  EdiPartyName,
  EdiPartyName$inboundSchema,
  EdiPartyName$Outbound,
  EdiPartyName$outboundSchema,
} from "./edipartyname.js";
import {
  GeneralSubtreeIp,
  GeneralSubtreeIp$inboundSchema,
  GeneralSubtreeIp$Outbound,
  GeneralSubtreeIp$outboundSchema,
} from "./generalsubtreeip.js";

export type NameConstraints = {
  critical?: boolean | undefined;
  /**
   * A record providing excluded names of the type directoryName in leaf certificates whose trust path includes this certificate.
   */
  excludedDirectoryNames?: Array<DistinguishedName> | null | undefined;
  /**
   * A record providing excluded names of the type ediPartyName in leaf certificates whose trust path includes this certificate.
   */
  excludedEdiPartyNames?: Array<EdiPartyName> | null | undefined;
  /**
   * A record providing a range of excluded names of the type rfc822Name in leaf certificates whose trust path includes this certificate.
   */
  excludedEmailAddresses?: Array<string> | null | undefined;
  /**
   * A record providing a range of excluded names of the type iPAddress in leaf certificates whose trust path includes this certificate.
   */
  excludedIpAddresses?: Array<GeneralSubtreeIp> | null | undefined;
  /**
   * A record providing a range of excluded names of the type dNSName in leaf certificates whose trust path includes this certificate.
   */
  excludedNames?: Array<string> | null | undefined;
  /**
   * A record providing excluded names of the type registeredID in leaf certificates whose trust path includes this certificate.
   */
  excludedRegisteredIds?: Array<string> | null | undefined;
  /**
   * A record providing a range of excluded uniform resource identifiers in leaf certificates whose trust path includes this certificate.
   */
  excludedUris?: Array<string> | null | undefined;
  /**
   * A record providing permitted names of the type directoryName in leaf certificates whose trust path includes this certificate.
   */
  permittedDirectoryNames?: Array<DistinguishedName> | null | undefined;
  /**
   * A record providing permitted names of the type ediPartyName in leaf certificates whose trust path includes this certificate.
   */
  permittedEdiPartyNames?: Array<EdiPartyName> | null | undefined;
  /**
   * A record providing a range of permitted names of the type rfc822Name in leaf certificates whose trust path includes this certificate.
   */
  permittedEmailAddresses?: Array<string> | null | undefined;
  /**
   * A record providing a range of permitted names of the type iPAddress in leaf certificates whose trust path includes this certificate.
   */
  permittedIpAddresses?: Array<GeneralSubtreeIp> | null | undefined;
  /**
   * A record providing a range of permitted names of the type dNSName in leaf certificates whose trust path includes this certificate.
   */
  permittedNames?: Array<string> | null | undefined;
  /**
   * A record providing permitted names of the type registeredID in leaf certificates whose trust path includes this certificate.
   */
  permittedRegisteredIds?: Array<string> | null | undefined;
  /**
   * A record providing a range of permitted uniform resource identifiers in leaf certificates whose trust path includes this certificate.
   */
  permittedUris?: Array<string> | null | undefined;
};

/** @internal */
export const NameConstraints$inboundSchema: z.ZodType<
  NameConstraints,
  z.ZodTypeDef,
  unknown
> = z.object({
  critical: z.boolean().optional(),
  excluded_directory_names: z.nullable(z.array(DistinguishedName$inboundSchema))
    .optional(),
  excluded_edi_party_names: z.nullable(z.array(EdiPartyName$inboundSchema))
    .optional(),
  excluded_email_addresses: z.nullable(z.array(z.string())).optional(),
  excluded_ip_addresses: z.nullable(z.array(GeneralSubtreeIp$inboundSchema))
    .optional(),
  excluded_names: z.nullable(z.array(z.string())).optional(),
  excluded_registered_ids: z.nullable(z.array(z.string())).optional(),
  excluded_uris: z.nullable(z.array(z.string())).optional(),
  permitted_directory_names: z.nullable(
    z.array(DistinguishedName$inboundSchema),
  ).optional(),
  permitted_edi_party_names: z.nullable(z.array(EdiPartyName$inboundSchema))
    .optional(),
  permitted_email_addresses: z.nullable(z.array(z.string())).optional(),
  permitted_ip_addresses: z.nullable(z.array(GeneralSubtreeIp$inboundSchema))
    .optional(),
  permitted_names: z.nullable(z.array(z.string())).optional(),
  permitted_registered_ids: z.nullable(z.array(z.string())).optional(),
  permitted_uris: z.nullable(z.array(z.string())).optional(),
}).transform((v) => {
  return remap$(v, {
    "excluded_directory_names": "excludedDirectoryNames",
    "excluded_edi_party_names": "excludedEdiPartyNames",
    "excluded_email_addresses": "excludedEmailAddresses",
    "excluded_ip_addresses": "excludedIpAddresses",
    "excluded_names": "excludedNames",
    "excluded_registered_ids": "excludedRegisteredIds",
    "excluded_uris": "excludedUris",
    "permitted_directory_names": "permittedDirectoryNames",
    "permitted_edi_party_names": "permittedEdiPartyNames",
    "permitted_email_addresses": "permittedEmailAddresses",
    "permitted_ip_addresses": "permittedIpAddresses",
    "permitted_names": "permittedNames",
    "permitted_registered_ids": "permittedRegisteredIds",
    "permitted_uris": "permittedUris",
  });
});

/** @internal */
export type NameConstraints$Outbound = {
  critical?: boolean | undefined;
  excluded_directory_names?:
    | Array<DistinguishedName$Outbound>
    | null
    | undefined;
  excluded_edi_party_names?: Array<EdiPartyName$Outbound> | null | undefined;
  excluded_email_addresses?: Array<string> | null | undefined;
  excluded_ip_addresses?: Array<GeneralSubtreeIp$Outbound> | null | undefined;
  excluded_names?: Array<string> | null | undefined;
  excluded_registered_ids?: Array<string> | null | undefined;
  excluded_uris?: Array<string> | null | undefined;
  permitted_directory_names?:
    | Array<DistinguishedName$Outbound>
    | null
    | undefined;
  permitted_edi_party_names?: Array<EdiPartyName$Outbound> | null | undefined;
  permitted_email_addresses?: Array<string> | null | undefined;
  permitted_ip_addresses?: Array<GeneralSubtreeIp$Outbound> | null | undefined;
  permitted_names?: Array<string> | null | undefined;
  permitted_registered_ids?: Array<string> | null | undefined;
  permitted_uris?: Array<string> | null | undefined;
};

/** @internal */
export const NameConstraints$outboundSchema: z.ZodType<
  NameConstraints$Outbound,
  z.ZodTypeDef,
  NameConstraints
> = z.object({
  critical: z.boolean().optional(),
  excludedDirectoryNames: z.nullable(z.array(DistinguishedName$outboundSchema))
    .optional(),
  excludedEdiPartyNames: z.nullable(z.array(EdiPartyName$outboundSchema))
    .optional(),
  excludedEmailAddresses: z.nullable(z.array(z.string())).optional(),
  excludedIpAddresses: z.nullable(z.array(GeneralSubtreeIp$outboundSchema))
    .optional(),
  excludedNames: z.nullable(z.array(z.string())).optional(),
  excludedRegisteredIds: z.nullable(z.array(z.string())).optional(),
  excludedUris: z.nullable(z.array(z.string())).optional(),
  permittedDirectoryNames: z.nullable(z.array(DistinguishedName$outboundSchema))
    .optional(),
  permittedEdiPartyNames: z.nullable(z.array(EdiPartyName$outboundSchema))
    .optional(),
  permittedEmailAddresses: z.nullable(z.array(z.string())).optional(),
  permittedIpAddresses: z.nullable(z.array(GeneralSubtreeIp$outboundSchema))
    .optional(),
  permittedNames: z.nullable(z.array(z.string())).optional(),
  permittedRegisteredIds: z.nullable(z.array(z.string())).optional(),
  permittedUris: z.nullable(z.array(z.string())).optional(),
}).transform((v) => {
  return remap$(v, {
    excludedDirectoryNames: "excluded_directory_names",
    excludedEdiPartyNames: "excluded_edi_party_names",
    excludedEmailAddresses: "excluded_email_addresses",
    excludedIpAddresses: "excluded_ip_addresses",
    excludedNames: "excluded_names",
    excludedRegisteredIds: "excluded_registered_ids",
    excludedUris: "excluded_uris",
    permittedDirectoryNames: "permitted_directory_names",
    permittedEdiPartyNames: "permitted_edi_party_names",
    permittedEmailAddresses: "permitted_email_addresses",
    permittedIpAddresses: "permitted_ip_addresses",
    permittedNames: "permitted_names",
    permittedRegisteredIds: "permitted_registered_ids",
    permittedUris: "permitted_uris",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NameConstraints$ {
  /** @deprecated use `NameConstraints$inboundSchema` instead. */
  export const inboundSchema = NameConstraints$inboundSchema;
  /** @deprecated use `NameConstraints$outboundSchema` instead. */
  export const outboundSchema = NameConstraints$outboundSchema;
  /** @deprecated use `NameConstraints$Outbound` instead. */
  export type Outbound = NameConstraints$Outbound;
}

export function nameConstraintsToJSON(
  nameConstraints: NameConstraints,
): string {
  return JSON.stringify(NameConstraints$outboundSchema.parse(nameConstraints));
}

export function nameConstraintsFromJSON(
  jsonString: string,
): SafeParseResult<NameConstraints, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NameConstraints$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NameConstraints' from JSON`,
  );
}
