/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  CryptSetup,
  CryptSetup$inboundSchema,
  CryptSetup$Outbound,
  CryptSetup$outboundSchema,
} from "./cryptsetup.js";
import {
  MurmurMessage,
  MurmurMessage$inboundSchema,
  MurmurMessage$Outbound,
  MurmurMessage$outboundSchema,
} from "./murmurmessage.js";
import {
  MurmurMurmurVersion,
  MurmurMurmurVersion$inboundSchema,
  MurmurMurmurVersion$Outbound,
  MurmurMurmurVersion$outboundSchema,
} from "./murmurmurmurversion.js";
import {
  Reject,
  Reject$inboundSchema,
  Reject$Outbound,
  Reject$outboundSchema,
} from "./reject.js";
import {
  ServerConfig,
  ServerConfig$inboundSchema,
  ServerConfig$Outbound,
  ServerConfig$outboundSchema,
} from "./serverconfig.js";
import {
  ServerSync,
  ServerSync$inboundSchema,
  ServerSync$Outbound,
  ServerSync$outboundSchema,
} from "./serversync.js";
import {
  TextMessage,
  TextMessage$inboundSchema,
  TextMessage$Outbound,
  TextMessage$outboundSchema,
} from "./textmessage.js";

export type Murmur = {
  cryptSetup?: CryptSetup | undefined;
  murmurMessages?: Array<MurmurMessage> | null | undefined;
  reject?: Reject | undefined;
  serverConfig?: ServerConfig | undefined;
  serverSync?: ServerSync | undefined;
  textMessages?: Array<TextMessage> | null | undefined;
  version?: MurmurMurmurVersion | undefined;
};

/** @internal */
export const Murmur$inboundSchema: z.ZodType<Murmur, z.ZodTypeDef, unknown> = z
  .object({
    crypt_setup: CryptSetup$inboundSchema.optional(),
    murmur_messages: z.nullable(z.array(MurmurMessage$inboundSchema))
      .optional(),
    reject: Reject$inboundSchema.optional(),
    server_config: ServerConfig$inboundSchema.optional(),
    server_sync: ServerSync$inboundSchema.optional(),
    text_messages: z.nullable(z.array(TextMessage$inboundSchema)).optional(),
    version: MurmurMurmurVersion$inboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      "crypt_setup": "cryptSetup",
      "murmur_messages": "murmurMessages",
      "server_config": "serverConfig",
      "server_sync": "serverSync",
      "text_messages": "textMessages",
    });
  });

/** @internal */
export type Murmur$Outbound = {
  crypt_setup?: CryptSetup$Outbound | undefined;
  murmur_messages?: Array<MurmurMessage$Outbound> | null | undefined;
  reject?: Reject$Outbound | undefined;
  server_config?: ServerConfig$Outbound | undefined;
  server_sync?: ServerSync$Outbound | undefined;
  text_messages?: Array<TextMessage$Outbound> | null | undefined;
  version?: MurmurMurmurVersion$Outbound | undefined;
};

/** @internal */
export const Murmur$outboundSchema: z.ZodType<
  Murmur$Outbound,
  z.ZodTypeDef,
  Murmur
> = z.object({
  cryptSetup: CryptSetup$outboundSchema.optional(),
  murmurMessages: z.nullable(z.array(MurmurMessage$outboundSchema)).optional(),
  reject: Reject$outboundSchema.optional(),
  serverConfig: ServerConfig$outboundSchema.optional(),
  serverSync: ServerSync$outboundSchema.optional(),
  textMessages: z.nullable(z.array(TextMessage$outboundSchema)).optional(),
  version: MurmurMurmurVersion$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    cryptSetup: "crypt_setup",
    murmurMessages: "murmur_messages",
    serverConfig: "server_config",
    serverSync: "server_sync",
    textMessages: "text_messages",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Murmur$ {
  /** @deprecated use `Murmur$inboundSchema` instead. */
  export const inboundSchema = Murmur$inboundSchema;
  /** @deprecated use `Murmur$outboundSchema` instead. */
  export const outboundSchema = Murmur$outboundSchema;
  /** @deprecated use `Murmur$Outbound` instead. */
  export type Outbound = Murmur$Outbound;
}

export function murmurToJSON(murmur: Murmur): string {
  return JSON.stringify(Murmur$outboundSchema.parse(murmur));
}

export function murmurFromJSON(
  jsonString: string,
): SafeParseResult<Murmur, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Murmur$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Murmur' from JSON`,
  );
}
