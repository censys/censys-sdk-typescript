/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Activemq = {
  cacheEnabled?: boolean | undefined;
  cacheSize?: number | undefined;
  maxFrameSize?: number | undefined;
  maxInactivityDuration?: number | undefined;
  maxInactivityDurationInitialDelay?: number | undefined;
  platformDetails?: string | undefined;
  providerName?: string | undefined;
  providerVersion?: string | undefined;
  sizePrefixDisabled?: boolean | undefined;
  stackTraceEnabled?: boolean | undefined;
  tcpNoDelayEnabled?: boolean | undefined;
  tightEncodingEnabled?: boolean | undefined;
};

/** @internal */
export const Activemq$inboundSchema: z.ZodType<
  Activemq,
  z.ZodTypeDef,
  unknown
> = z.object({
  cache_enabled: z.boolean().optional(),
  cache_size: z.number().int().optional(),
  max_frame_size: z.number().int().optional(),
  max_inactivity_duration: z.number().int().optional(),
  max_inactivity_duration_initial_delay: z.number().int().optional(),
  platform_details: z.string().optional(),
  provider_name: z.string().optional(),
  provider_version: z.string().optional(),
  size_prefix_disabled: z.boolean().optional(),
  stack_trace_enabled: z.boolean().optional(),
  tcp_no_delay_enabled: z.boolean().optional(),
  tight_encoding_enabled: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    "cache_enabled": "cacheEnabled",
    "cache_size": "cacheSize",
    "max_frame_size": "maxFrameSize",
    "max_inactivity_duration": "maxInactivityDuration",
    "max_inactivity_duration_initial_delay":
      "maxInactivityDurationInitialDelay",
    "platform_details": "platformDetails",
    "provider_name": "providerName",
    "provider_version": "providerVersion",
    "size_prefix_disabled": "sizePrefixDisabled",
    "stack_trace_enabled": "stackTraceEnabled",
    "tcp_no_delay_enabled": "tcpNoDelayEnabled",
    "tight_encoding_enabled": "tightEncodingEnabled",
  });
});

/** @internal */
export type Activemq$Outbound = {
  cache_enabled?: boolean | undefined;
  cache_size?: number | undefined;
  max_frame_size?: number | undefined;
  max_inactivity_duration?: number | undefined;
  max_inactivity_duration_initial_delay?: number | undefined;
  platform_details?: string | undefined;
  provider_name?: string | undefined;
  provider_version?: string | undefined;
  size_prefix_disabled?: boolean | undefined;
  stack_trace_enabled?: boolean | undefined;
  tcp_no_delay_enabled?: boolean | undefined;
  tight_encoding_enabled?: boolean | undefined;
};

/** @internal */
export const Activemq$outboundSchema: z.ZodType<
  Activemq$Outbound,
  z.ZodTypeDef,
  Activemq
> = z.object({
  cacheEnabled: z.boolean().optional(),
  cacheSize: z.number().int().optional(),
  maxFrameSize: z.number().int().optional(),
  maxInactivityDuration: z.number().int().optional(),
  maxInactivityDurationInitialDelay: z.number().int().optional(),
  platformDetails: z.string().optional(),
  providerName: z.string().optional(),
  providerVersion: z.string().optional(),
  sizePrefixDisabled: z.boolean().optional(),
  stackTraceEnabled: z.boolean().optional(),
  tcpNoDelayEnabled: z.boolean().optional(),
  tightEncodingEnabled: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    cacheEnabled: "cache_enabled",
    cacheSize: "cache_size",
    maxFrameSize: "max_frame_size",
    maxInactivityDuration: "max_inactivity_duration",
    maxInactivityDurationInitialDelay: "max_inactivity_duration_initial_delay",
    platformDetails: "platform_details",
    providerName: "provider_name",
    providerVersion: "provider_version",
    sizePrefixDisabled: "size_prefix_disabled",
    stackTraceEnabled: "stack_trace_enabled",
    tcpNoDelayEnabled: "tcp_no_delay_enabled",
    tightEncodingEnabled: "tight_encoding_enabled",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Activemq$ {
  /** @deprecated use `Activemq$inboundSchema` instead. */
  export const inboundSchema = Activemq$inboundSchema;
  /** @deprecated use `Activemq$outboundSchema` instead. */
  export const outboundSchema = Activemq$outboundSchema;
  /** @deprecated use `Activemq$Outbound` instead. */
  export type Outbound = Activemq$Outbound;
}

export function activemqToJSON(activemq: Activemq): string {
  return JSON.stringify(Activemq$outboundSchema.parse(activemq));
}

export function activemqFromJSON(
  jsonString: string,
): SafeParseResult<Activemq, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Activemq$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Activemq' from JSON`,
  );
}
