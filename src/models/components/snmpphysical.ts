/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SnmpPhysical = {
  /**
   * 1.3.6.1.2.1.47.1.1.1.1.9 - Firmware revision string
   */
  firmwareRev?: string | undefined;
  /**
   * 1.3.6.1.2.1.47.1.1.1.1.8 - Hardware revision string
   */
  hardwareRev?: string | undefined;
  /**
   * 1.3.6.1.2.1.47.1.1.1.1.12 - Name of mfg
   */
  mfgName?: string | undefined;
  /**
   * 1.3.6.1.2.1.47.1.1.1.1.13 - Model name of component
   */
  modelName?: string | undefined;
  /**
   * 1.3.6.1.2.1.47.1.1.1.1.7 - Entity name
   */
  name?: string | undefined;
  /**
   * 1.3.6.1.2.1.47.1.1.1.1.11 - Serial number string
   */
  serialNum?: string | undefined;
  /**
   * 1.3.6.1.2.1.47.1.1.1.1.10 - Software revision string
   */
  softwareRev?: string | undefined;
};

/** @internal */
export const SnmpPhysical$inboundSchema: z.ZodType<
  SnmpPhysical,
  z.ZodTypeDef,
  unknown
> = z.object({
  firmware_rev: z.string().optional(),
  hardware_rev: z.string().optional(),
  mfg_name: z.string().optional(),
  model_name: z.string().optional(),
  name: z.string().optional(),
  serial_num: z.string().optional(),
  software_rev: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "firmware_rev": "firmwareRev",
    "hardware_rev": "hardwareRev",
    "mfg_name": "mfgName",
    "model_name": "modelName",
    "serial_num": "serialNum",
    "software_rev": "softwareRev",
  });
});

/** @internal */
export type SnmpPhysical$Outbound = {
  firmware_rev?: string | undefined;
  hardware_rev?: string | undefined;
  mfg_name?: string | undefined;
  model_name?: string | undefined;
  name?: string | undefined;
  serial_num?: string | undefined;
  software_rev?: string | undefined;
};

/** @internal */
export const SnmpPhysical$outboundSchema: z.ZodType<
  SnmpPhysical$Outbound,
  z.ZodTypeDef,
  SnmpPhysical
> = z.object({
  firmwareRev: z.string().optional(),
  hardwareRev: z.string().optional(),
  mfgName: z.string().optional(),
  modelName: z.string().optional(),
  name: z.string().optional(),
  serialNum: z.string().optional(),
  softwareRev: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    firmwareRev: "firmware_rev",
    hardwareRev: "hardware_rev",
    mfgName: "mfg_name",
    modelName: "model_name",
    serialNum: "serial_num",
    softwareRev: "software_rev",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SnmpPhysical$ {
  /** @deprecated use `SnmpPhysical$inboundSchema` instead. */
  export const inboundSchema = SnmpPhysical$inboundSchema;
  /** @deprecated use `SnmpPhysical$outboundSchema` instead. */
  export const outboundSchema = SnmpPhysical$outboundSchema;
  /** @deprecated use `SnmpPhysical$Outbound` instead. */
  export type Outbound = SnmpPhysical$Outbound;
}

export function snmpPhysicalToJSON(snmpPhysical: SnmpPhysical): string {
  return JSON.stringify(SnmpPhysical$outboundSchema.parse(snmpPhysical));
}

export function snmpPhysicalFromJSON(
  jsonString: string,
): SafeParseResult<SnmpPhysical, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SnmpPhysical$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SnmpPhysical' from JSON`,
  );
}
