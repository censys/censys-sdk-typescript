/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type OpcUaUserTokenPolicy = {
  issuedTokenType?: string | undefined;
  issuerEndpointUrl?: string | undefined;
  policyId?: string | undefined;
  securityPolicyUri?: string | undefined;
  tokenType?: number | undefined;
};

/** @internal */
export const OpcUaUserTokenPolicy$inboundSchema: z.ZodType<
  OpcUaUserTokenPolicy,
  z.ZodTypeDef,
  unknown
> = z.object({
  issued_token_type: z.string().optional(),
  issuer_endpoint_url: z.string().optional(),
  policy_id: z.string().optional(),
  security_policy_uri: z.string().optional(),
  token_type: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "issued_token_type": "issuedTokenType",
    "issuer_endpoint_url": "issuerEndpointUrl",
    "policy_id": "policyId",
    "security_policy_uri": "securityPolicyUri",
    "token_type": "tokenType",
  });
});

/** @internal */
export type OpcUaUserTokenPolicy$Outbound = {
  issued_token_type?: string | undefined;
  issuer_endpoint_url?: string | undefined;
  policy_id?: string | undefined;
  security_policy_uri?: string | undefined;
  token_type?: number | undefined;
};

/** @internal */
export const OpcUaUserTokenPolicy$outboundSchema: z.ZodType<
  OpcUaUserTokenPolicy$Outbound,
  z.ZodTypeDef,
  OpcUaUserTokenPolicy
> = z.object({
  issuedTokenType: z.string().optional(),
  issuerEndpointUrl: z.string().optional(),
  policyId: z.string().optional(),
  securityPolicyUri: z.string().optional(),
  tokenType: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    issuedTokenType: "issued_token_type",
    issuerEndpointUrl: "issuer_endpoint_url",
    policyId: "policy_id",
    securityPolicyUri: "security_policy_uri",
    tokenType: "token_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpcUaUserTokenPolicy$ {
  /** @deprecated use `OpcUaUserTokenPolicy$inboundSchema` instead. */
  export const inboundSchema = OpcUaUserTokenPolicy$inboundSchema;
  /** @deprecated use `OpcUaUserTokenPolicy$outboundSchema` instead. */
  export const outboundSchema = OpcUaUserTokenPolicy$outboundSchema;
  /** @deprecated use `OpcUaUserTokenPolicy$Outbound` instead. */
  export type Outbound = OpcUaUserTokenPolicy$Outbound;
}

export function opcUaUserTokenPolicyToJSON(
  opcUaUserTokenPolicy: OpcUaUserTokenPolicy,
): string {
  return JSON.stringify(
    OpcUaUserTokenPolicy$outboundSchema.parse(opcUaUserTokenPolicy),
  );
}

export function opcUaUserTokenPolicyFromJSON(
  jsonString: string,
): SafeParseResult<OpcUaUserTokenPolicy, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpcUaUserTokenPolicy$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpcUaUserTokenPolicy' from JSON`,
  );
}
