/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SnmpSystemServices = {
  /**
   * Physical (e.g. repeaters)
   */
  layer1?: boolean | undefined;
  /**
   * Datalink/subnetwork (e.g. bridges)
   */
  layer2?: boolean | undefined;
  /**
   * Internet (e.g. IP gateways)
   */
  layer3?: boolean | undefined;
  /**
   * End-to-end (e.g. IP hosts)
   */
  layer4?: boolean | undefined;
  /**
   * OSI layer 5
   */
  layer5?: boolean | undefined;
  /**
   * OSI layer 6
   */
  layer6?: boolean | undefined;
  /**
   * Applications (e.g. mail relays)
   */
  layer7?: boolean | undefined;
};

/** @internal */
export const SnmpSystemServices$inboundSchema: z.ZodType<
  SnmpSystemServices,
  z.ZodTypeDef,
  unknown
> = z.object({
  layer_1: z.boolean().optional(),
  layer_2: z.boolean().optional(),
  layer_3: z.boolean().optional(),
  layer_4: z.boolean().optional(),
  layer_5: z.boolean().optional(),
  layer_6: z.boolean().optional(),
  layer_7: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    "layer_1": "layer1",
    "layer_2": "layer2",
    "layer_3": "layer3",
    "layer_4": "layer4",
    "layer_5": "layer5",
    "layer_6": "layer6",
    "layer_7": "layer7",
  });
});

/** @internal */
export type SnmpSystemServices$Outbound = {
  layer_1?: boolean | undefined;
  layer_2?: boolean | undefined;
  layer_3?: boolean | undefined;
  layer_4?: boolean | undefined;
  layer_5?: boolean | undefined;
  layer_6?: boolean | undefined;
  layer_7?: boolean | undefined;
};

/** @internal */
export const SnmpSystemServices$outboundSchema: z.ZodType<
  SnmpSystemServices$Outbound,
  z.ZodTypeDef,
  SnmpSystemServices
> = z.object({
  layer1: z.boolean().optional(),
  layer2: z.boolean().optional(),
  layer3: z.boolean().optional(),
  layer4: z.boolean().optional(),
  layer5: z.boolean().optional(),
  layer6: z.boolean().optional(),
  layer7: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    layer1: "layer_1",
    layer2: "layer_2",
    layer3: "layer_3",
    layer4: "layer_4",
    layer5: "layer_5",
    layer6: "layer_6",
    layer7: "layer_7",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SnmpSystemServices$ {
  /** @deprecated use `SnmpSystemServices$inboundSchema` instead. */
  export const inboundSchema = SnmpSystemServices$inboundSchema;
  /** @deprecated use `SnmpSystemServices$outboundSchema` instead. */
  export const outboundSchema = SnmpSystemServices$outboundSchema;
  /** @deprecated use `SnmpSystemServices$Outbound` instead. */
  export type Outbound = SnmpSystemServices$Outbound;
}

export function snmpSystemServicesToJSON(
  snmpSystemServices: SnmpSystemServices,
): string {
  return JSON.stringify(
    SnmpSystemServices$outboundSchema.parse(snmpSystemServices),
  );
}

export function snmpSystemServicesFromJSON(
  jsonString: string,
): SafeParseResult<SnmpSystemServices, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SnmpSystemServices$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SnmpSystemServices' from JSON`,
  );
}
