/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PlexMediaServer = {
  version?: string | undefined;
};

/** @internal */
export const PlexMediaServer$inboundSchema: z.ZodType<
  PlexMediaServer,
  z.ZodTypeDef,
  unknown
> = z.object({
  version: z.string().optional(),
});

/** @internal */
export type PlexMediaServer$Outbound = {
  version?: string | undefined;
};

/** @internal */
export const PlexMediaServer$outboundSchema: z.ZodType<
  PlexMediaServer$Outbound,
  z.ZodTypeDef,
  PlexMediaServer
> = z.object({
  version: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PlexMediaServer$ {
  /** @deprecated use `PlexMediaServer$inboundSchema` instead. */
  export const inboundSchema = PlexMediaServer$inboundSchema;
  /** @deprecated use `PlexMediaServer$outboundSchema` instead. */
  export const outboundSchema = PlexMediaServer$outboundSchema;
  /** @deprecated use `PlexMediaServer$Outbound` instead. */
  export type Outbound = PlexMediaServer$Outbound;
}

export function plexMediaServerToJSON(
  plexMediaServer: PlexMediaServer,
): string {
  return JSON.stringify(PlexMediaServer$outboundSchema.parse(plexMediaServer));
}

export function plexMediaServerFromJSON(
  jsonString: string,
): SafeParseResult<PlexMediaServer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PlexMediaServer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PlexMediaServer' from JSON`,
  );
}
