/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  HostTimelineEventAsset,
  HostTimelineEventAsset$inboundSchema,
  HostTimelineEventAsset$Outbound,
  HostTimelineEventAsset$outboundSchema,
} from "./hosttimelineeventasset.js";

export type HostTimeline = {
  events: Array<HostTimelineEventAsset> | null;
  scannedTo: Date;
};

/** @internal */
export const HostTimeline$inboundSchema: z.ZodType<
  HostTimeline,
  z.ZodTypeDef,
  unknown
> = z.object({
  events: z.nullable(z.array(HostTimelineEventAsset$inboundSchema)),
  scanned_to: z.string().datetime({ offset: true }).transform(v => new Date(v)),
}).transform((v) => {
  return remap$(v, {
    "scanned_to": "scannedTo",
  });
});

/** @internal */
export type HostTimeline$Outbound = {
  events: Array<HostTimelineEventAsset$Outbound> | null;
  scanned_to: string;
};

/** @internal */
export const HostTimeline$outboundSchema: z.ZodType<
  HostTimeline$Outbound,
  z.ZodTypeDef,
  HostTimeline
> = z.object({
  events: z.nullable(z.array(HostTimelineEventAsset$outboundSchema)),
  scannedTo: z.date().transform(v => v.toISOString()),
}).transform((v) => {
  return remap$(v, {
    scannedTo: "scanned_to",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HostTimeline$ {
  /** @deprecated use `HostTimeline$inboundSchema` instead. */
  export const inboundSchema = HostTimeline$inboundSchema;
  /** @deprecated use `HostTimeline$outboundSchema` instead. */
  export const outboundSchema = HostTimeline$outboundSchema;
  /** @deprecated use `HostTimeline$Outbound` instead. */
  export type Outbound = HostTimeline$Outbound;
}

export function hostTimelineToJSON(hostTimeline: HostTimeline): string {
  return JSON.stringify(HostTimeline$outboundSchema.parse(hostTimeline));
}

export function hostTimelineFromJSON(
  jsonString: string,
): SafeParseResult<HostTimeline, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HostTimeline$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HostTimeline' from JSON`,
  );
}
