/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type NoticeReference = {
  noticeNumbers?: Array<number> | null | undefined;
  organization?: string | undefined;
};

/** @internal */
export const NoticeReference$inboundSchema: z.ZodType<
  NoticeReference,
  z.ZodTypeDef,
  unknown
> = z.object({
  notice_numbers: z.nullable(z.array(z.number().int())).optional(),
  organization: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "notice_numbers": "noticeNumbers",
  });
});

/** @internal */
export type NoticeReference$Outbound = {
  notice_numbers?: Array<number> | null | undefined;
  organization?: string | undefined;
};

/** @internal */
export const NoticeReference$outboundSchema: z.ZodType<
  NoticeReference$Outbound,
  z.ZodTypeDef,
  NoticeReference
> = z.object({
  noticeNumbers: z.nullable(z.array(z.number().int())).optional(),
  organization: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    noticeNumbers: "notice_numbers",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NoticeReference$ {
  /** @deprecated use `NoticeReference$inboundSchema` instead. */
  export const inboundSchema = NoticeReference$inboundSchema;
  /** @deprecated use `NoticeReference$outboundSchema` instead. */
  export const outboundSchema = NoticeReference$outboundSchema;
  /** @deprecated use `NoticeReference$Outbound` instead. */
  export type Outbound = NoticeReference$Outbound;
}

export function noticeReferenceToJSON(
  noticeReference: NoticeReference,
): string {
  return JSON.stringify(NoticeReference$outboundSchema.parse(noticeReference));
}

export function noticeReferenceFromJSON(
  jsonString: string,
): SafeParseResult<NoticeReference, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NoticeReference$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NoticeReference' from JSON`,
  );
}
