/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  KeyAlgorithm,
  KeyAlgorithm$inboundSchema,
  KeyAlgorithm$Outbound,
  KeyAlgorithm$outboundSchema,
} from "./keyalgorithm.js";

export type Signature = {
  /**
   * Whether the certificate was signed by its own key.
   */
  selfSigned?: boolean | undefined;
  signatureAlgorithm?: KeyAlgorithm | undefined;
  /**
   * Whether the signature is valid.
   */
  valid?: boolean | undefined;
  /**
   * Contents of the signature.
   */
  value?: string | undefined;
};

/** @internal */
export const Signature$inboundSchema: z.ZodType<
  Signature,
  z.ZodTypeDef,
  unknown
> = z.object({
  self_signed: z.boolean().optional(),
  signature_algorithm: KeyAlgorithm$inboundSchema.optional(),
  valid: z.boolean().optional(),
  value: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "self_signed": "selfSigned",
    "signature_algorithm": "signatureAlgorithm",
  });
});

/** @internal */
export type Signature$Outbound = {
  self_signed?: boolean | undefined;
  signature_algorithm?: KeyAlgorithm$Outbound | undefined;
  valid?: boolean | undefined;
  value?: string | undefined;
};

/** @internal */
export const Signature$outboundSchema: z.ZodType<
  Signature$Outbound,
  z.ZodTypeDef,
  Signature
> = z.object({
  selfSigned: z.boolean().optional(),
  signatureAlgorithm: KeyAlgorithm$outboundSchema.optional(),
  valid: z.boolean().optional(),
  value: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    selfSigned: "self_signed",
    signatureAlgorithm: "signature_algorithm",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Signature$ {
  /** @deprecated use `Signature$inboundSchema` instead. */
  export const inboundSchema = Signature$inboundSchema;
  /** @deprecated use `Signature$outboundSchema` instead. */
  export const outboundSchema = Signature$outboundSchema;
  /** @deprecated use `Signature$Outbound` instead. */
  export type Outbound = Signature$Outbound;
}

export function signatureToJSON(signature: Signature): string {
  return JSON.stringify(Signature$outboundSchema.parse(signature));
}

export function signatureFromJSON(
  jsonString: string,
): SafeParseResult<Signature, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Signature$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Signature' from JSON`,
  );
}
