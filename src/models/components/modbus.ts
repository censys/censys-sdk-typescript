/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ModbusExceptionResponse,
  ModbusExceptionResponse$inboundSchema,
  ModbusExceptionResponse$Outbound,
  ModbusExceptionResponse$outboundSchema,
} from "./modbusexceptionresponse.js";
import {
  ModbusMEIResponse,
  ModbusMEIResponse$inboundSchema,
  ModbusMEIResponse$Outbound,
  ModbusMEIResponse$outboundSchema,
} from "./modbusmeiresponse.js";

export type Modbus = {
  exceptionResponse?: ModbusExceptionResponse | undefined;
  function?: number | undefined;
  meiResponse?: ModbusMEIResponse | undefined;
  unitId?: number | undefined;
};

/** @internal */
export const Modbus$inboundSchema: z.ZodType<Modbus, z.ZodTypeDef, unknown> = z
  .object({
    exception_response: ModbusExceptionResponse$inboundSchema.optional(),
    function: z.number().int().optional(),
    mei_response: ModbusMEIResponse$inboundSchema.optional(),
    unit_id: z.number().int().optional(),
  }).transform((v) => {
    return remap$(v, {
      "exception_response": "exceptionResponse",
      "mei_response": "meiResponse",
      "unit_id": "unitId",
    });
  });

/** @internal */
export type Modbus$Outbound = {
  exception_response?: ModbusExceptionResponse$Outbound | undefined;
  function?: number | undefined;
  mei_response?: ModbusMEIResponse$Outbound | undefined;
  unit_id?: number | undefined;
};

/** @internal */
export const Modbus$outboundSchema: z.ZodType<
  Modbus$Outbound,
  z.ZodTypeDef,
  Modbus
> = z.object({
  exceptionResponse: ModbusExceptionResponse$outboundSchema.optional(),
  function: z.number().int().optional(),
  meiResponse: ModbusMEIResponse$outboundSchema.optional(),
  unitId: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    exceptionResponse: "exception_response",
    meiResponse: "mei_response",
    unitId: "unit_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Modbus$ {
  /** @deprecated use `Modbus$inboundSchema` instead. */
  export const inboundSchema = Modbus$inboundSchema;
  /** @deprecated use `Modbus$outboundSchema` instead. */
  export const outboundSchema = Modbus$outboundSchema;
  /** @deprecated use `Modbus$Outbound` instead. */
  export type Outbound = Modbus$Outbound;
}

export function modbusToJSON(modbus: Modbus): string {
  return JSON.stringify(Modbus$outboundSchema.parse(modbus));
}

export function modbusFromJSON(
  jsonString: string,
): SafeParseResult<Modbus, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Modbus$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Modbus' from JSON`,
  );
}
