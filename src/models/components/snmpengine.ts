/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SnmpEngine = {
  description?: string | undefined;
  engineBoots?: number | undefined;
  engineTime?: number | undefined;
  format?: string | undefined;
  formatData?: string | undefined;
  organization?: string | undefined;
  pen?: number | undefined;
  rawId?: string | undefined;
  rfc3411?: boolean | undefined;
};

/** @internal */
export const SnmpEngine$inboundSchema: z.ZodType<
  SnmpEngine,
  z.ZodTypeDef,
  unknown
> = z.object({
  description: z.string().optional(),
  engine_boots: z.number().int().optional(),
  engine_time: z.number().int().optional(),
  format: z.string().optional(),
  format_data: z.string().optional(),
  organization: z.string().optional(),
  pen: z.number().int().optional(),
  raw_id: z.string().optional(),
  rfc3411: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    "engine_boots": "engineBoots",
    "engine_time": "engineTime",
    "format_data": "formatData",
    "raw_id": "rawId",
  });
});

/** @internal */
export type SnmpEngine$Outbound = {
  description?: string | undefined;
  engine_boots?: number | undefined;
  engine_time?: number | undefined;
  format?: string | undefined;
  format_data?: string | undefined;
  organization?: string | undefined;
  pen?: number | undefined;
  raw_id?: string | undefined;
  rfc3411?: boolean | undefined;
};

/** @internal */
export const SnmpEngine$outboundSchema: z.ZodType<
  SnmpEngine$Outbound,
  z.ZodTypeDef,
  SnmpEngine
> = z.object({
  description: z.string().optional(),
  engineBoots: z.number().int().optional(),
  engineTime: z.number().int().optional(),
  format: z.string().optional(),
  formatData: z.string().optional(),
  organization: z.string().optional(),
  pen: z.number().int().optional(),
  rawId: z.string().optional(),
  rfc3411: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    engineBoots: "engine_boots",
    engineTime: "engine_time",
    formatData: "format_data",
    rawId: "raw_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SnmpEngine$ {
  /** @deprecated use `SnmpEngine$inboundSchema` instead. */
  export const inboundSchema = SnmpEngine$inboundSchema;
  /** @deprecated use `SnmpEngine$outboundSchema` instead. */
  export const outboundSchema = SnmpEngine$outboundSchema;
  /** @deprecated use `SnmpEngine$Outbound` instead. */
  export type Outbound = SnmpEngine$Outbound;
}

export function snmpEngineToJSON(snmpEngine: SnmpEngine): string {
  return JSON.stringify(SnmpEngine$outboundSchema.parse(snmpEngine));
}

export function snmpEngineFromJSON(
  jsonString: string,
): SafeParseResult<SnmpEngine, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SnmpEngine$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SnmpEngine' from JSON`,
  );
}
