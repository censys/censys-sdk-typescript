/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  HttpFavicon,
  HttpFavicon$inboundSchema,
  HttpFavicon$Outbound,
  HttpFavicon$outboundSchema,
} from "./httpfavicon.js";
import {
  HttpRepeatedHeaders,
  HttpRepeatedHeaders$inboundSchema,
  HttpRepeatedHeaders$Outbound,
  HttpRepeatedHeaders$outboundSchema,
} from "./httprepeatedheaders.js";

export type Http = {
  /**
   * The body of the HTTP response. For hosts without a name, the first 64KB are available. For hosts with a name, only 6KB are available.
   */
  body?: string | undefined;
  bodyHashSha1?: string | undefined;
  bodyHashSha256?: string | undefined;
  bodyHashTlsh?: string | undefined;
  /**
   * The length, in bytes, of services.http.response.body; at most, 64KB.
   */
  bodySize?: number | undefined;
  favicons?: Array<HttpFavicon> | null | undefined;
  /**
   * The key-value header pairs included in the response.
   */
  headers?: { [k: string]: HttpRepeatedHeaders } | undefined;
  /**
   * A list of the <title> and <meta> tags from services.http.response.body.
   */
  htmlTags?: Array<string> | null | undefined;
  /**
   * The title of the HTML page: the inner contents of the <title> tag in the response body, if present.
   */
  htmlTitle?: string | undefined;
  /**
   * The protocol field of the response, which includes the claimed HTTP version number.
   */
  protocol?: string | undefined;
  /**
   * A 3-digit integer result code indicating the result of the services.http.request.
   */
  statusCode?: number | undefined;
  /**
   * A human-readable phrase describing the status code.
   */
  statusReason?: string | undefined;
  supportedVersions?: Array<string> | null | undefined;
  /**
   * The full path used to make the request, which includes the scheme, host, port (when non-standard), and endpoint.
   */
  uri?: string | undefined;
};

/** @internal */
export const Http$inboundSchema: z.ZodType<Http, z.ZodTypeDef, unknown> = z
  .object({
    body: z.string().optional(),
    body_hash_sha1: z.string().optional(),
    body_hash_sha256: z.string().optional(),
    body_hash_tlsh: z.string().optional(),
    body_size: z.number().int().optional(),
    favicons: z.nullable(z.array(HttpFavicon$inboundSchema)).optional(),
    headers: z.record(HttpRepeatedHeaders$inboundSchema).optional(),
    html_tags: z.nullable(z.array(z.string())).optional(),
    html_title: z.string().optional(),
    protocol: z.string().optional(),
    status_code: z.number().int().optional(),
    status_reason: z.string().optional(),
    supported_versions: z.nullable(z.array(z.string())).optional(),
    uri: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "body_hash_sha1": "bodyHashSha1",
      "body_hash_sha256": "bodyHashSha256",
      "body_hash_tlsh": "bodyHashTlsh",
      "body_size": "bodySize",
      "html_tags": "htmlTags",
      "html_title": "htmlTitle",
      "status_code": "statusCode",
      "status_reason": "statusReason",
      "supported_versions": "supportedVersions",
    });
  });

/** @internal */
export type Http$Outbound = {
  body?: string | undefined;
  body_hash_sha1?: string | undefined;
  body_hash_sha256?: string | undefined;
  body_hash_tlsh?: string | undefined;
  body_size?: number | undefined;
  favicons?: Array<HttpFavicon$Outbound> | null | undefined;
  headers?: { [k: string]: HttpRepeatedHeaders$Outbound } | undefined;
  html_tags?: Array<string> | null | undefined;
  html_title?: string | undefined;
  protocol?: string | undefined;
  status_code?: number | undefined;
  status_reason?: string | undefined;
  supported_versions?: Array<string> | null | undefined;
  uri?: string | undefined;
};

/** @internal */
export const Http$outboundSchema: z.ZodType<Http$Outbound, z.ZodTypeDef, Http> =
  z.object({
    body: z.string().optional(),
    bodyHashSha1: z.string().optional(),
    bodyHashSha256: z.string().optional(),
    bodyHashTlsh: z.string().optional(),
    bodySize: z.number().int().optional(),
    favicons: z.nullable(z.array(HttpFavicon$outboundSchema)).optional(),
    headers: z.record(HttpRepeatedHeaders$outboundSchema).optional(),
    htmlTags: z.nullable(z.array(z.string())).optional(),
    htmlTitle: z.string().optional(),
    protocol: z.string().optional(),
    statusCode: z.number().int().optional(),
    statusReason: z.string().optional(),
    supportedVersions: z.nullable(z.array(z.string())).optional(),
    uri: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      bodyHashSha1: "body_hash_sha1",
      bodyHashSha256: "body_hash_sha256",
      bodyHashTlsh: "body_hash_tlsh",
      bodySize: "body_size",
      htmlTags: "html_tags",
      htmlTitle: "html_title",
      statusCode: "status_code",
      statusReason: "status_reason",
      supportedVersions: "supported_versions",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Http$ {
  /** @deprecated use `Http$inboundSchema` instead. */
  export const inboundSchema = Http$inboundSchema;
  /** @deprecated use `Http$outboundSchema` instead. */
  export const outboundSchema = Http$outboundSchema;
  /** @deprecated use `Http$Outbound` instead. */
  export type Outbound = Http$Outbound;
}

export function httpToJSON(http: Http): string {
  return JSON.stringify(Http$outboundSchema.parse(http));
}

export function httpFromJSON(
  jsonString: string,
): SafeParseResult<Http, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Http$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Http' from JSON`,
  );
}
