/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type RedlionCrimson = {
  configsExposed?: boolean | undefined;
  controlEngineStatus?: string | undefined;
  currentSoftwareLevel?: string | undefined;
  executionStatus?: string | undefined;
  manufacturer?: string | undefined;
  model?: string | undefined;
};

/** @internal */
export const RedlionCrimson$inboundSchema: z.ZodType<
  RedlionCrimson,
  z.ZodTypeDef,
  unknown
> = z.object({
  configs_exposed: z.boolean().optional(),
  control_engine_status: z.string().optional(),
  current_software_level: z.string().optional(),
  execution_status: z.string().optional(),
  manufacturer: z.string().optional(),
  model: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "configs_exposed": "configsExposed",
    "control_engine_status": "controlEngineStatus",
    "current_software_level": "currentSoftwareLevel",
    "execution_status": "executionStatus",
  });
});

/** @internal */
export type RedlionCrimson$Outbound = {
  configs_exposed?: boolean | undefined;
  control_engine_status?: string | undefined;
  current_software_level?: string | undefined;
  execution_status?: string | undefined;
  manufacturer?: string | undefined;
  model?: string | undefined;
};

/** @internal */
export const RedlionCrimson$outboundSchema: z.ZodType<
  RedlionCrimson$Outbound,
  z.ZodTypeDef,
  RedlionCrimson
> = z.object({
  configsExposed: z.boolean().optional(),
  controlEngineStatus: z.string().optional(),
  currentSoftwareLevel: z.string().optional(),
  executionStatus: z.string().optional(),
  manufacturer: z.string().optional(),
  model: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    configsExposed: "configs_exposed",
    controlEngineStatus: "control_engine_status",
    currentSoftwareLevel: "current_software_level",
    executionStatus: "execution_status",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedlionCrimson$ {
  /** @deprecated use `RedlionCrimson$inboundSchema` instead. */
  export const inboundSchema = RedlionCrimson$inboundSchema;
  /** @deprecated use `RedlionCrimson$outboundSchema` instead. */
  export const outboundSchema = RedlionCrimson$outboundSchema;
  /** @deprecated use `RedlionCrimson$Outbound` instead. */
  export type Outbound = RedlionCrimson$Outbound;
}

export function redlionCrimsonToJSON(redlionCrimson: RedlionCrimson): string {
  return JSON.stringify(RedlionCrimson$outboundSchema.parse(redlionCrimson));
}

export function redlionCrimsonFromJSON(
  jsonString: string,
): SafeParseResult<RedlionCrimson, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedlionCrimson$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedlionCrimson' from JSON`,
  );
}
