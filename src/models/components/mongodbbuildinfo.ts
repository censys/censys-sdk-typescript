/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  MongodbBuildInfoBuildEnvironment,
  MongodbBuildInfoBuildEnvironment$inboundSchema,
  MongodbBuildInfoBuildEnvironment$Outbound,
  MongodbBuildInfoBuildEnvironment$outboundSchema,
} from "./mongodbbuildinfobuildenvironment.js";

export type MongodbBuildInfo = {
  buildEnvironment?: MongodbBuildInfoBuildEnvironment | undefined;
  /**
   * Version of mongodb server
   */
  gitVersion?: string | undefined;
  /**
   * Version of mongodb server
   */
  version?: string | undefined;
};

/** @internal */
export const MongodbBuildInfo$inboundSchema: z.ZodType<
  MongodbBuildInfo,
  z.ZodTypeDef,
  unknown
> = z.object({
  build_environment: MongodbBuildInfoBuildEnvironment$inboundSchema.optional(),
  git_version: z.string().optional(),
  version: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "build_environment": "buildEnvironment",
    "git_version": "gitVersion",
  });
});

/** @internal */
export type MongodbBuildInfo$Outbound = {
  build_environment?: MongodbBuildInfoBuildEnvironment$Outbound | undefined;
  git_version?: string | undefined;
  version?: string | undefined;
};

/** @internal */
export const MongodbBuildInfo$outboundSchema: z.ZodType<
  MongodbBuildInfo$Outbound,
  z.ZodTypeDef,
  MongodbBuildInfo
> = z.object({
  buildEnvironment: MongodbBuildInfoBuildEnvironment$outboundSchema.optional(),
  gitVersion: z.string().optional(),
  version: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    buildEnvironment: "build_environment",
    gitVersion: "git_version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongodbBuildInfo$ {
  /** @deprecated use `MongodbBuildInfo$inboundSchema` instead. */
  export const inboundSchema = MongodbBuildInfo$inboundSchema;
  /** @deprecated use `MongodbBuildInfo$outboundSchema` instead. */
  export const outboundSchema = MongodbBuildInfo$outboundSchema;
  /** @deprecated use `MongodbBuildInfo$Outbound` instead. */
  export type Outbound = MongodbBuildInfo$Outbound;
}

export function mongodbBuildInfoToJSON(
  mongodbBuildInfo: MongodbBuildInfo,
): string {
  return JSON.stringify(
    MongodbBuildInfo$outboundSchema.parse(mongodbBuildInfo),
  );
}

export function mongodbBuildInfoFromJSON(
  jsonString: string,
): SafeParseResult<MongodbBuildInfo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongodbBuildInfo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongodbBuildInfo' from JSON`,
  );
}
