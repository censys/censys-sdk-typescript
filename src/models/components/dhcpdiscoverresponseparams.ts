/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  DhcpdiscoverDeviceInfo,
  DhcpdiscoverDeviceInfo$inboundSchema,
  DhcpdiscoverDeviceInfo$Outbound,
  DhcpdiscoverDeviceInfo$outboundSchema,
} from "./dhcpdiscoverdeviceinfo.js";

export type DhcpdiscoverResponseParams = {
  deviceInfo?: DhcpdiscoverDeviceInfo | undefined;
};

/** @internal */
export const DhcpdiscoverResponseParams$inboundSchema: z.ZodType<
  DhcpdiscoverResponseParams,
  z.ZodTypeDef,
  unknown
> = z.object({
  device_info: DhcpdiscoverDeviceInfo$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "device_info": "deviceInfo",
  });
});

/** @internal */
export type DhcpdiscoverResponseParams$Outbound = {
  device_info?: DhcpdiscoverDeviceInfo$Outbound | undefined;
};

/** @internal */
export const DhcpdiscoverResponseParams$outboundSchema: z.ZodType<
  DhcpdiscoverResponseParams$Outbound,
  z.ZodTypeDef,
  DhcpdiscoverResponseParams
> = z.object({
  deviceInfo: DhcpdiscoverDeviceInfo$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    deviceInfo: "device_info",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DhcpdiscoverResponseParams$ {
  /** @deprecated use `DhcpdiscoverResponseParams$inboundSchema` instead. */
  export const inboundSchema = DhcpdiscoverResponseParams$inboundSchema;
  /** @deprecated use `DhcpdiscoverResponseParams$outboundSchema` instead. */
  export const outboundSchema = DhcpdiscoverResponseParams$outboundSchema;
  /** @deprecated use `DhcpdiscoverResponseParams$Outbound` instead. */
  export type Outbound = DhcpdiscoverResponseParams$Outbound;
}

export function dhcpdiscoverResponseParamsToJSON(
  dhcpdiscoverResponseParams: DhcpdiscoverResponseParams,
): string {
  return JSON.stringify(
    DhcpdiscoverResponseParams$outboundSchema.parse(dhcpdiscoverResponseParams),
  );
}

export function dhcpdiscoverResponseParamsFromJSON(
  jsonString: string,
): SafeParseResult<DhcpdiscoverResponseParams, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DhcpdiscoverResponseParams$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DhcpdiscoverResponseParams' from JSON`,
  );
}
