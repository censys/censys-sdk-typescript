/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PcAnywhereStatus = {
  /**
   * Workstation is In Use if true, Available if false
   */
  inUse?: boolean | undefined;
  /**
   * Full 'ST' query response
   */
  raw?: string | undefined;
};

/** @internal */
export const PcAnywhereStatus$inboundSchema: z.ZodType<
  PcAnywhereStatus,
  z.ZodTypeDef,
  unknown
> = z.object({
  in_use: z.boolean().optional(),
  raw: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "in_use": "inUse",
  });
});

/** @internal */
export type PcAnywhereStatus$Outbound = {
  in_use?: boolean | undefined;
  raw?: string | undefined;
};

/** @internal */
export const PcAnywhereStatus$outboundSchema: z.ZodType<
  PcAnywhereStatus$Outbound,
  z.ZodTypeDef,
  PcAnywhereStatus
> = z.object({
  inUse: z.boolean().optional(),
  raw: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    inUse: "in_use",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PcAnywhereStatus$ {
  /** @deprecated use `PcAnywhereStatus$inboundSchema` instead. */
  export const inboundSchema = PcAnywhereStatus$inboundSchema;
  /** @deprecated use `PcAnywhereStatus$outboundSchema` instead. */
  export const outboundSchema = PcAnywhereStatus$outboundSchema;
  /** @deprecated use `PcAnywhereStatus$Outbound` instead. */
  export type Outbound = PcAnywhereStatus$Outbound;
}

export function pcAnywhereStatusToJSON(
  pcAnywhereStatus: PcAnywhereStatus,
): string {
  return JSON.stringify(
    PcAnywhereStatus$outboundSchema.parse(pcAnywhereStatus),
  );
}

export function pcAnywhereStatusFromJSON(
  jsonString: string,
): SafeParseResult<PcAnywhereStatus, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PcAnywhereStatus$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PcAnywhereStatus' from JSON`,
  );
}
