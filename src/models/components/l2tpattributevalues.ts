/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type L2TpAttributeValues = {
  errorCode?: number | undefined;
  errorMeaning?: string | undefined;
  errorMessage?: string | undefined;
  firmwareRevision?: number | undefined;
  hostname?: string | undefined;
  protocolRevision?: number | undefined;
  protocolVersion?: number | undefined;
  resultCode?: number | undefined;
  resultMeaning?: string | undefined;
  vendorName?: string | undefined;
  windowSize?: number | undefined;
};

/** @internal */
export const L2TpAttributeValues$inboundSchema: z.ZodType<
  L2TpAttributeValues,
  z.ZodTypeDef,
  unknown
> = z.object({
  error_code: z.number().int().optional(),
  error_meaning: z.string().optional(),
  error_message: z.string().optional(),
  firmware_revision: z.number().int().optional(),
  hostname: z.string().optional(),
  protocol_revision: z.number().int().optional(),
  protocol_version: z.number().int().optional(),
  result_code: z.number().int().optional(),
  result_meaning: z.string().optional(),
  vendor_name: z.string().optional(),
  window_size: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "error_code": "errorCode",
    "error_meaning": "errorMeaning",
    "error_message": "errorMessage",
    "firmware_revision": "firmwareRevision",
    "protocol_revision": "protocolRevision",
    "protocol_version": "protocolVersion",
    "result_code": "resultCode",
    "result_meaning": "resultMeaning",
    "vendor_name": "vendorName",
    "window_size": "windowSize",
  });
});

/** @internal */
export type L2TpAttributeValues$Outbound = {
  error_code?: number | undefined;
  error_meaning?: string | undefined;
  error_message?: string | undefined;
  firmware_revision?: number | undefined;
  hostname?: string | undefined;
  protocol_revision?: number | undefined;
  protocol_version?: number | undefined;
  result_code?: number | undefined;
  result_meaning?: string | undefined;
  vendor_name?: string | undefined;
  window_size?: number | undefined;
};

/** @internal */
export const L2TpAttributeValues$outboundSchema: z.ZodType<
  L2TpAttributeValues$Outbound,
  z.ZodTypeDef,
  L2TpAttributeValues
> = z.object({
  errorCode: z.number().int().optional(),
  errorMeaning: z.string().optional(),
  errorMessage: z.string().optional(),
  firmwareRevision: z.number().int().optional(),
  hostname: z.string().optional(),
  protocolRevision: z.number().int().optional(),
  protocolVersion: z.number().int().optional(),
  resultCode: z.number().int().optional(),
  resultMeaning: z.string().optional(),
  vendorName: z.string().optional(),
  windowSize: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    errorCode: "error_code",
    errorMeaning: "error_meaning",
    errorMessage: "error_message",
    firmwareRevision: "firmware_revision",
    protocolRevision: "protocol_revision",
    protocolVersion: "protocol_version",
    resultCode: "result_code",
    resultMeaning: "result_meaning",
    vendorName: "vendor_name",
    windowSize: "window_size",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace L2TpAttributeValues$ {
  /** @deprecated use `L2TpAttributeValues$inboundSchema` instead. */
  export const inboundSchema = L2TpAttributeValues$inboundSchema;
  /** @deprecated use `L2TpAttributeValues$outboundSchema` instead. */
  export const outboundSchema = L2TpAttributeValues$outboundSchema;
  /** @deprecated use `L2TpAttributeValues$Outbound` instead. */
  export type Outbound = L2TpAttributeValues$Outbound;
}

export function l2TpAttributeValuesToJSON(
  l2TpAttributeValues: L2TpAttributeValues,
): string {
  return JSON.stringify(
    L2TpAttributeValues$outboundSchema.parse(l2TpAttributeValues),
  );
}

export function l2TpAttributeValuesFromJSON(
  jsonString: string,
): SafeParseResult<L2TpAttributeValues, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => L2TpAttributeValues$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'L2TpAttributeValues' from JSON`,
  );
}
