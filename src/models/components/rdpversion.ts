/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type RdpVersion = {
  major?: number | undefined;
  minor?: number | undefined;
  /**
   * Raw Version Response, Major version is stored in upper 2 bytes, minor in lower 2 bytes.
   */
  raw?: string | undefined;
};

/** @internal */
export const RdpVersion$inboundSchema: z.ZodType<
  RdpVersion,
  z.ZodTypeDef,
  unknown
> = z.object({
  major: z.number().int().optional(),
  minor: z.number().int().optional(),
  raw: z.string().optional(),
});

/** @internal */
export type RdpVersion$Outbound = {
  major?: number | undefined;
  minor?: number | undefined;
  raw?: string | undefined;
};

/** @internal */
export const RdpVersion$outboundSchema: z.ZodType<
  RdpVersion$Outbound,
  z.ZodTypeDef,
  RdpVersion
> = z.object({
  major: z.number().int().optional(),
  minor: z.number().int().optional(),
  raw: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RdpVersion$ {
  /** @deprecated use `RdpVersion$inboundSchema` instead. */
  export const inboundSchema = RdpVersion$inboundSchema;
  /** @deprecated use `RdpVersion$outboundSchema` instead. */
  export const outboundSchema = RdpVersion$outboundSchema;
  /** @deprecated use `RdpVersion$Outbound` instead. */
  export type Outbound = RdpVersion$Outbound;
}

export function rdpVersionToJSON(rdpVersion: RdpVersion): string {
  return JSON.stringify(RdpVersion$outboundSchema.parse(rdpVersion));
}

export function rdpVersionFromJSON(
  jsonString: string,
): SafeParseResult<RdpVersion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RdpVersion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RdpVersion' from JSON`,
  );
}
