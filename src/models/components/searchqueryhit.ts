/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  CertificateAsset,
  CertificateAsset$inboundSchema,
  CertificateAsset$Outbound,
  CertificateAsset$outboundSchema,
} from "./certificateasset.js";
import {
  HostAsset,
  HostAsset$inboundSchema,
  HostAsset$Outbound,
  HostAsset$outboundSchema,
} from "./hostasset.js";
import {
  WebpropertyAsset,
  WebpropertyAsset$inboundSchema,
  WebpropertyAsset$Outbound,
  WebpropertyAsset$outboundSchema,
} from "./webpropertyasset.js";

export type SearchQueryHit = {
  certificateV1?: CertificateAsset | undefined;
  hostV1?: HostAsset | undefined;
  webpropertyV1?: WebpropertyAsset | undefined;
};

/** @internal */
export const SearchQueryHit$inboundSchema: z.ZodType<
  SearchQueryHit,
  z.ZodTypeDef,
  unknown
> = z.object({
  certificate_v1: CertificateAsset$inboundSchema.optional(),
  host_v1: HostAsset$inboundSchema.optional(),
  webproperty_v1: WebpropertyAsset$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "certificate_v1": "certificateV1",
    "host_v1": "hostV1",
    "webproperty_v1": "webpropertyV1",
  });
});

/** @internal */
export type SearchQueryHit$Outbound = {
  certificate_v1?: CertificateAsset$Outbound | undefined;
  host_v1?: HostAsset$Outbound | undefined;
  webproperty_v1?: WebpropertyAsset$Outbound | undefined;
};

/** @internal */
export const SearchQueryHit$outboundSchema: z.ZodType<
  SearchQueryHit$Outbound,
  z.ZodTypeDef,
  SearchQueryHit
> = z.object({
  certificateV1: CertificateAsset$outboundSchema.optional(),
  hostV1: HostAsset$outboundSchema.optional(),
  webpropertyV1: WebpropertyAsset$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    certificateV1: "certificate_v1",
    hostV1: "host_v1",
    webpropertyV1: "webproperty_v1",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchQueryHit$ {
  /** @deprecated use `SearchQueryHit$inboundSchema` instead. */
  export const inboundSchema = SearchQueryHit$inboundSchema;
  /** @deprecated use `SearchQueryHit$outboundSchema` instead. */
  export const outboundSchema = SearchQueryHit$outboundSchema;
  /** @deprecated use `SearchQueryHit$Outbound` instead. */
  export type Outbound = SearchQueryHit$Outbound;
}

export function searchQueryHitToJSON(searchQueryHit: SearchQueryHit): string {
  return JSON.stringify(SearchQueryHit$outboundSchema.parse(searchQueryHit));
}

export function searchQueryHitFromJSON(
  jsonString: string,
): SafeParseResult<SearchQueryHit, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchQueryHit$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchQueryHit' from JSON`,
  );
}
