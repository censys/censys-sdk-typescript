/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ServerConfig = {
  allowHtml?: boolean | undefined;
  imageMessageLength?: number | undefined;
  maxBandwidth?: number | undefined;
  maxUsers?: number | undefined;
  messageLength?: number | undefined;
  recordingAllowed?: boolean | undefined;
  welcomeText?: string | undefined;
};

/** @internal */
export const ServerConfig$inboundSchema: z.ZodType<
  ServerConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  allow_html: z.boolean().optional(),
  image_message_length: z.number().int().optional(),
  max_bandwidth: z.number().int().optional(),
  max_users: z.number().int().optional(),
  message_length: z.number().int().optional(),
  recording_allowed: z.boolean().optional(),
  welcome_text: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "allow_html": "allowHtml",
    "image_message_length": "imageMessageLength",
    "max_bandwidth": "maxBandwidth",
    "max_users": "maxUsers",
    "message_length": "messageLength",
    "recording_allowed": "recordingAllowed",
    "welcome_text": "welcomeText",
  });
});

/** @internal */
export type ServerConfig$Outbound = {
  allow_html?: boolean | undefined;
  image_message_length?: number | undefined;
  max_bandwidth?: number | undefined;
  max_users?: number | undefined;
  message_length?: number | undefined;
  recording_allowed?: boolean | undefined;
  welcome_text?: string | undefined;
};

/** @internal */
export const ServerConfig$outboundSchema: z.ZodType<
  ServerConfig$Outbound,
  z.ZodTypeDef,
  ServerConfig
> = z.object({
  allowHtml: z.boolean().optional(),
  imageMessageLength: z.number().int().optional(),
  maxBandwidth: z.number().int().optional(),
  maxUsers: z.number().int().optional(),
  messageLength: z.number().int().optional(),
  recordingAllowed: z.boolean().optional(),
  welcomeText: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    allowHtml: "allow_html",
    imageMessageLength: "image_message_length",
    maxBandwidth: "max_bandwidth",
    maxUsers: "max_users",
    messageLength: "message_length",
    recordingAllowed: "recording_allowed",
    welcomeText: "welcome_text",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServerConfig$ {
  /** @deprecated use `ServerConfig$inboundSchema` instead. */
  export const inboundSchema = ServerConfig$inboundSchema;
  /** @deprecated use `ServerConfig$outboundSchema` instead. */
  export const outboundSchema = ServerConfig$outboundSchema;
  /** @deprecated use `ServerConfig$Outbound` instead. */
  export type Outbound = ServerConfig$Outbound;
}

export function serverConfigToJSON(serverConfig: ServerConfig): string {
  return JSON.stringify(ServerConfig$outboundSchema.parse(serverConfig));
}

export function serverConfigFromJSON(
  jsonString: string,
): SafeParseResult<ServerConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ServerConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ServerConfig' from JSON`,
  );
}
