/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ECDSACryptographicKey = {
  b?: string | undefined;
  curve?: string | undefined;
  gx?: string | undefined;
  gy?: string | undefined;
  length?: number | undefined;
  n?: string | undefined;
  p?: string | undefined;
  pub?: string | undefined;
  x?: string | undefined;
  y?: string | undefined;
};

/** @internal */
export const ECDSACryptographicKey$inboundSchema: z.ZodType<
  ECDSACryptographicKey,
  z.ZodTypeDef,
  unknown
> = z.object({
  b: z.string().optional(),
  curve: z.string().optional(),
  gx: z.string().optional(),
  gy: z.string().optional(),
  length: z.number().int().optional(),
  n: z.string().optional(),
  p: z.string().optional(),
  pub: z.string().optional(),
  x: z.string().optional(),
  y: z.string().optional(),
});

/** @internal */
export type ECDSACryptographicKey$Outbound = {
  b?: string | undefined;
  curve?: string | undefined;
  gx?: string | undefined;
  gy?: string | undefined;
  length?: number | undefined;
  n?: string | undefined;
  p?: string | undefined;
  pub?: string | undefined;
  x?: string | undefined;
  y?: string | undefined;
};

/** @internal */
export const ECDSACryptographicKey$outboundSchema: z.ZodType<
  ECDSACryptographicKey$Outbound,
  z.ZodTypeDef,
  ECDSACryptographicKey
> = z.object({
  b: z.string().optional(),
  curve: z.string().optional(),
  gx: z.string().optional(),
  gy: z.string().optional(),
  length: z.number().int().optional(),
  n: z.string().optional(),
  p: z.string().optional(),
  pub: z.string().optional(),
  x: z.string().optional(),
  y: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ECDSACryptographicKey$ {
  /** @deprecated use `ECDSACryptographicKey$inboundSchema` instead. */
  export const inboundSchema = ECDSACryptographicKey$inboundSchema;
  /** @deprecated use `ECDSACryptographicKey$outboundSchema` instead. */
  export const outboundSchema = ECDSACryptographicKey$outboundSchema;
  /** @deprecated use `ECDSACryptographicKey$Outbound` instead. */
  export type Outbound = ECDSACryptographicKey$Outbound;
}

export function ecdsaCryptographicKeyToJSON(
  ecdsaCryptographicKey: ECDSACryptographicKey,
): string {
  return JSON.stringify(
    ECDSACryptographicKey$outboundSchema.parse(ecdsaCryptographicKey),
  );
}

export function ecdsaCryptographicKeyFromJSON(
  jsonString: string,
): SafeParseResult<ECDSACryptographicKey, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ECDSACryptographicKey$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ECDSACryptographicKey' from JSON`,
  );
}
