/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  DvrIpPartitionCapability,
  DvrIpPartitionCapability$inboundSchema,
  DvrIpPartitionCapability$Outbound,
  DvrIpPartitionCapability$outboundSchema,
} from "./dvrippartitioncapability.js";

export type DvrIp = {
  accessUrl?: string | undefined;
  functionCapability?: string | undefined;
  functionList?: string | undefined;
  hardDrive?: string | undefined;
  languageSupport?: string | undefined;
  networkStatus?: string | undefined;
  oemInfo?: string | undefined;
  partitionCapability?: DvrIpPartitionCapability | undefined;
  serial?: string | undefined;
  splitScreenCapability?: string | undefined;
  version?: string | undefined;
  wirelessAlarmCapability?: string | undefined;
};

/** @internal */
export const DvrIp$inboundSchema: z.ZodType<DvrIp, z.ZodTypeDef, unknown> = z
  .object({
    access_url: z.string().optional(),
    function_capability: z.string().optional(),
    function_list: z.string().optional(),
    hard_drive: z.string().optional(),
    language_support: z.string().optional(),
    network_status: z.string().optional(),
    oem_info: z.string().optional(),
    partition_capability: DvrIpPartitionCapability$inboundSchema.optional(),
    serial: z.string().optional(),
    split_screen_capability: z.string().optional(),
    version: z.string().optional(),
    wireless_alarm_capability: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "access_url": "accessUrl",
      "function_capability": "functionCapability",
      "function_list": "functionList",
      "hard_drive": "hardDrive",
      "language_support": "languageSupport",
      "network_status": "networkStatus",
      "oem_info": "oemInfo",
      "partition_capability": "partitionCapability",
      "split_screen_capability": "splitScreenCapability",
      "wireless_alarm_capability": "wirelessAlarmCapability",
    });
  });

/** @internal */
export type DvrIp$Outbound = {
  access_url?: string | undefined;
  function_capability?: string | undefined;
  function_list?: string | undefined;
  hard_drive?: string | undefined;
  language_support?: string | undefined;
  network_status?: string | undefined;
  oem_info?: string | undefined;
  partition_capability?: DvrIpPartitionCapability$Outbound | undefined;
  serial?: string | undefined;
  split_screen_capability?: string | undefined;
  version?: string | undefined;
  wireless_alarm_capability?: string | undefined;
};

/** @internal */
export const DvrIp$outboundSchema: z.ZodType<
  DvrIp$Outbound,
  z.ZodTypeDef,
  DvrIp
> = z.object({
  accessUrl: z.string().optional(),
  functionCapability: z.string().optional(),
  functionList: z.string().optional(),
  hardDrive: z.string().optional(),
  languageSupport: z.string().optional(),
  networkStatus: z.string().optional(),
  oemInfo: z.string().optional(),
  partitionCapability: DvrIpPartitionCapability$outboundSchema.optional(),
  serial: z.string().optional(),
  splitScreenCapability: z.string().optional(),
  version: z.string().optional(),
  wirelessAlarmCapability: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    accessUrl: "access_url",
    functionCapability: "function_capability",
    functionList: "function_list",
    hardDrive: "hard_drive",
    languageSupport: "language_support",
    networkStatus: "network_status",
    oemInfo: "oem_info",
    partitionCapability: "partition_capability",
    splitScreenCapability: "split_screen_capability",
    wirelessAlarmCapability: "wireless_alarm_capability",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DvrIp$ {
  /** @deprecated use `DvrIp$inboundSchema` instead. */
  export const inboundSchema = DvrIp$inboundSchema;
  /** @deprecated use `DvrIp$outboundSchema` instead. */
  export const outboundSchema = DvrIp$outboundSchema;
  /** @deprecated use `DvrIp$Outbound` instead. */
  export type Outbound = DvrIp$Outbound;
}

export function dvrIpToJSON(dvrIp: DvrIp): string {
  return JSON.stringify(DvrIp$outboundSchema.parse(dvrIp));
}

export function dvrIpFromJSON(
  jsonString: string,
): SafeParseResult<DvrIp, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DvrIp$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DvrIp' from JSON`,
  );
}
