/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type NodeInfoV1 = {
  confirmedMilestoneIndex?: number | undefined;
  features?: Array<string> | null | undefined;
  isHealthy?: boolean | undefined;
  latestMilestoneIndex?: number | undefined;
  name?: string | undefined;
  networkId?: string | undefined;
  version?: string | undefined;
};

/** @internal */
export const NodeInfoV1$inboundSchema: z.ZodType<
  NodeInfoV1,
  z.ZodTypeDef,
  unknown
> = z.object({
  confirmed_milestone_index: z.number().int().optional(),
  features: z.nullable(z.array(z.string())).optional(),
  is_healthy: z.boolean().optional(),
  latest_milestone_index: z.number().int().optional(),
  name: z.string().optional(),
  network_id: z.string().optional(),
  version: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "confirmed_milestone_index": "confirmedMilestoneIndex",
    "is_healthy": "isHealthy",
    "latest_milestone_index": "latestMilestoneIndex",
    "network_id": "networkId",
  });
});

/** @internal */
export type NodeInfoV1$Outbound = {
  confirmed_milestone_index?: number | undefined;
  features?: Array<string> | null | undefined;
  is_healthy?: boolean | undefined;
  latest_milestone_index?: number | undefined;
  name?: string | undefined;
  network_id?: string | undefined;
  version?: string | undefined;
};

/** @internal */
export const NodeInfoV1$outboundSchema: z.ZodType<
  NodeInfoV1$Outbound,
  z.ZodTypeDef,
  NodeInfoV1
> = z.object({
  confirmedMilestoneIndex: z.number().int().optional(),
  features: z.nullable(z.array(z.string())).optional(),
  isHealthy: z.boolean().optional(),
  latestMilestoneIndex: z.number().int().optional(),
  name: z.string().optional(),
  networkId: z.string().optional(),
  version: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    confirmedMilestoneIndex: "confirmed_milestone_index",
    isHealthy: "is_healthy",
    latestMilestoneIndex: "latest_milestone_index",
    networkId: "network_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NodeInfoV1$ {
  /** @deprecated use `NodeInfoV1$inboundSchema` instead. */
  export const inboundSchema = NodeInfoV1$inboundSchema;
  /** @deprecated use `NodeInfoV1$outboundSchema` instead. */
  export const outboundSchema = NodeInfoV1$outboundSchema;
  /** @deprecated use `NodeInfoV1$Outbound` instead. */
  export type Outbound = NodeInfoV1$Outbound;
}

export function nodeInfoV1ToJSON(nodeInfoV1: NodeInfoV1): string {
  return JSON.stringify(NodeInfoV1$outboundSchema.parse(nodeInfoV1));
}

export function nodeInfoV1FromJSON(
  jsonString: string,
): SafeParseResult<NodeInfoV1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NodeInfoV1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NodeInfoV1' from JSON`,
  );
}
