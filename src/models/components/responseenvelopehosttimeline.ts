/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  HostTimeline,
  HostTimeline$inboundSchema,
  HostTimeline$Outbound,
  HostTimeline$outboundSchema,
} from "./hosttimeline.js";

export type ResponseEnvelopeHostTimeline = {
  result?: HostTimeline | undefined;
};

/** @internal */
export const ResponseEnvelopeHostTimeline$inboundSchema: z.ZodType<
  ResponseEnvelopeHostTimeline,
  z.ZodTypeDef,
  unknown
> = z.object({
  result: HostTimeline$inboundSchema.optional(),
});

/** @internal */
export type ResponseEnvelopeHostTimeline$Outbound = {
  result?: HostTimeline$Outbound | undefined;
};

/** @internal */
export const ResponseEnvelopeHostTimeline$outboundSchema: z.ZodType<
  ResponseEnvelopeHostTimeline$Outbound,
  z.ZodTypeDef,
  ResponseEnvelopeHostTimeline
> = z.object({
  result: HostTimeline$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseEnvelopeHostTimeline$ {
  /** @deprecated use `ResponseEnvelopeHostTimeline$inboundSchema` instead. */
  export const inboundSchema = ResponseEnvelopeHostTimeline$inboundSchema;
  /** @deprecated use `ResponseEnvelopeHostTimeline$outboundSchema` instead. */
  export const outboundSchema = ResponseEnvelopeHostTimeline$outboundSchema;
  /** @deprecated use `ResponseEnvelopeHostTimeline$Outbound` instead. */
  export type Outbound = ResponseEnvelopeHostTimeline$Outbound;
}

export function responseEnvelopeHostTimelineToJSON(
  responseEnvelopeHostTimeline: ResponseEnvelopeHostTimeline,
): string {
  return JSON.stringify(
    ResponseEnvelopeHostTimeline$outboundSchema.parse(
      responseEnvelopeHostTimeline,
    ),
  );
}

export function responseEnvelopeHostTimelineFromJSON(
  jsonString: string,
): SafeParseResult<ResponseEnvelopeHostTimeline, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseEnvelopeHostTimeline$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseEnvelopeHostTimeline' from JSON`,
  );
}
