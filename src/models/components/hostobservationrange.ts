/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type HostObservationRange = {
  endTime: Date;
  ip: string;
  port: number;
  protocols: Array<string> | null;
  startTime: Date;
  transportProtocol: string;
};

/** @internal */
export const HostObservationRange$inboundSchema: z.ZodType<
  HostObservationRange,
  z.ZodTypeDef,
  unknown
> = z.object({
  end_time: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ip: z.string(),
  port: z.number().int(),
  protocols: z.nullable(z.array(z.string())),
  start_time: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  transport_protocol: z.string(),
}).transform((v) => {
  return remap$(v, {
    "end_time": "endTime",
    "start_time": "startTime",
    "transport_protocol": "transportProtocol",
  });
});

/** @internal */
export type HostObservationRange$Outbound = {
  end_time: string;
  ip: string;
  port: number;
  protocols: Array<string> | null;
  start_time: string;
  transport_protocol: string;
};

/** @internal */
export const HostObservationRange$outboundSchema: z.ZodType<
  HostObservationRange$Outbound,
  z.ZodTypeDef,
  HostObservationRange
> = z.object({
  endTime: z.date().transform(v => v.toISOString()),
  ip: z.string(),
  port: z.number().int(),
  protocols: z.nullable(z.array(z.string())),
  startTime: z.date().transform(v => v.toISOString()),
  transportProtocol: z.string(),
}).transform((v) => {
  return remap$(v, {
    endTime: "end_time",
    startTime: "start_time",
    transportProtocol: "transport_protocol",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HostObservationRange$ {
  /** @deprecated use `HostObservationRange$inboundSchema` instead. */
  export const inboundSchema = HostObservationRange$inboundSchema;
  /** @deprecated use `HostObservationRange$outboundSchema` instead. */
  export const outboundSchema = HostObservationRange$outboundSchema;
  /** @deprecated use `HostObservationRange$Outbound` instead. */
  export type Outbound = HostObservationRange$Outbound;
}

export function hostObservationRangeToJSON(
  hostObservationRange: HostObservationRange,
): string {
  return JSON.stringify(
    HostObservationRange$outboundSchema.parse(hostObservationRange),
  );
}

export function hostObservationRangeFromJSON(
  jsonString: string,
): SafeParseResult<HostObservationRange, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HostObservationRange$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HostObservationRange' from JSON`,
  );
}
