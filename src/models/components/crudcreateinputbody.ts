/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CrudCreateInputBody = {
  /**
   * description of the collection
   */
  description: string;
  /**
   * name of the collection
   */
  name: string;
  /**
   * query string to search upon to build the collection
   */
  query: string;
};

/** @internal */
export const CrudCreateInputBody$inboundSchema: z.ZodType<
  CrudCreateInputBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  description: z.string(),
  name: z.string(),
  query: z.string(),
});

/** @internal */
export type CrudCreateInputBody$Outbound = {
  description: string;
  name: string;
  query: string;
};

/** @internal */
export const CrudCreateInputBody$outboundSchema: z.ZodType<
  CrudCreateInputBody$Outbound,
  z.ZodTypeDef,
  CrudCreateInputBody
> = z.object({
  description: z.string(),
  name: z.string(),
  query: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CrudCreateInputBody$ {
  /** @deprecated use `CrudCreateInputBody$inboundSchema` instead. */
  export const inboundSchema = CrudCreateInputBody$inboundSchema;
  /** @deprecated use `CrudCreateInputBody$outboundSchema` instead. */
  export const outboundSchema = CrudCreateInputBody$outboundSchema;
  /** @deprecated use `CrudCreateInputBody$Outbound` instead. */
  export type Outbound = CrudCreateInputBody$Outbound;
}

export function crudCreateInputBodyToJSON(
  crudCreateInputBody: CrudCreateInputBody,
): string {
  return JSON.stringify(
    CrudCreateInputBody$outboundSchema.parse(crudCreateInputBody),
  );
}

export function crudCreateInputBodyFromJSON(
  jsonString: string,
): SafeParseResult<CrudCreateInputBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CrudCreateInputBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CrudCreateInputBody' from JSON`,
  );
}
