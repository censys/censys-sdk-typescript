/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const RepresentativeInfoReason = {
  Unknown: "",
  ProtocolPortCount: "protocol_port_count",
  Incapsula: "incapsula",
  Zscaler: "zscaler",
} as const;
export type RepresentativeInfoReason = ClosedEnum<
  typeof RepresentativeInfoReason
>;

export type RepresentativeInfo = {
  excludedPorts?: Array<number> | null | undefined;
  reason?: RepresentativeInfoReason | undefined;
  representedPorts?: Array<number> | null | undefined;
  sampledPort?: number | undefined;
};

/** @internal */
export const RepresentativeInfoReason$inboundSchema: z.ZodNativeEnum<
  typeof RepresentativeInfoReason
> = z.nativeEnum(RepresentativeInfoReason);

/** @internal */
export const RepresentativeInfoReason$outboundSchema: z.ZodNativeEnum<
  typeof RepresentativeInfoReason
> = RepresentativeInfoReason$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RepresentativeInfoReason$ {
  /** @deprecated use `RepresentativeInfoReason$inboundSchema` instead. */
  export const inboundSchema = RepresentativeInfoReason$inboundSchema;
  /** @deprecated use `RepresentativeInfoReason$outboundSchema` instead. */
  export const outboundSchema = RepresentativeInfoReason$outboundSchema;
}

/** @internal */
export const RepresentativeInfo$inboundSchema: z.ZodType<
  RepresentativeInfo,
  z.ZodTypeDef,
  unknown
> = z.object({
  excluded_ports: z.nullable(z.array(z.number().int())).optional(),
  reason: RepresentativeInfoReason$inboundSchema.optional(),
  represented_ports: z.nullable(z.array(z.number().int())).optional(),
  sampled_port: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "excluded_ports": "excludedPorts",
    "represented_ports": "representedPorts",
    "sampled_port": "sampledPort",
  });
});

/** @internal */
export type RepresentativeInfo$Outbound = {
  excluded_ports?: Array<number> | null | undefined;
  reason?: string | undefined;
  represented_ports?: Array<number> | null | undefined;
  sampled_port?: number | undefined;
};

/** @internal */
export const RepresentativeInfo$outboundSchema: z.ZodType<
  RepresentativeInfo$Outbound,
  z.ZodTypeDef,
  RepresentativeInfo
> = z.object({
  excludedPorts: z.nullable(z.array(z.number().int())).optional(),
  reason: RepresentativeInfoReason$outboundSchema.optional(),
  representedPorts: z.nullable(z.array(z.number().int())).optional(),
  sampledPort: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    excludedPorts: "excluded_ports",
    representedPorts: "represented_ports",
    sampledPort: "sampled_port",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RepresentativeInfo$ {
  /** @deprecated use `RepresentativeInfo$inboundSchema` instead. */
  export const inboundSchema = RepresentativeInfo$inboundSchema;
  /** @deprecated use `RepresentativeInfo$outboundSchema` instead. */
  export const outboundSchema = RepresentativeInfo$outboundSchema;
  /** @deprecated use `RepresentativeInfo$Outbound` instead. */
  export type Outbound = RepresentativeInfo$Outbound;
}

export function representativeInfoToJSON(
  representativeInfo: RepresentativeInfo,
): string {
  return JSON.stringify(
    RepresentativeInfo$outboundSchema.parse(representativeInfo),
  );
}

export function representativeInfoFromJSON(
  jsonString: string,
): SafeParseResult<RepresentativeInfo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RepresentativeInfo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RepresentativeInfo' from JSON`,
  );
}
