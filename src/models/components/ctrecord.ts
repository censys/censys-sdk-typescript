/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CtRecord = {
  /**
   * An RFC-3339-formatted timestamp indicating when the certificate was entered into the CT log.
   */
  addedToCtAt?: string | undefined;
  /**
   * An RFC-3339-formated timestamp indicating when the certificate was ingested from the CT log into the Censys dataset.
   */
  ctToCensysAt?: string | undefined;
  /**
   * Numerical marker of the certificate's place in the CT log.
   */
  index?: number | undefined;
};

/** @internal */
export const CtRecord$inboundSchema: z.ZodType<
  CtRecord,
  z.ZodTypeDef,
  unknown
> = z.object({
  added_to_ct_at: z.string().optional(),
  ct_to_censys_at: z.string().optional(),
  index: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "added_to_ct_at": "addedToCtAt",
    "ct_to_censys_at": "ctToCensysAt",
  });
});

/** @internal */
export type CtRecord$Outbound = {
  added_to_ct_at?: string | undefined;
  ct_to_censys_at?: string | undefined;
  index?: number | undefined;
};

/** @internal */
export const CtRecord$outboundSchema: z.ZodType<
  CtRecord$Outbound,
  z.ZodTypeDef,
  CtRecord
> = z.object({
  addedToCtAt: z.string().optional(),
  ctToCensysAt: z.string().optional(),
  index: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    addedToCtAt: "added_to_ct_at",
    ctToCensysAt: "ct_to_censys_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CtRecord$ {
  /** @deprecated use `CtRecord$inboundSchema` instead. */
  export const inboundSchema = CtRecord$inboundSchema;
  /** @deprecated use `CtRecord$outboundSchema` instead. */
  export const outboundSchema = CtRecord$outboundSchema;
  /** @deprecated use `CtRecord$Outbound` instead. */
  export type Outbound = CtRecord$Outbound;
}

export function ctRecordToJSON(ctRecord: CtRecord): string {
  return JSON.stringify(CtRecord$outboundSchema.parse(ctRecord));
}

export function ctRecordFromJSON(
  jsonString: string,
): SafeParseResult<CtRecord, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CtRecord$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CtRecord' from JSON`,
  );
}
