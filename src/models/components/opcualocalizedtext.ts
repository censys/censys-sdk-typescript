/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type OpcUaLocalizedText = {
  flags?: number | undefined;
  locale?: string | undefined;
  text?: string | undefined;
};

/** @internal */
export const OpcUaLocalizedText$inboundSchema: z.ZodType<
  OpcUaLocalizedText,
  z.ZodTypeDef,
  unknown
> = z.object({
  flags: z.number().int().optional(),
  locale: z.string().optional(),
  text: z.string().optional(),
});

/** @internal */
export type OpcUaLocalizedText$Outbound = {
  flags?: number | undefined;
  locale?: string | undefined;
  text?: string | undefined;
};

/** @internal */
export const OpcUaLocalizedText$outboundSchema: z.ZodType<
  OpcUaLocalizedText$Outbound,
  z.ZodTypeDef,
  OpcUaLocalizedText
> = z.object({
  flags: z.number().int().optional(),
  locale: z.string().optional(),
  text: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpcUaLocalizedText$ {
  /** @deprecated use `OpcUaLocalizedText$inboundSchema` instead. */
  export const inboundSchema = OpcUaLocalizedText$inboundSchema;
  /** @deprecated use `OpcUaLocalizedText$outboundSchema` instead. */
  export const outboundSchema = OpcUaLocalizedText$outboundSchema;
  /** @deprecated use `OpcUaLocalizedText$Outbound` instead. */
  export type Outbound = OpcUaLocalizedText$Outbound;
}

export function opcUaLocalizedTextToJSON(
  opcUaLocalizedText: OpcUaLocalizedText,
): string {
  return JSON.stringify(
    OpcUaLocalizedText$outboundSchema.parse(opcUaLocalizedText),
  );
}

export function opcUaLocalizedTextFromJSON(
  jsonString: string,
): SafeParseResult<OpcUaLocalizedText, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpcUaLocalizedText$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpcUaLocalizedText' from JSON`,
  );
}
