/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Ibmnje = {
  ohost?: string | undefined;
  oip?: string | undefined;
  reason?: number | undefined;
  rhost?: string | undefined;
  rip?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const Ibmnje$inboundSchema: z.ZodType<Ibmnje, z.ZodTypeDef, unknown> = z
  .object({
    ohost: z.string().optional(),
    oip: z.string().optional(),
    reason: z.number().int().optional(),
    rhost: z.string().optional(),
    rip: z.string().optional(),
    type: z.string().optional(),
  });

/** @internal */
export type Ibmnje$Outbound = {
  ohost?: string | undefined;
  oip?: string | undefined;
  reason?: number | undefined;
  rhost?: string | undefined;
  rip?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const Ibmnje$outboundSchema: z.ZodType<
  Ibmnje$Outbound,
  z.ZodTypeDef,
  Ibmnje
> = z.object({
  ohost: z.string().optional(),
  oip: z.string().optional(),
  reason: z.number().int().optional(),
  rhost: z.string().optional(),
  rip: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Ibmnje$ {
  /** @deprecated use `Ibmnje$inboundSchema` instead. */
  export const inboundSchema = Ibmnje$inboundSchema;
  /** @deprecated use `Ibmnje$outboundSchema` instead. */
  export const outboundSchema = Ibmnje$outboundSchema;
  /** @deprecated use `Ibmnje$Outbound` instead. */
  export type Outbound = Ibmnje$Outbound;
}

export function ibmnjeToJSON(ibmnje: Ibmnje): string {
  return JSON.stringify(Ibmnje$outboundSchema.parse(ibmnje));
}

export function ibmnjeFromJSON(
  jsonString: string,
): SafeParseResult<Ibmnje, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Ibmnje$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Ibmnje' from JSON`,
  );
}
