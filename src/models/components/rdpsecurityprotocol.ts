/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type RdpSecurityProtocol = {
  credssp?: boolean | undefined;
  credsspEarlyAuth?: boolean | undefined;
  error?: boolean | undefined;
  errorBadFlags?: boolean | undefined;
  errorHybridRequired?: boolean | undefined;
  errorSslCertMissing?: boolean | undefined;
  errorSslForbidden?: boolean | undefined;
  errorSslRequired?: boolean | undefined;
  errorSslUserAuthRequired?: boolean | undefined;
  errorUnknown?: boolean | undefined;
  rawValue?: number | undefined;
  rdstls?: boolean | undefined;
  standardRdp?: boolean | undefined;
  tls?: boolean | undefined;
};

/** @internal */
export const RdpSecurityProtocol$inboundSchema: z.ZodType<
  RdpSecurityProtocol,
  z.ZodTypeDef,
  unknown
> = z.object({
  credssp: z.boolean().optional(),
  credssp_early_auth: z.boolean().optional(),
  error: z.boolean().optional(),
  error_bad_flags: z.boolean().optional(),
  error_hybrid_required: z.boolean().optional(),
  error_ssl_cert_missing: z.boolean().optional(),
  error_ssl_forbidden: z.boolean().optional(),
  error_ssl_required: z.boolean().optional(),
  error_ssl_user_auth_required: z.boolean().optional(),
  error_unknown: z.boolean().optional(),
  raw_value: z.number().int().optional(),
  rdstls: z.boolean().optional(),
  standard_rdp: z.boolean().optional(),
  tls: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    "credssp_early_auth": "credsspEarlyAuth",
    "error_bad_flags": "errorBadFlags",
    "error_hybrid_required": "errorHybridRequired",
    "error_ssl_cert_missing": "errorSslCertMissing",
    "error_ssl_forbidden": "errorSslForbidden",
    "error_ssl_required": "errorSslRequired",
    "error_ssl_user_auth_required": "errorSslUserAuthRequired",
    "error_unknown": "errorUnknown",
    "raw_value": "rawValue",
    "standard_rdp": "standardRdp",
  });
});

/** @internal */
export type RdpSecurityProtocol$Outbound = {
  credssp?: boolean | undefined;
  credssp_early_auth?: boolean | undefined;
  error?: boolean | undefined;
  error_bad_flags?: boolean | undefined;
  error_hybrid_required?: boolean | undefined;
  error_ssl_cert_missing?: boolean | undefined;
  error_ssl_forbidden?: boolean | undefined;
  error_ssl_required?: boolean | undefined;
  error_ssl_user_auth_required?: boolean | undefined;
  error_unknown?: boolean | undefined;
  raw_value?: number | undefined;
  rdstls?: boolean | undefined;
  standard_rdp?: boolean | undefined;
  tls?: boolean | undefined;
};

/** @internal */
export const RdpSecurityProtocol$outboundSchema: z.ZodType<
  RdpSecurityProtocol$Outbound,
  z.ZodTypeDef,
  RdpSecurityProtocol
> = z.object({
  credssp: z.boolean().optional(),
  credsspEarlyAuth: z.boolean().optional(),
  error: z.boolean().optional(),
  errorBadFlags: z.boolean().optional(),
  errorHybridRequired: z.boolean().optional(),
  errorSslCertMissing: z.boolean().optional(),
  errorSslForbidden: z.boolean().optional(),
  errorSslRequired: z.boolean().optional(),
  errorSslUserAuthRequired: z.boolean().optional(),
  errorUnknown: z.boolean().optional(),
  rawValue: z.number().int().optional(),
  rdstls: z.boolean().optional(),
  standardRdp: z.boolean().optional(),
  tls: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    credsspEarlyAuth: "credssp_early_auth",
    errorBadFlags: "error_bad_flags",
    errorHybridRequired: "error_hybrid_required",
    errorSslCertMissing: "error_ssl_cert_missing",
    errorSslForbidden: "error_ssl_forbidden",
    errorSslRequired: "error_ssl_required",
    errorSslUserAuthRequired: "error_ssl_user_auth_required",
    errorUnknown: "error_unknown",
    rawValue: "raw_value",
    standardRdp: "standard_rdp",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RdpSecurityProtocol$ {
  /** @deprecated use `RdpSecurityProtocol$inboundSchema` instead. */
  export const inboundSchema = RdpSecurityProtocol$inboundSchema;
  /** @deprecated use `RdpSecurityProtocol$outboundSchema` instead. */
  export const outboundSchema = RdpSecurityProtocol$outboundSchema;
  /** @deprecated use `RdpSecurityProtocol$Outbound` instead. */
  export type Outbound = RdpSecurityProtocol$Outbound;
}

export function rdpSecurityProtocolToJSON(
  rdpSecurityProtocol: RdpSecurityProtocol,
): string {
  return JSON.stringify(
    RdpSecurityProtocol$outboundSchema.parse(rdpSecurityProtocol),
  );
}

export function rdpSecurityProtocolFromJSON(
  jsonString: string,
): SafeParseResult<RdpSecurityProtocol, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RdpSecurityProtocol$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RdpSecurityProtocol' from JSON`,
  );
}
