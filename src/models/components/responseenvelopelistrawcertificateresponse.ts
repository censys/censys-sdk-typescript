/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  RawCertificateResponse,
  RawCertificateResponse$inboundSchema,
  RawCertificateResponse$Outbound,
  RawCertificateResponse$outboundSchema,
} from "./rawcertificateresponse.js";

export type ResponseEnvelopeListRawCertificateResponse = {
  result?: Array<RawCertificateResponse> | null | undefined;
};

/** @internal */
export const ResponseEnvelopeListRawCertificateResponse$inboundSchema:
  z.ZodType<ResponseEnvelopeListRawCertificateResponse, z.ZodTypeDef, unknown> =
    z.object({
      result: z.nullable(z.array(RawCertificateResponse$inboundSchema))
        .optional(),
    });

/** @internal */
export type ResponseEnvelopeListRawCertificateResponse$Outbound = {
  result?: Array<RawCertificateResponse$Outbound> | null | undefined;
};

/** @internal */
export const ResponseEnvelopeListRawCertificateResponse$outboundSchema:
  z.ZodType<
    ResponseEnvelopeListRawCertificateResponse$Outbound,
    z.ZodTypeDef,
    ResponseEnvelopeListRawCertificateResponse
  > = z.object({
    result: z.nullable(z.array(RawCertificateResponse$outboundSchema))
      .optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseEnvelopeListRawCertificateResponse$ {
  /** @deprecated use `ResponseEnvelopeListRawCertificateResponse$inboundSchema` instead. */
  export const inboundSchema =
    ResponseEnvelopeListRawCertificateResponse$inboundSchema;
  /** @deprecated use `ResponseEnvelopeListRawCertificateResponse$outboundSchema` instead. */
  export const outboundSchema =
    ResponseEnvelopeListRawCertificateResponse$outboundSchema;
  /** @deprecated use `ResponseEnvelopeListRawCertificateResponse$Outbound` instead. */
  export type Outbound = ResponseEnvelopeListRawCertificateResponse$Outbound;
}

export function responseEnvelopeListRawCertificateResponseToJSON(
  responseEnvelopeListRawCertificateResponse:
    ResponseEnvelopeListRawCertificateResponse,
): string {
  return JSON.stringify(
    ResponseEnvelopeListRawCertificateResponse$outboundSchema.parse(
      responseEnvelopeListRawCertificateResponse,
    ),
  );
}

export function responseEnvelopeListRawCertificateResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  ResponseEnvelopeListRawCertificateResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ResponseEnvelopeListRawCertificateResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ResponseEnvelopeListRawCertificateResponse' from JSON`,
  );
}
