/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ThreatActor = {
  allNames?: Array<string> | null | undefined;
  id?: string | undefined;
  malpediaGroupId?: string | undefined;
  mitreGroupId?: string | undefined;
  primaryName?: string | undefined;
};

/** @internal */
export const ThreatActor$inboundSchema: z.ZodType<
  ThreatActor,
  z.ZodTypeDef,
  unknown
> = z.object({
  all_names: z.nullable(z.array(z.string())).optional(),
  id: z.string().optional(),
  malpedia_group_id: z.string().optional(),
  mitre_group_id: z.string().optional(),
  primary_name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "all_names": "allNames",
    "malpedia_group_id": "malpediaGroupId",
    "mitre_group_id": "mitreGroupId",
    "primary_name": "primaryName",
  });
});

/** @internal */
export type ThreatActor$Outbound = {
  all_names?: Array<string> | null | undefined;
  id?: string | undefined;
  malpedia_group_id?: string | undefined;
  mitre_group_id?: string | undefined;
  primary_name?: string | undefined;
};

/** @internal */
export const ThreatActor$outboundSchema: z.ZodType<
  ThreatActor$Outbound,
  z.ZodTypeDef,
  ThreatActor
> = z.object({
  allNames: z.nullable(z.array(z.string())).optional(),
  id: z.string().optional(),
  malpediaGroupId: z.string().optional(),
  mitreGroupId: z.string().optional(),
  primaryName: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    allNames: "all_names",
    malpediaGroupId: "malpedia_group_id",
    mitreGroupId: "mitre_group_id",
    primaryName: "primary_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ThreatActor$ {
  /** @deprecated use `ThreatActor$inboundSchema` instead. */
  export const inboundSchema = ThreatActor$inboundSchema;
  /** @deprecated use `ThreatActor$outboundSchema` instead. */
  export const outboundSchema = ThreatActor$outboundSchema;
  /** @deprecated use `ThreatActor$Outbound` instead. */
  export type Outbound = ThreatActor$Outbound;
}

export function threatActorToJSON(threatActor: ThreatActor): string {
  return JSON.stringify(ThreatActor$outboundSchema.parse(threatActor));
}

export function threatActorFromJSON(
  jsonString: string,
): SafeParseResult<ThreatActor, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ThreatActor$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ThreatActor' from JSON`,
  );
}
