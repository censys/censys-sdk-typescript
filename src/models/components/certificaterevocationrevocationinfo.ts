/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * An enumerated value indicating the issuer-supplied reason for the revocation.
 */
export const Reason = {
  Unknown: "unknown",
  Unspecified: "unspecified",
  KeyCompromise: "key_compromise",
  CaCompromise: "ca_compromise",
  AffiliationChanged: "affiliation_changed",
  Superseded: "superseded",
  CessationOfOperation: "cessation_of_operation",
  CertificateHold: "certificate_hold",
  RemoveFromCrl: "remove_from_crl",
  PrivilegeWithdrawn: "privilege_withdrawn",
  AaCompromise: "aa_compromise",
} as const;
/**
 * An enumerated value indicating the issuer-supplied reason for the revocation.
 */
export type Reason = ClosedEnum<typeof Reason>;

export type CertificateRevocationRevocationInfo = {
  nextUpdate?: string | undefined;
  /**
   * An enumerated value indicating the issuer-supplied reason for the revocation.
   */
  reason?: Reason | undefined;
  /**
   * The issuer-supplied timestamp indicating when the certificate was revoked.
   */
  revocationTime?: string | undefined;
  /**
   * Whether the certificate has been revoked before its expiry date by the issuer.
   */
  revoked?: boolean | undefined;
};

/** @internal */
export const Reason$inboundSchema: z.ZodNativeEnum<typeof Reason> = z
  .nativeEnum(Reason);

/** @internal */
export const Reason$outboundSchema: z.ZodNativeEnum<typeof Reason> =
  Reason$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Reason$ {
  /** @deprecated use `Reason$inboundSchema` instead. */
  export const inboundSchema = Reason$inboundSchema;
  /** @deprecated use `Reason$outboundSchema` instead. */
  export const outboundSchema = Reason$outboundSchema;
}

/** @internal */
export const CertificateRevocationRevocationInfo$inboundSchema: z.ZodType<
  CertificateRevocationRevocationInfo,
  z.ZodTypeDef,
  unknown
> = z.object({
  next_update: z.string().optional(),
  reason: Reason$inboundSchema.optional(),
  revocation_time: z.string().optional(),
  revoked: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    "next_update": "nextUpdate",
    "revocation_time": "revocationTime",
  });
});

/** @internal */
export type CertificateRevocationRevocationInfo$Outbound = {
  next_update?: string | undefined;
  reason?: string | undefined;
  revocation_time?: string | undefined;
  revoked?: boolean | undefined;
};

/** @internal */
export const CertificateRevocationRevocationInfo$outboundSchema: z.ZodType<
  CertificateRevocationRevocationInfo$Outbound,
  z.ZodTypeDef,
  CertificateRevocationRevocationInfo
> = z.object({
  nextUpdate: z.string().optional(),
  reason: Reason$outboundSchema.optional(),
  revocationTime: z.string().optional(),
  revoked: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    nextUpdate: "next_update",
    revocationTime: "revocation_time",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CertificateRevocationRevocationInfo$ {
  /** @deprecated use `CertificateRevocationRevocationInfo$inboundSchema` instead. */
  export const inboundSchema =
    CertificateRevocationRevocationInfo$inboundSchema;
  /** @deprecated use `CertificateRevocationRevocationInfo$outboundSchema` instead. */
  export const outboundSchema =
    CertificateRevocationRevocationInfo$outboundSchema;
  /** @deprecated use `CertificateRevocationRevocationInfo$Outbound` instead. */
  export type Outbound = CertificateRevocationRevocationInfo$Outbound;
}

export function certificateRevocationRevocationInfoToJSON(
  certificateRevocationRevocationInfo: CertificateRevocationRevocationInfo,
): string {
  return JSON.stringify(
    CertificateRevocationRevocationInfo$outboundSchema.parse(
      certificateRevocationRevocationInfo,
    ),
  );
}

export function certificateRevocationRevocationInfoFromJSON(
  jsonString: string,
): SafeParseResult<CertificateRevocationRevocationInfo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CertificateRevocationRevocationInfo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CertificateRevocationRevocationInfo' from JSON`,
  );
}
