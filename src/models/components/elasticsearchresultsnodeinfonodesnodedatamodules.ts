/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ElasticSearchResultsNodeInfoNodesNodeDataModules = {
  className?: string | undefined;
  desc?: string | undefined;
  elasticVersion?: string | undefined;
  extPlugins?: Array<string> | null | undefined;
  hasNativeCtrl?: boolean | undefined;
  javaVersion?: string | undefined;
  name?: string | undefined;
  version?: string | undefined;
};

/** @internal */
export const ElasticSearchResultsNodeInfoNodesNodeDataModules$inboundSchema:
  z.ZodType<
    ElasticSearchResultsNodeInfoNodesNodeDataModules,
    z.ZodTypeDef,
    unknown
  > = z.object({
    class_name: z.string().optional(),
    desc: z.string().optional(),
    elastic_version: z.string().optional(),
    ext_plugins: z.nullable(z.array(z.string())).optional(),
    has_native_ctrl: z.boolean().optional(),
    java_version: z.string().optional(),
    name: z.string().optional(),
    version: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "class_name": "className",
      "elastic_version": "elasticVersion",
      "ext_plugins": "extPlugins",
      "has_native_ctrl": "hasNativeCtrl",
      "java_version": "javaVersion",
    });
  });

/** @internal */
export type ElasticSearchResultsNodeInfoNodesNodeDataModules$Outbound = {
  class_name?: string | undefined;
  desc?: string | undefined;
  elastic_version?: string | undefined;
  ext_plugins?: Array<string> | null | undefined;
  has_native_ctrl?: boolean | undefined;
  java_version?: string | undefined;
  name?: string | undefined;
  version?: string | undefined;
};

/** @internal */
export const ElasticSearchResultsNodeInfoNodesNodeDataModules$outboundSchema:
  z.ZodType<
    ElasticSearchResultsNodeInfoNodesNodeDataModules$Outbound,
    z.ZodTypeDef,
    ElasticSearchResultsNodeInfoNodesNodeDataModules
  > = z.object({
    className: z.string().optional(),
    desc: z.string().optional(),
    elasticVersion: z.string().optional(),
    extPlugins: z.nullable(z.array(z.string())).optional(),
    hasNativeCtrl: z.boolean().optional(),
    javaVersion: z.string().optional(),
    name: z.string().optional(),
    version: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      className: "class_name",
      elasticVersion: "elastic_version",
      extPlugins: "ext_plugins",
      hasNativeCtrl: "has_native_ctrl",
      javaVersion: "java_version",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ElasticSearchResultsNodeInfoNodesNodeDataModules$ {
  /** @deprecated use `ElasticSearchResultsNodeInfoNodesNodeDataModules$inboundSchema` instead. */
  export const inboundSchema =
    ElasticSearchResultsNodeInfoNodesNodeDataModules$inboundSchema;
  /** @deprecated use `ElasticSearchResultsNodeInfoNodesNodeDataModules$outboundSchema` instead. */
  export const outboundSchema =
    ElasticSearchResultsNodeInfoNodesNodeDataModules$outboundSchema;
  /** @deprecated use `ElasticSearchResultsNodeInfoNodesNodeDataModules$Outbound` instead. */
  export type Outbound =
    ElasticSearchResultsNodeInfoNodesNodeDataModules$Outbound;
}

export function elasticSearchResultsNodeInfoNodesNodeDataModulesToJSON(
  elasticSearchResultsNodeInfoNodesNodeDataModules:
    ElasticSearchResultsNodeInfoNodesNodeDataModules,
): string {
  return JSON.stringify(
    ElasticSearchResultsNodeInfoNodesNodeDataModules$outboundSchema.parse(
      elasticSearchResultsNodeInfoNodesNodeDataModules,
    ),
  );
}

export function elasticSearchResultsNodeInfoNodesNodeDataModulesFromJSON(
  jsonString: string,
): SafeParseResult<
  ElasticSearchResultsNodeInfoNodesNodeDataModules,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ElasticSearchResultsNodeInfoNodesNodeDataModules$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ElasticSearchResultsNodeInfoNodesNodeDataModules' from JSON`,
  );
}
