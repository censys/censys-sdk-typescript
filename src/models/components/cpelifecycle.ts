/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CPELifeCycle = {
  endOfLife?: boolean | undefined;
  endOfLifeDate?: string | undefined;
  releaseDate?: string | undefined;
};

/** @internal */
export const CPELifeCycle$inboundSchema: z.ZodType<
  CPELifeCycle,
  z.ZodTypeDef,
  unknown
> = z.object({
  end_of_life: z.boolean().optional(),
  end_of_life_date: z.string().optional(),
  release_date: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "end_of_life": "endOfLife",
    "end_of_life_date": "endOfLifeDate",
    "release_date": "releaseDate",
  });
});

/** @internal */
export type CPELifeCycle$Outbound = {
  end_of_life?: boolean | undefined;
  end_of_life_date?: string | undefined;
  release_date?: string | undefined;
};

/** @internal */
export const CPELifeCycle$outboundSchema: z.ZodType<
  CPELifeCycle$Outbound,
  z.ZodTypeDef,
  CPELifeCycle
> = z.object({
  endOfLife: z.boolean().optional(),
  endOfLifeDate: z.string().optional(),
  releaseDate: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    endOfLife: "end_of_life",
    endOfLifeDate: "end_of_life_date",
    releaseDate: "release_date",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CPELifeCycle$ {
  /** @deprecated use `CPELifeCycle$inboundSchema` instead. */
  export const inboundSchema = CPELifeCycle$inboundSchema;
  /** @deprecated use `CPELifeCycle$outboundSchema` instead. */
  export const outboundSchema = CPELifeCycle$outboundSchema;
  /** @deprecated use `CPELifeCycle$Outbound` instead. */
  export type Outbound = CPELifeCycle$Outbound;
}

export function cpeLifeCycleToJSON(cpeLifeCycle: CPELifeCycle): string {
  return JSON.stringify(CPELifeCycle$outboundSchema.parse(cpeLifeCycle));
}

export function cpeLifeCycleFromJSON(
  jsonString: string,
): SafeParseResult<CPELifeCycle, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CPELifeCycle$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CPELifeCycle' from JSON`,
  );
}
