/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  CobaltStrikeHttpConfig,
  CobaltStrikeHttpConfig$inboundSchema,
  CobaltStrikeHttpConfig$Outbound,
  CobaltStrikeHttpConfig$outboundSchema,
} from "./cobaltstrikehttpconfig.js";
import {
  CobaltStrikePostEx,
  CobaltStrikePostEx$inboundSchema,
  CobaltStrikePostEx$Outbound,
  CobaltStrikePostEx$outboundSchema,
} from "./cobaltstrikepostex.js";

export type CobaltStrikeConfig = {
  cookieBeacon?: number | undefined;
  cryptoScheme?: number | undefined;
  dns?: boolean | undefined;
  httpGet?: CobaltStrikeHttpConfig | undefined;
  httpPost?: CobaltStrikeHttpConfig | undefined;
  jitter?: number | undefined;
  killdate?: number | undefined;
  postEx?: CobaltStrikePostEx | undefined;
  publicKey?: string | undefined;
  sleepTime?: number | undefined;
  ssl?: boolean | undefined;
  unknownBytes?: { [k: string]: string | null } | undefined;
  unknownInt?: { [k: string]: number } | undefined;
  userAgent?: string | undefined;
  watermark?: number | undefined;
};

/** @internal */
export const CobaltStrikeConfig$inboundSchema: z.ZodType<
  CobaltStrikeConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  cookie_beacon: z.number().int().optional(),
  crypto_scheme: z.number().int().optional(),
  dns: z.boolean().optional(),
  http_get: CobaltStrikeHttpConfig$inboundSchema.optional(),
  http_post: CobaltStrikeHttpConfig$inboundSchema.optional(),
  jitter: z.number().int().optional(),
  killdate: z.number().int().optional(),
  post_ex: CobaltStrikePostEx$inboundSchema.optional(),
  public_key: z.string().optional(),
  sleep_time: z.number().int().optional(),
  ssl: z.boolean().optional(),
  unknown_bytes: z.record(z.nullable(z.string())).optional(),
  unknown_int: z.record(z.number().int()).optional(),
  user_agent: z.string().optional(),
  watermark: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "cookie_beacon": "cookieBeacon",
    "crypto_scheme": "cryptoScheme",
    "http_get": "httpGet",
    "http_post": "httpPost",
    "post_ex": "postEx",
    "public_key": "publicKey",
    "sleep_time": "sleepTime",
    "unknown_bytes": "unknownBytes",
    "unknown_int": "unknownInt",
    "user_agent": "userAgent",
  });
});

/** @internal */
export type CobaltStrikeConfig$Outbound = {
  cookie_beacon?: number | undefined;
  crypto_scheme?: number | undefined;
  dns?: boolean | undefined;
  http_get?: CobaltStrikeHttpConfig$Outbound | undefined;
  http_post?: CobaltStrikeHttpConfig$Outbound | undefined;
  jitter?: number | undefined;
  killdate?: number | undefined;
  post_ex?: CobaltStrikePostEx$Outbound | undefined;
  public_key?: string | undefined;
  sleep_time?: number | undefined;
  ssl?: boolean | undefined;
  unknown_bytes?: { [k: string]: string | null } | undefined;
  unknown_int?: { [k: string]: number } | undefined;
  user_agent?: string | undefined;
  watermark?: number | undefined;
};

/** @internal */
export const CobaltStrikeConfig$outboundSchema: z.ZodType<
  CobaltStrikeConfig$Outbound,
  z.ZodTypeDef,
  CobaltStrikeConfig
> = z.object({
  cookieBeacon: z.number().int().optional(),
  cryptoScheme: z.number().int().optional(),
  dns: z.boolean().optional(),
  httpGet: CobaltStrikeHttpConfig$outboundSchema.optional(),
  httpPost: CobaltStrikeHttpConfig$outboundSchema.optional(),
  jitter: z.number().int().optional(),
  killdate: z.number().int().optional(),
  postEx: CobaltStrikePostEx$outboundSchema.optional(),
  publicKey: z.string().optional(),
  sleepTime: z.number().int().optional(),
  ssl: z.boolean().optional(),
  unknownBytes: z.record(z.nullable(z.string())).optional(),
  unknownInt: z.record(z.number().int()).optional(),
  userAgent: z.string().optional(),
  watermark: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    cookieBeacon: "cookie_beacon",
    cryptoScheme: "crypto_scheme",
    httpGet: "http_get",
    httpPost: "http_post",
    postEx: "post_ex",
    publicKey: "public_key",
    sleepTime: "sleep_time",
    unknownBytes: "unknown_bytes",
    unknownInt: "unknown_int",
    userAgent: "user_agent",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CobaltStrikeConfig$ {
  /** @deprecated use `CobaltStrikeConfig$inboundSchema` instead. */
  export const inboundSchema = CobaltStrikeConfig$inboundSchema;
  /** @deprecated use `CobaltStrikeConfig$outboundSchema` instead. */
  export const outboundSchema = CobaltStrikeConfig$outboundSchema;
  /** @deprecated use `CobaltStrikeConfig$Outbound` instead. */
  export type Outbound = CobaltStrikeConfig$Outbound;
}

export function cobaltStrikeConfigToJSON(
  cobaltStrikeConfig: CobaltStrikeConfig,
): string {
  return JSON.stringify(
    CobaltStrikeConfig$outboundSchema.parse(cobaltStrikeConfig),
  );
}

export function cobaltStrikeConfigFromJSON(
  jsonString: string,
): SafeParseResult<CobaltStrikeConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CobaltStrikeConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CobaltStrikeConfig' from JSON`,
  );
}
