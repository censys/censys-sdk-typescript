/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  TlsChain,
  TlsChain$inboundSchema,
  TlsChain$Outbound,
  TlsChain$outboundSchema,
} from "./tlschain.js";
import {
  TlsVersionData,
  TlsVersionData$inboundSchema,
  TlsVersionData$Outbound,
  TlsVersionData$outboundSchema,
} from "./tlsversiondata.js";

/**
 * Certificate version v1(0), v2(1), v3(2).
 */
export const VersionSelected = {
  Unknown: "",
  SsLv2: "ss_lv_2",
  SsLv3: "ss_lv_3",
  Tlsv10: "tlsv1_0",
  Tlsv11: "tlsv1_1",
  Tlsv12: "tlsv1_2",
  Tlsv13: "tlsv1_3",
  Dtlsv10: "dtlsv1_0",
  Dtlsv12: "dtlsv1_2",
  Dtlsv13: "dtlsv1_3",
} as const;
/**
 * Certificate version v1(0), v2(1), v3(2).
 */
export type VersionSelected = ClosedEnum<typeof VersionSelected>;

export type Tls = {
  /**
   * Cipher suite chosen for the exchange.
   */
  cipherSelected?: string | undefined;
  /**
   * The SHA-256 digest of the entire raw certificate. Its unique identifier, which Censys uses to index certificates records.
   */
  fingerprintSha256?: string | undefined;
  /**
   * The JA3S fingerprint for this service.
   */
  ja3s?: string | undefined;
  ja4s?: string | undefined;
  /**
   * Certificate chain information.
   */
  presentedChain?: Array<TlsChain> | null | undefined;
  /**
   * Certificate version v1(0), v2(1), v3(2).
   */
  versionSelected?: VersionSelected | undefined;
  versions?: Array<TlsVersionData> | null | undefined;
};

/** @internal */
export const VersionSelected$inboundSchema: z.ZodNativeEnum<
  typeof VersionSelected
> = z.nativeEnum(VersionSelected);

/** @internal */
export const VersionSelected$outboundSchema: z.ZodNativeEnum<
  typeof VersionSelected
> = VersionSelected$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VersionSelected$ {
  /** @deprecated use `VersionSelected$inboundSchema` instead. */
  export const inboundSchema = VersionSelected$inboundSchema;
  /** @deprecated use `VersionSelected$outboundSchema` instead. */
  export const outboundSchema = VersionSelected$outboundSchema;
}

/** @internal */
export const Tls$inboundSchema: z.ZodType<Tls, z.ZodTypeDef, unknown> = z
  .object({
    cipher_selected: z.string().optional(),
    fingerprint_sha256: z.string().optional(),
    ja3s: z.string().optional(),
    ja4s: z.string().optional(),
    presented_chain: z.nullable(z.array(TlsChain$inboundSchema)).optional(),
    version_selected: VersionSelected$inboundSchema.optional(),
    versions: z.nullable(z.array(TlsVersionData$inboundSchema)).optional(),
  }).transform((v) => {
    return remap$(v, {
      "cipher_selected": "cipherSelected",
      "fingerprint_sha256": "fingerprintSha256",
      "presented_chain": "presentedChain",
      "version_selected": "versionSelected",
    });
  });

/** @internal */
export type Tls$Outbound = {
  cipher_selected?: string | undefined;
  fingerprint_sha256?: string | undefined;
  ja3s?: string | undefined;
  ja4s?: string | undefined;
  presented_chain?: Array<TlsChain$Outbound> | null | undefined;
  version_selected?: string | undefined;
  versions?: Array<TlsVersionData$Outbound> | null | undefined;
};

/** @internal */
export const Tls$outboundSchema: z.ZodType<Tls$Outbound, z.ZodTypeDef, Tls> = z
  .object({
    cipherSelected: z.string().optional(),
    fingerprintSha256: z.string().optional(),
    ja3s: z.string().optional(),
    ja4s: z.string().optional(),
    presentedChain: z.nullable(z.array(TlsChain$outboundSchema)).optional(),
    versionSelected: VersionSelected$outboundSchema.optional(),
    versions: z.nullable(z.array(TlsVersionData$outboundSchema)).optional(),
  }).transform((v) => {
    return remap$(v, {
      cipherSelected: "cipher_selected",
      fingerprintSha256: "fingerprint_sha256",
      presentedChain: "presented_chain",
      versionSelected: "version_selected",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Tls$ {
  /** @deprecated use `Tls$inboundSchema` instead. */
  export const inboundSchema = Tls$inboundSchema;
  /** @deprecated use `Tls$outboundSchema` instead. */
  export const outboundSchema = Tls$outboundSchema;
  /** @deprecated use `Tls$Outbound` instead. */
  export type Outbound = Tls$Outbound;
}

export function tlsToJSON(tls: Tls): string {
  return JSON.stringify(Tls$outboundSchema.parse(tls));
}

export function tlsFromJSON(
  jsonString: string,
): SafeParseResult<Tls, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Tls$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Tls' from JSON`,
  );
}
