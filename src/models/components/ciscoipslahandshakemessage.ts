/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CiscoIpslaHandshakeMessage = {
  ip?: string | undefined;
  length?: number | undefined;
  port?: number | undefined;
  type?: number | undefined;
};

/** @internal */
export const CiscoIpslaHandshakeMessage$inboundSchema: z.ZodType<
  CiscoIpslaHandshakeMessage,
  z.ZodTypeDef,
  unknown
> = z.object({
  ip: z.string().optional(),
  length: z.number().int().optional(),
  port: z.number().int().optional(),
  type: z.number().int().optional(),
});

/** @internal */
export type CiscoIpslaHandshakeMessage$Outbound = {
  ip?: string | undefined;
  length?: number | undefined;
  port?: number | undefined;
  type?: number | undefined;
};

/** @internal */
export const CiscoIpslaHandshakeMessage$outboundSchema: z.ZodType<
  CiscoIpslaHandshakeMessage$Outbound,
  z.ZodTypeDef,
  CiscoIpslaHandshakeMessage
> = z.object({
  ip: z.string().optional(),
  length: z.number().int().optional(),
  port: z.number().int().optional(),
  type: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CiscoIpslaHandshakeMessage$ {
  /** @deprecated use `CiscoIpslaHandshakeMessage$inboundSchema` instead. */
  export const inboundSchema = CiscoIpslaHandshakeMessage$inboundSchema;
  /** @deprecated use `CiscoIpslaHandshakeMessage$outboundSchema` instead. */
  export const outboundSchema = CiscoIpslaHandshakeMessage$outboundSchema;
  /** @deprecated use `CiscoIpslaHandshakeMessage$Outbound` instead. */
  export type Outbound = CiscoIpslaHandshakeMessage$Outbound;
}

export function ciscoIpslaHandshakeMessageToJSON(
  ciscoIpslaHandshakeMessage: CiscoIpslaHandshakeMessage,
): string {
  return JSON.stringify(
    CiscoIpslaHandshakeMessage$outboundSchema.parse(ciscoIpslaHandshakeMessage),
  );
}

export function ciscoIpslaHandshakeMessageFromJSON(
  jsonString: string,
): SafeParseResult<CiscoIpslaHandshakeMessage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CiscoIpslaHandshakeMessage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CiscoIpslaHandshakeMessage' from JSON`,
  );
}
