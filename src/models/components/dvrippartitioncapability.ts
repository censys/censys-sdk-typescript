/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DvrIpPartitionCapability = {
  maxPartitionNumber?: number | undefined;
  supported?: boolean | undefined;
};

/** @internal */
export const DvrIpPartitionCapability$inboundSchema: z.ZodType<
  DvrIpPartitionCapability,
  z.ZodTypeDef,
  unknown
> = z.object({
  max_partition_number: z.number().int().optional(),
  supported: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    "max_partition_number": "maxPartitionNumber",
  });
});

/** @internal */
export type DvrIpPartitionCapability$Outbound = {
  max_partition_number?: number | undefined;
  supported?: boolean | undefined;
};

/** @internal */
export const DvrIpPartitionCapability$outboundSchema: z.ZodType<
  DvrIpPartitionCapability$Outbound,
  z.ZodTypeDef,
  DvrIpPartitionCapability
> = z.object({
  maxPartitionNumber: z.number().int().optional(),
  supported: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    maxPartitionNumber: "max_partition_number",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DvrIpPartitionCapability$ {
  /** @deprecated use `DvrIpPartitionCapability$inboundSchema` instead. */
  export const inboundSchema = DvrIpPartitionCapability$inboundSchema;
  /** @deprecated use `DvrIpPartitionCapability$outboundSchema` instead. */
  export const outboundSchema = DvrIpPartitionCapability$outboundSchema;
  /** @deprecated use `DvrIpPartitionCapability$Outbound` instead. */
  export type Outbound = DvrIpPartitionCapability$Outbound;
}

export function dvrIpPartitionCapabilityToJSON(
  dvrIpPartitionCapability: DvrIpPartitionCapability,
): string {
  return JSON.stringify(
    DvrIpPartitionCapability$outboundSchema.parse(dvrIpPartitionCapability),
  );
}

export function dvrIpPartitionCapabilityFromJSON(
  jsonString: string,
): SafeParseResult<DvrIpPartitionCapability, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DvrIpPartitionCapability$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DvrIpPartitionCapability' from JSON`,
  );
}
