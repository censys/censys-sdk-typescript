/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type TargetWebOrigin = {
  /**
   * Hostname of the web origin
   */
  hostname: string;
  /**
   * Port number of the web origin
   */
  port: number;
};

/**
 * Rescan of known web property
 */
export type Two = {
  webOrigin: TargetWebOrigin;
};

export const TargetTransportProtocol = {
  Unknown: "unknown",
  Tcp: "tcp",
  Udp: "udp",
  Icmp: "icmp",
  Quic: "quic",
} as const;
export type TargetTransportProtocol = ClosedEnum<
  typeof TargetTransportProtocol
>;

export type TargetServiceId = {
  /**
   * IP address of service
   */
  ip: string;
  /**
   * Port number of service
   */
  port: number;
  /**
   * Name of service protocol
   */
  protocol: string;
  transportProtocol: TargetTransportProtocol;
};

/**
 * Rescan of known service
 */
export type One = {
  serviceId: TargetServiceId;
};

export type ScansRescanInputBodyTarget = One | Two;

export type ScansRescanInputBody = {
  target: One | Two;
};

/** @internal */
export const TargetWebOrigin$inboundSchema: z.ZodType<
  TargetWebOrigin,
  z.ZodTypeDef,
  unknown
> = z.object({
  hostname: z.string(),
  port: z.number().int(),
});

/** @internal */
export type TargetWebOrigin$Outbound = {
  hostname: string;
  port: number;
};

/** @internal */
export const TargetWebOrigin$outboundSchema: z.ZodType<
  TargetWebOrigin$Outbound,
  z.ZodTypeDef,
  TargetWebOrigin
> = z.object({
  hostname: z.string(),
  port: z.number().int(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TargetWebOrigin$ {
  /** @deprecated use `TargetWebOrigin$inboundSchema` instead. */
  export const inboundSchema = TargetWebOrigin$inboundSchema;
  /** @deprecated use `TargetWebOrigin$outboundSchema` instead. */
  export const outboundSchema = TargetWebOrigin$outboundSchema;
  /** @deprecated use `TargetWebOrigin$Outbound` instead. */
  export type Outbound = TargetWebOrigin$Outbound;
}

export function targetWebOriginToJSON(
  targetWebOrigin: TargetWebOrigin,
): string {
  return JSON.stringify(TargetWebOrigin$outboundSchema.parse(targetWebOrigin));
}

export function targetWebOriginFromJSON(
  jsonString: string,
): SafeParseResult<TargetWebOrigin, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TargetWebOrigin$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TargetWebOrigin' from JSON`,
  );
}

/** @internal */
export const Two$inboundSchema: z.ZodType<Two, z.ZodTypeDef, unknown> = z
  .object({
    web_origin: z.lazy(() => TargetWebOrigin$inboundSchema),
  }).transform((v) => {
    return remap$(v, {
      "web_origin": "webOrigin",
    });
  });

/** @internal */
export type Two$Outbound = {
  web_origin: TargetWebOrigin$Outbound;
};

/** @internal */
export const Two$outboundSchema: z.ZodType<Two$Outbound, z.ZodTypeDef, Two> = z
  .object({
    webOrigin: z.lazy(() => TargetWebOrigin$outboundSchema),
  }).transform((v) => {
    return remap$(v, {
      webOrigin: "web_origin",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Two$ {
  /** @deprecated use `Two$inboundSchema` instead. */
  export const inboundSchema = Two$inboundSchema;
  /** @deprecated use `Two$outboundSchema` instead. */
  export const outboundSchema = Two$outboundSchema;
  /** @deprecated use `Two$Outbound` instead. */
  export type Outbound = Two$Outbound;
}

export function twoToJSON(two: Two): string {
  return JSON.stringify(Two$outboundSchema.parse(two));
}

export function twoFromJSON(
  jsonString: string,
): SafeParseResult<Two, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Two$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Two' from JSON`,
  );
}

/** @internal */
export const TargetTransportProtocol$inboundSchema: z.ZodNativeEnum<
  typeof TargetTransportProtocol
> = z.nativeEnum(TargetTransportProtocol);

/** @internal */
export const TargetTransportProtocol$outboundSchema: z.ZodNativeEnum<
  typeof TargetTransportProtocol
> = TargetTransportProtocol$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TargetTransportProtocol$ {
  /** @deprecated use `TargetTransportProtocol$inboundSchema` instead. */
  export const inboundSchema = TargetTransportProtocol$inboundSchema;
  /** @deprecated use `TargetTransportProtocol$outboundSchema` instead. */
  export const outboundSchema = TargetTransportProtocol$outboundSchema;
}

/** @internal */
export const TargetServiceId$inboundSchema: z.ZodType<
  TargetServiceId,
  z.ZodTypeDef,
  unknown
> = z.object({
  ip: z.string(),
  port: z.number().int(),
  protocol: z.string(),
  transport_protocol: TargetTransportProtocol$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "transport_protocol": "transportProtocol",
  });
});

/** @internal */
export type TargetServiceId$Outbound = {
  ip: string;
  port: number;
  protocol: string;
  transport_protocol: string;
};

/** @internal */
export const TargetServiceId$outboundSchema: z.ZodType<
  TargetServiceId$Outbound,
  z.ZodTypeDef,
  TargetServiceId
> = z.object({
  ip: z.string(),
  port: z.number().int(),
  protocol: z.string(),
  transportProtocol: TargetTransportProtocol$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    transportProtocol: "transport_protocol",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TargetServiceId$ {
  /** @deprecated use `TargetServiceId$inboundSchema` instead. */
  export const inboundSchema = TargetServiceId$inboundSchema;
  /** @deprecated use `TargetServiceId$outboundSchema` instead. */
  export const outboundSchema = TargetServiceId$outboundSchema;
  /** @deprecated use `TargetServiceId$Outbound` instead. */
  export type Outbound = TargetServiceId$Outbound;
}

export function targetServiceIdToJSON(
  targetServiceId: TargetServiceId,
): string {
  return JSON.stringify(TargetServiceId$outboundSchema.parse(targetServiceId));
}

export function targetServiceIdFromJSON(
  jsonString: string,
): SafeParseResult<TargetServiceId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TargetServiceId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TargetServiceId' from JSON`,
  );
}

/** @internal */
export const One$inboundSchema: z.ZodType<One, z.ZodTypeDef, unknown> = z
  .object({
    service_id: z.lazy(() => TargetServiceId$inboundSchema),
  }).transform((v) => {
    return remap$(v, {
      "service_id": "serviceId",
    });
  });

/** @internal */
export type One$Outbound = {
  service_id: TargetServiceId$Outbound;
};

/** @internal */
export const One$outboundSchema: z.ZodType<One$Outbound, z.ZodTypeDef, One> = z
  .object({
    serviceId: z.lazy(() => TargetServiceId$outboundSchema),
  }).transform((v) => {
    return remap$(v, {
      serviceId: "service_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace One$ {
  /** @deprecated use `One$inboundSchema` instead. */
  export const inboundSchema = One$inboundSchema;
  /** @deprecated use `One$outboundSchema` instead. */
  export const outboundSchema = One$outboundSchema;
  /** @deprecated use `One$Outbound` instead. */
  export type Outbound = One$Outbound;
}

export function oneToJSON(one: One): string {
  return JSON.stringify(One$outboundSchema.parse(one));
}

export function oneFromJSON(
  jsonString: string,
): SafeParseResult<One, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => One$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'One' from JSON`,
  );
}

/** @internal */
export const ScansRescanInputBodyTarget$inboundSchema: z.ZodType<
  ScansRescanInputBodyTarget,
  z.ZodTypeDef,
  unknown
> = z.union([z.lazy(() => One$inboundSchema), z.lazy(() => Two$inboundSchema)]);

/** @internal */
export type ScansRescanInputBodyTarget$Outbound = One$Outbound | Two$Outbound;

/** @internal */
export const ScansRescanInputBodyTarget$outboundSchema: z.ZodType<
  ScansRescanInputBodyTarget$Outbound,
  z.ZodTypeDef,
  ScansRescanInputBodyTarget
> = z.union([
  z.lazy(() => One$outboundSchema),
  z.lazy(() => Two$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ScansRescanInputBodyTarget$ {
  /** @deprecated use `ScansRescanInputBodyTarget$inboundSchema` instead. */
  export const inboundSchema = ScansRescanInputBodyTarget$inboundSchema;
  /** @deprecated use `ScansRescanInputBodyTarget$outboundSchema` instead. */
  export const outboundSchema = ScansRescanInputBodyTarget$outboundSchema;
  /** @deprecated use `ScansRescanInputBodyTarget$Outbound` instead. */
  export type Outbound = ScansRescanInputBodyTarget$Outbound;
}

export function scansRescanInputBodyTargetToJSON(
  scansRescanInputBodyTarget: ScansRescanInputBodyTarget,
): string {
  return JSON.stringify(
    ScansRescanInputBodyTarget$outboundSchema.parse(scansRescanInputBodyTarget),
  );
}

export function scansRescanInputBodyTargetFromJSON(
  jsonString: string,
): SafeParseResult<ScansRescanInputBodyTarget, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ScansRescanInputBodyTarget$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ScansRescanInputBodyTarget' from JSON`,
  );
}

/** @internal */
export const ScansRescanInputBody$inboundSchema: z.ZodType<
  ScansRescanInputBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  target: z.union([
    z.lazy(() => One$inboundSchema),
    z.lazy(() => Two$inboundSchema),
  ]),
});

/** @internal */
export type ScansRescanInputBody$Outbound = {
  target: One$Outbound | Two$Outbound;
};

/** @internal */
export const ScansRescanInputBody$outboundSchema: z.ZodType<
  ScansRescanInputBody$Outbound,
  z.ZodTypeDef,
  ScansRescanInputBody
> = z.object({
  target: z.union([
    z.lazy(() => One$outboundSchema),
    z.lazy(() => Two$outboundSchema),
  ]),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ScansRescanInputBody$ {
  /** @deprecated use `ScansRescanInputBody$inboundSchema` instead. */
  export const inboundSchema = ScansRescanInputBody$inboundSchema;
  /** @deprecated use `ScansRescanInputBody$outboundSchema` instead. */
  export const outboundSchema = ScansRescanInputBody$outboundSchema;
  /** @deprecated use `ScansRescanInputBody$Outbound` instead. */
  export type Outbound = ScansRescanInputBody$Outbound;
}

export function scansRescanInputBodyToJSON(
  scansRescanInputBody: ScansRescanInputBody,
): string {
  return JSON.stringify(
    ScansRescanInputBody$outboundSchema.parse(scansRescanInputBody),
  );
}

export function scansRescanInputBodyFromJSON(
  jsonString: string,
): SafeParseResult<ScansRescanInputBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ScansRescanInputBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ScansRescanInputBody' from JSON`,
  );
}
