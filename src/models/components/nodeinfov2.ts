/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type NodeInfoV2 = {
  decimals?: number | undefined;
  features?: Array<string> | null | undefined;
  isHealthy?: boolean | undefined;
  latestMilestone?: number | undefined;
  latestUncommittedMilestone?: number | undefined;
  name?: string | undefined;
  networkName?: string | undefined;
  protocolVersion?: number | undefined;
  subunit?: string | undefined;
  supportedProtocolVersions?: Array<number> | null | undefined;
  tickerSymbol?: string | undefined;
  tokenName?: string | undefined;
  tokenSupply?: string | undefined;
  unit?: string | undefined;
  version?: string | undefined;
};

/** @internal */
export const NodeInfoV2$inboundSchema: z.ZodType<
  NodeInfoV2,
  z.ZodTypeDef,
  unknown
> = z.object({
  decimals: z.number().int().optional(),
  features: z.nullable(z.array(z.string())).optional(),
  is_healthy: z.boolean().optional(),
  latest_milestone: z.number().int().optional(),
  latest_uncommitted_milestone: z.number().int().optional(),
  name: z.string().optional(),
  network_name: z.string().optional(),
  protocol_version: z.number().int().optional(),
  subunit: z.string().optional(),
  supported_protocol_versions: z.nullable(z.array(z.number().int())).optional(),
  ticker_symbol: z.string().optional(),
  token_name: z.string().optional(),
  token_supply: z.string().optional(),
  unit: z.string().optional(),
  version: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "is_healthy": "isHealthy",
    "latest_milestone": "latestMilestone",
    "latest_uncommitted_milestone": "latestUncommittedMilestone",
    "network_name": "networkName",
    "protocol_version": "protocolVersion",
    "supported_protocol_versions": "supportedProtocolVersions",
    "ticker_symbol": "tickerSymbol",
    "token_name": "tokenName",
    "token_supply": "tokenSupply",
  });
});

/** @internal */
export type NodeInfoV2$Outbound = {
  decimals?: number | undefined;
  features?: Array<string> | null | undefined;
  is_healthy?: boolean | undefined;
  latest_milestone?: number | undefined;
  latest_uncommitted_milestone?: number | undefined;
  name?: string | undefined;
  network_name?: string | undefined;
  protocol_version?: number | undefined;
  subunit?: string | undefined;
  supported_protocol_versions?: Array<number> | null | undefined;
  ticker_symbol?: string | undefined;
  token_name?: string | undefined;
  token_supply?: string | undefined;
  unit?: string | undefined;
  version?: string | undefined;
};

/** @internal */
export const NodeInfoV2$outboundSchema: z.ZodType<
  NodeInfoV2$Outbound,
  z.ZodTypeDef,
  NodeInfoV2
> = z.object({
  decimals: z.number().int().optional(),
  features: z.nullable(z.array(z.string())).optional(),
  isHealthy: z.boolean().optional(),
  latestMilestone: z.number().int().optional(),
  latestUncommittedMilestone: z.number().int().optional(),
  name: z.string().optional(),
  networkName: z.string().optional(),
  protocolVersion: z.number().int().optional(),
  subunit: z.string().optional(),
  supportedProtocolVersions: z.nullable(z.array(z.number().int())).optional(),
  tickerSymbol: z.string().optional(),
  tokenName: z.string().optional(),
  tokenSupply: z.string().optional(),
  unit: z.string().optional(),
  version: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    isHealthy: "is_healthy",
    latestMilestone: "latest_milestone",
    latestUncommittedMilestone: "latest_uncommitted_milestone",
    networkName: "network_name",
    protocolVersion: "protocol_version",
    supportedProtocolVersions: "supported_protocol_versions",
    tickerSymbol: "ticker_symbol",
    tokenName: "token_name",
    tokenSupply: "token_supply",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NodeInfoV2$ {
  /** @deprecated use `NodeInfoV2$inboundSchema` instead. */
  export const inboundSchema = NodeInfoV2$inboundSchema;
  /** @deprecated use `NodeInfoV2$outboundSchema` instead. */
  export const outboundSchema = NodeInfoV2$outboundSchema;
  /** @deprecated use `NodeInfoV2$Outbound` instead. */
  export type Outbound = NodeInfoV2$Outbound;
}

export function nodeInfoV2ToJSON(nodeInfoV2: NodeInfoV2): string {
  return JSON.stringify(NodeInfoV2$outboundSchema.parse(nodeInfoV2));
}

export function nodeInfoV2FromJSON(
  jsonString: string,
): SafeParseResult<NodeInfoV2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NodeInfoV2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NodeInfoV2' from JSON`,
  );
}
