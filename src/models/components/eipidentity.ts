/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type EipIdentity = {
  deviceType?: string | undefined;
  deviceTypeCode?: number | undefined;
  productCode?: number | undefined;
  productName?: string | undefined;
  revision?: string | undefined;
  serialNumber?: number | undefined;
  socketAddr?: string | undefined;
  socketPort?: number | undefined;
  state?: number | undefined;
  status?: number | undefined;
  vendorId?: string | undefined;
  vendorName?: string | undefined;
};

/** @internal */
export const EipIdentity$inboundSchema: z.ZodType<
  EipIdentity,
  z.ZodTypeDef,
  unknown
> = z.object({
  device_type: z.string().optional(),
  device_type_code: z.number().int().optional(),
  product_code: z.number().int().optional(),
  product_name: z.string().optional(),
  revision: z.string().optional(),
  serial_number: z.number().int().optional(),
  socket_addr: z.string().optional(),
  socket_port: z.number().int().optional(),
  state: z.number().int().optional(),
  status: z.number().int().optional(),
  vendor_id: z.string().optional(),
  vendor_name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "device_type": "deviceType",
    "device_type_code": "deviceTypeCode",
    "product_code": "productCode",
    "product_name": "productName",
    "serial_number": "serialNumber",
    "socket_addr": "socketAddr",
    "socket_port": "socketPort",
    "vendor_id": "vendorId",
    "vendor_name": "vendorName",
  });
});

/** @internal */
export type EipIdentity$Outbound = {
  device_type?: string | undefined;
  device_type_code?: number | undefined;
  product_code?: number | undefined;
  product_name?: string | undefined;
  revision?: string | undefined;
  serial_number?: number | undefined;
  socket_addr?: string | undefined;
  socket_port?: number | undefined;
  state?: number | undefined;
  status?: number | undefined;
  vendor_id?: string | undefined;
  vendor_name?: string | undefined;
};

/** @internal */
export const EipIdentity$outboundSchema: z.ZodType<
  EipIdentity$Outbound,
  z.ZodTypeDef,
  EipIdentity
> = z.object({
  deviceType: z.string().optional(),
  deviceTypeCode: z.number().int().optional(),
  productCode: z.number().int().optional(),
  productName: z.string().optional(),
  revision: z.string().optional(),
  serialNumber: z.number().int().optional(),
  socketAddr: z.string().optional(),
  socketPort: z.number().int().optional(),
  state: z.number().int().optional(),
  status: z.number().int().optional(),
  vendorId: z.string().optional(),
  vendorName: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    deviceType: "device_type",
    deviceTypeCode: "device_type_code",
    productCode: "product_code",
    productName: "product_name",
    serialNumber: "serial_number",
    socketAddr: "socket_addr",
    socketPort: "socket_port",
    vendorId: "vendor_id",
    vendorName: "vendor_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EipIdentity$ {
  /** @deprecated use `EipIdentity$inboundSchema` instead. */
  export const inboundSchema = EipIdentity$inboundSchema;
  /** @deprecated use `EipIdentity$outboundSchema` instead. */
  export const outboundSchema = EipIdentity$outboundSchema;
  /** @deprecated use `EipIdentity$Outbound` instead. */
  export type Outbound = EipIdentity$Outbound;
}

export function eipIdentityToJSON(eipIdentity: EipIdentity): string {
  return JSON.stringify(EipIdentity$outboundSchema.parse(eipIdentity));
}

export function eipIdentityFromJSON(
  jsonString: string,
): SafeParseResult<EipIdentity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EipIdentity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EipIdentity' from JSON`,
  );
}
