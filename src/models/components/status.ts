/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Status = {
  availableWorkers?: number | undefined;
  function?: string | undefined;
  running?: number | undefined;
  total?: number | undefined;
};

/** @internal */
export const Status$inboundSchema: z.ZodType<Status, z.ZodTypeDef, unknown> = z
  .object({
    available_workers: z.number().int().optional(),
    function: z.string().optional(),
    running: z.number().int().optional(),
    total: z.number().int().optional(),
  }).transform((v) => {
    return remap$(v, {
      "available_workers": "availableWorkers",
    });
  });

/** @internal */
export type Status$Outbound = {
  available_workers?: number | undefined;
  function?: string | undefined;
  running?: number | undefined;
  total?: number | undefined;
};

/** @internal */
export const Status$outboundSchema: z.ZodType<
  Status$Outbound,
  z.ZodTypeDef,
  Status
> = z.object({
  availableWorkers: z.number().int().optional(),
  function: z.string().optional(),
  running: z.number().int().optional(),
  total: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    availableWorkers: "available_workers",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Status$ {
  /** @deprecated use `Status$inboundSchema` instead. */
  export const inboundSchema = Status$inboundSchema;
  /** @deprecated use `Status$outboundSchema` instead. */
  export const outboundSchema = Status$outboundSchema;
  /** @deprecated use `Status$Outbound` instead. */
  export type Outbound = Status$Outbound;
}

export function statusToJSON(status: Status): string {
  return JSON.stringify(Status$outboundSchema.parse(status));
}

export function statusFromJSON(
  jsonString: string,
): SafeParseResult<Status, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Status$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Status' from JSON`,
  );
}
