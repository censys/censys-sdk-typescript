/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ServiceId,
  ServiceId$inboundSchema,
  ServiceId$Outbound,
  ServiceId$outboundSchema,
} from "./serviceid.js";
import {
  TrackedScanScanTargetHostnamePort,
  TrackedScanScanTargetHostnamePort$inboundSchema,
  TrackedScanScanTargetHostnamePort$Outbound,
  TrackedScanScanTargetHostnamePort$outboundSchema,
} from "./trackedscanscantargethostnameport.js";
import {
  TrackedScanScanTargetHostPort,
  TrackedScanScanTargetHostPort$inboundSchema,
  TrackedScanScanTargetHostPort$Outbound,
  TrackedScanScanTargetHostPort$outboundSchema,
} from "./trackedscanscantargethostport.js";
import {
  WebOrigin,
  WebOrigin$inboundSchema,
  WebOrigin$Outbound,
  WebOrigin$outboundSchema,
} from "./weborigin.js";

export type TrackedScanScanTarget = {
  hostPort?: TrackedScanScanTargetHostPort | undefined;
  hostnamePort?: TrackedScanScanTargetHostnamePort | undefined;
  serviceId?: ServiceId | undefined;
  webOrigin?: WebOrigin | undefined;
};

/** @internal */
export const TrackedScanScanTarget$inboundSchema: z.ZodType<
  TrackedScanScanTarget,
  z.ZodTypeDef,
  unknown
> = z.object({
  host_port: TrackedScanScanTargetHostPort$inboundSchema.optional(),
  hostname_port: TrackedScanScanTargetHostnamePort$inboundSchema.optional(),
  service_id: ServiceId$inboundSchema.optional(),
  web_origin: WebOrigin$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "host_port": "hostPort",
    "hostname_port": "hostnamePort",
    "service_id": "serviceId",
    "web_origin": "webOrigin",
  });
});

/** @internal */
export type TrackedScanScanTarget$Outbound = {
  host_port?: TrackedScanScanTargetHostPort$Outbound | undefined;
  hostname_port?: TrackedScanScanTargetHostnamePort$Outbound | undefined;
  service_id?: ServiceId$Outbound | undefined;
  web_origin?: WebOrigin$Outbound | undefined;
};

/** @internal */
export const TrackedScanScanTarget$outboundSchema: z.ZodType<
  TrackedScanScanTarget$Outbound,
  z.ZodTypeDef,
  TrackedScanScanTarget
> = z.object({
  hostPort: TrackedScanScanTargetHostPort$outboundSchema.optional(),
  hostnamePort: TrackedScanScanTargetHostnamePort$outboundSchema.optional(),
  serviceId: ServiceId$outboundSchema.optional(),
  webOrigin: WebOrigin$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    hostPort: "host_port",
    hostnamePort: "hostname_port",
    serviceId: "service_id",
    webOrigin: "web_origin",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TrackedScanScanTarget$ {
  /** @deprecated use `TrackedScanScanTarget$inboundSchema` instead. */
  export const inboundSchema = TrackedScanScanTarget$inboundSchema;
  /** @deprecated use `TrackedScanScanTarget$outboundSchema` instead. */
  export const outboundSchema = TrackedScanScanTarget$outboundSchema;
  /** @deprecated use `TrackedScanScanTarget$Outbound` instead. */
  export type Outbound = TrackedScanScanTarget$Outbound;
}

export function trackedScanScanTargetToJSON(
  trackedScanScanTarget: TrackedScanScanTarget,
): string {
  return JSON.stringify(
    TrackedScanScanTarget$outboundSchema.parse(trackedScanScanTarget),
  );
}

export function trackedScanScanTargetFromJSON(
  jsonString: string,
): SafeParseResult<TrackedScanScanTarget, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TrackedScanScanTarget$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TrackedScanScanTarget' from JSON`,
  );
}
