/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DistinguishedName = {
  /**
   * The commonName (CN) elements of the Distinguished Name (OID: 2.5.4.3).
   */
  commonName?: Array<string> | null | undefined;
  /**
   * The countryName (C) elements of the Distinguished Name (OID: 2.5.4.6).
   */
  country?: Array<string> | null | undefined;
  /**
   * The domainComponent (DC) elements of the Distinguished Name (OID: 0.9.2342.19200300.100.1.25).
   */
  domainComponent?: Array<string> | null | undefined;
  /**
   * The emailAddress (E) elements of the Distinguished Name (OID: 1.2.840.113549.1.9.1).
   */
  emailAddress?: Array<string> | null | undefined;
  /**
   * The givenName (G) elements of the Distinguished Name (OID: 2.5.4.42).
   */
  givenName?: Array<string> | null | undefined;
  /**
   * The jurisdictionCountry elements of the Distinguished Name (OID: 1.3.6.1.4.1.311.60.2.1.3).
   */
  jurisdictionCountry?: Array<string> | null | undefined;
  /**
   * The jurisdictionLocality elements of the Distinguished Name (OID: 1.3.6.1.4.1.311.60.2.1.1).
   */
  jurisdictionLocality?: Array<string> | null | undefined;
  /**
   * The jurisdictionStateOrProvince elements of the Distinguished Name (OID: 1.3.6.1.4.1.311.60.2.1.2).
   */
  jurisdictionProvince?: Array<string> | null | undefined;
  /**
   * The localityName (L) elements of the Distinguished Name (OID: 2.5.4.7).
   */
  locality?: Array<string> | null | undefined;
  /**
   * The organizationName (O) elements of the Distinguished Name (OID: 2.5.4.10).
   */
  organization?: Array<string> | null | undefined;
  organizationId?: Array<string> | null | undefined;
  /**
   * The organizationalUnit (OU) elements of the Distinguished Name (OID: 2.5.4.11).
   */
  organizationalUnit?: Array<string> | null | undefined;
  /**
   * The postalCode elements of the Distinguished Name (OID: 2.5.4.17).
   */
  postalCode?: Array<string> | null | undefined;
  /**
   * The stateOrProvinceName (ST) elements of the Distinguished Name (OID: 2.5.4.8).
   */
  province?: Array<string> | null | undefined;
  /**
   * The serialNumber elements of the Distinguished Name (OID: 2.5.4.5).
   */
  serialNumber?: Array<string> | null | undefined;
  /**
   * The streetAddress (STREET) elements of the Distinguished Name (OID: 2.5.4.9).
   */
  streetAddress?: Array<string> | null | undefined;
  /**
   * The surname (SN) elements of the Distinguished Name (OID: 2.5.4.4).
   */
  surname?: Array<string> | null | undefined;
};

/** @internal */
export const DistinguishedName$inboundSchema: z.ZodType<
  DistinguishedName,
  z.ZodTypeDef,
  unknown
> = z.object({
  common_name: z.nullable(z.array(z.string())).optional(),
  country: z.nullable(z.array(z.string())).optional(),
  domain_component: z.nullable(z.array(z.string())).optional(),
  email_address: z.nullable(z.array(z.string())).optional(),
  given_name: z.nullable(z.array(z.string())).optional(),
  jurisdiction_country: z.nullable(z.array(z.string())).optional(),
  jurisdiction_locality: z.nullable(z.array(z.string())).optional(),
  jurisdiction_province: z.nullable(z.array(z.string())).optional(),
  locality: z.nullable(z.array(z.string())).optional(),
  organization: z.nullable(z.array(z.string())).optional(),
  organization_id: z.nullable(z.array(z.string())).optional(),
  organizational_unit: z.nullable(z.array(z.string())).optional(),
  postal_code: z.nullable(z.array(z.string())).optional(),
  province: z.nullable(z.array(z.string())).optional(),
  serial_number: z.nullable(z.array(z.string())).optional(),
  street_address: z.nullable(z.array(z.string())).optional(),
  surname: z.nullable(z.array(z.string())).optional(),
}).transform((v) => {
  return remap$(v, {
    "common_name": "commonName",
    "domain_component": "domainComponent",
    "email_address": "emailAddress",
    "given_name": "givenName",
    "jurisdiction_country": "jurisdictionCountry",
    "jurisdiction_locality": "jurisdictionLocality",
    "jurisdiction_province": "jurisdictionProvince",
    "organization_id": "organizationId",
    "organizational_unit": "organizationalUnit",
    "postal_code": "postalCode",
    "serial_number": "serialNumber",
    "street_address": "streetAddress",
  });
});

/** @internal */
export type DistinguishedName$Outbound = {
  common_name?: Array<string> | null | undefined;
  country?: Array<string> | null | undefined;
  domain_component?: Array<string> | null | undefined;
  email_address?: Array<string> | null | undefined;
  given_name?: Array<string> | null | undefined;
  jurisdiction_country?: Array<string> | null | undefined;
  jurisdiction_locality?: Array<string> | null | undefined;
  jurisdiction_province?: Array<string> | null | undefined;
  locality?: Array<string> | null | undefined;
  organization?: Array<string> | null | undefined;
  organization_id?: Array<string> | null | undefined;
  organizational_unit?: Array<string> | null | undefined;
  postal_code?: Array<string> | null | undefined;
  province?: Array<string> | null | undefined;
  serial_number?: Array<string> | null | undefined;
  street_address?: Array<string> | null | undefined;
  surname?: Array<string> | null | undefined;
};

/** @internal */
export const DistinguishedName$outboundSchema: z.ZodType<
  DistinguishedName$Outbound,
  z.ZodTypeDef,
  DistinguishedName
> = z.object({
  commonName: z.nullable(z.array(z.string())).optional(),
  country: z.nullable(z.array(z.string())).optional(),
  domainComponent: z.nullable(z.array(z.string())).optional(),
  emailAddress: z.nullable(z.array(z.string())).optional(),
  givenName: z.nullable(z.array(z.string())).optional(),
  jurisdictionCountry: z.nullable(z.array(z.string())).optional(),
  jurisdictionLocality: z.nullable(z.array(z.string())).optional(),
  jurisdictionProvince: z.nullable(z.array(z.string())).optional(),
  locality: z.nullable(z.array(z.string())).optional(),
  organization: z.nullable(z.array(z.string())).optional(),
  organizationId: z.nullable(z.array(z.string())).optional(),
  organizationalUnit: z.nullable(z.array(z.string())).optional(),
  postalCode: z.nullable(z.array(z.string())).optional(),
  province: z.nullable(z.array(z.string())).optional(),
  serialNumber: z.nullable(z.array(z.string())).optional(),
  streetAddress: z.nullable(z.array(z.string())).optional(),
  surname: z.nullable(z.array(z.string())).optional(),
}).transform((v) => {
  return remap$(v, {
    commonName: "common_name",
    domainComponent: "domain_component",
    emailAddress: "email_address",
    givenName: "given_name",
    jurisdictionCountry: "jurisdiction_country",
    jurisdictionLocality: "jurisdiction_locality",
    jurisdictionProvince: "jurisdiction_province",
    organizationId: "organization_id",
    organizationalUnit: "organizational_unit",
    postalCode: "postal_code",
    serialNumber: "serial_number",
    streetAddress: "street_address",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DistinguishedName$ {
  /** @deprecated use `DistinguishedName$inboundSchema` instead. */
  export const inboundSchema = DistinguishedName$inboundSchema;
  /** @deprecated use `DistinguishedName$outboundSchema` instead. */
  export const outboundSchema = DistinguishedName$outboundSchema;
  /** @deprecated use `DistinguishedName$Outbound` instead. */
  export type Outbound = DistinguishedName$Outbound;
}

export function distinguishedNameToJSON(
  distinguishedName: DistinguishedName,
): string {
  return JSON.stringify(
    DistinguishedName$outboundSchema.parse(distinguishedName),
  );
}

export function distinguishedNameFromJSON(
  jsonString: string,
): SafeParseResult<DistinguishedName, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DistinguishedName$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DistinguishedName' from JSON`,
  );
}
