/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type IpmiRMCPHeaderMessageClass = {
  /**
   * Just the class part of the byte (lower 5 bits of raw)
   */
  class?: number | undefined;
  /**
   * True if the message is an acknowledgment to a previous message.
   */
  isAck?: boolean | undefined;
  /**
   * The human-readable name of the message class
   */
  name?: string | undefined;
  /**
   * The raw message class byte.
   */
  raw?: number | undefined;
};

/** @internal */
export const IpmiRMCPHeaderMessageClass$inboundSchema: z.ZodType<
  IpmiRMCPHeaderMessageClass,
  z.ZodTypeDef,
  unknown
> = z.object({
  class: z.number().int().optional(),
  is_ack: z.boolean().optional(),
  name: z.string().optional(),
  raw: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "is_ack": "isAck",
  });
});

/** @internal */
export type IpmiRMCPHeaderMessageClass$Outbound = {
  class?: number | undefined;
  is_ack?: boolean | undefined;
  name?: string | undefined;
  raw?: number | undefined;
};

/** @internal */
export const IpmiRMCPHeaderMessageClass$outboundSchema: z.ZodType<
  IpmiRMCPHeaderMessageClass$Outbound,
  z.ZodTypeDef,
  IpmiRMCPHeaderMessageClass
> = z.object({
  class: z.number().int().optional(),
  isAck: z.boolean().optional(),
  name: z.string().optional(),
  raw: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    isAck: "is_ack",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IpmiRMCPHeaderMessageClass$ {
  /** @deprecated use `IpmiRMCPHeaderMessageClass$inboundSchema` instead. */
  export const inboundSchema = IpmiRMCPHeaderMessageClass$inboundSchema;
  /** @deprecated use `IpmiRMCPHeaderMessageClass$outboundSchema` instead. */
  export const outboundSchema = IpmiRMCPHeaderMessageClass$outboundSchema;
  /** @deprecated use `IpmiRMCPHeaderMessageClass$Outbound` instead. */
  export type Outbound = IpmiRMCPHeaderMessageClass$Outbound;
}

export function ipmiRMCPHeaderMessageClassToJSON(
  ipmiRMCPHeaderMessageClass: IpmiRMCPHeaderMessageClass,
): string {
  return JSON.stringify(
    IpmiRMCPHeaderMessageClass$outboundSchema.parse(ipmiRMCPHeaderMessageClass),
  );
}

export function ipmiRMCPHeaderMessageClassFromJSON(
  jsonString: string,
): SafeParseResult<IpmiRMCPHeaderMessageClass, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => IpmiRMCPHeaderMessageClass$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'IpmiRMCPHeaderMessageClass' from JSON`,
  );
}
