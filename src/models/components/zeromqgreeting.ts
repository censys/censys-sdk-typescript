/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ZeromqGreeting = {
  asServer?: boolean | undefined;
  mechanism?: string | undefined;
  signature?: string | undefined;
  versionMajor?: number | undefined;
  versionMinor?: number | undefined;
};

/** @internal */
export const ZeromqGreeting$inboundSchema: z.ZodType<
  ZeromqGreeting,
  z.ZodTypeDef,
  unknown
> = z.object({
  as_server: z.boolean().optional(),
  mechanism: z.string().optional(),
  signature: z.string().optional(),
  version_major: z.number().int().optional(),
  version_minor: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "as_server": "asServer",
    "version_major": "versionMajor",
    "version_minor": "versionMinor",
  });
});

/** @internal */
export type ZeromqGreeting$Outbound = {
  as_server?: boolean | undefined;
  mechanism?: string | undefined;
  signature?: string | undefined;
  version_major?: number | undefined;
  version_minor?: number | undefined;
};

/** @internal */
export const ZeromqGreeting$outboundSchema: z.ZodType<
  ZeromqGreeting$Outbound,
  z.ZodTypeDef,
  ZeromqGreeting
> = z.object({
  asServer: z.boolean().optional(),
  mechanism: z.string().optional(),
  signature: z.string().optional(),
  versionMajor: z.number().int().optional(),
  versionMinor: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    asServer: "as_server",
    versionMajor: "version_major",
    versionMinor: "version_minor",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ZeromqGreeting$ {
  /** @deprecated use `ZeromqGreeting$inboundSchema` instead. */
  export const inboundSchema = ZeromqGreeting$inboundSchema;
  /** @deprecated use `ZeromqGreeting$outboundSchema` instead. */
  export const outboundSchema = ZeromqGreeting$outboundSchema;
  /** @deprecated use `ZeromqGreeting$Outbound` instead. */
  export type Outbound = ZeromqGreeting$Outbound;
}

export function zeromqGreetingToJSON(zeromqGreeting: ZeromqGreeting): string {
  return JSON.stringify(ZeromqGreeting$outboundSchema.parse(zeromqGreeting));
}

export function zeromqGreetingFromJSON(
  jsonString: string,
): SafeParseResult<ZeromqGreeting, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ZeromqGreeting$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ZeromqGreeting' from JSON`,
  );
}
