/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  RocketmqResponseHeader,
  RocketmqResponseHeader$inboundSchema,
  RocketmqResponseHeader$Outbound,
  RocketmqResponseHeader$outboundSchema,
} from "./rocketmqresponseheader.js";

export type RocketmqClusterInfo = {
  header?: RocketmqResponseHeader | undefined;
  payload?: string | undefined;
};

/** @internal */
export const RocketmqClusterInfo$inboundSchema: z.ZodType<
  RocketmqClusterInfo,
  z.ZodTypeDef,
  unknown
> = z.object({
  header: RocketmqResponseHeader$inboundSchema.optional(),
  payload: z.string().optional(),
});

/** @internal */
export type RocketmqClusterInfo$Outbound = {
  header?: RocketmqResponseHeader$Outbound | undefined;
  payload?: string | undefined;
};

/** @internal */
export const RocketmqClusterInfo$outboundSchema: z.ZodType<
  RocketmqClusterInfo$Outbound,
  z.ZodTypeDef,
  RocketmqClusterInfo
> = z.object({
  header: RocketmqResponseHeader$outboundSchema.optional(),
  payload: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RocketmqClusterInfo$ {
  /** @deprecated use `RocketmqClusterInfo$inboundSchema` instead. */
  export const inboundSchema = RocketmqClusterInfo$inboundSchema;
  /** @deprecated use `RocketmqClusterInfo$outboundSchema` instead. */
  export const outboundSchema = RocketmqClusterInfo$outboundSchema;
  /** @deprecated use `RocketmqClusterInfo$Outbound` instead. */
  export type Outbound = RocketmqClusterInfo$Outbound;
}

export function rocketmqClusterInfoToJSON(
  rocketmqClusterInfo: RocketmqClusterInfo,
): string {
  return JSON.stringify(
    RocketmqClusterInfo$outboundSchema.parse(rocketmqClusterInfo),
  );
}

export function rocketmqClusterInfoFromJSON(
  jsonString: string,
): SafeParseResult<RocketmqClusterInfo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RocketmqClusterInfo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RocketmqClusterInfo' from JSON`,
  );
}
