/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ValueCountsResponse = {
  andCountResults: Array<number> | null;
};

/** @internal */
export const ValueCountsResponse$inboundSchema: z.ZodType<
  ValueCountsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  and_count_results: z.nullable(z.array(z.number())),
}).transform((v) => {
  return remap$(v, {
    "and_count_results": "andCountResults",
  });
});

/** @internal */
export type ValueCountsResponse$Outbound = {
  and_count_results: Array<number> | null;
};

/** @internal */
export const ValueCountsResponse$outboundSchema: z.ZodType<
  ValueCountsResponse$Outbound,
  z.ZodTypeDef,
  ValueCountsResponse
> = z.object({
  andCountResults: z.nullable(z.array(z.number())),
}).transform((v) => {
  return remap$(v, {
    andCountResults: "and_count_results",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ValueCountsResponse$ {
  /** @deprecated use `ValueCountsResponse$inboundSchema` instead. */
  export const inboundSchema = ValueCountsResponse$inboundSchema;
  /** @deprecated use `ValueCountsResponse$outboundSchema` instead. */
  export const outboundSchema = ValueCountsResponse$outboundSchema;
  /** @deprecated use `ValueCountsResponse$Outbound` instead. */
  export type Outbound = ValueCountsResponse$Outbound;
}

export function valueCountsResponseToJSON(
  valueCountsResponse: ValueCountsResponse,
): string {
  return JSON.stringify(
    ValueCountsResponse$outboundSchema.parse(valueCountsResponse),
  );
}

export function valueCountsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ValueCountsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ValueCountsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ValueCountsResponse' from JSON`,
  );
}
