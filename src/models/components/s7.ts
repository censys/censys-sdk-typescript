/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type S7 = {
  copyright?: string | undefined;
  cpuProfile?: string | undefined;
  firmware?: string | undefined;
  hardware?: string | undefined;
  location?: string | undefined;
  memorySerialNumber?: string | undefined;
  module?: string | undefined;
  moduleId?: string | undefined;
  moduleType?: string | undefined;
  oemId?: string | undefined;
  plantId?: string | undefined;
  reservedForOs?: string | undefined;
  serialNumber?: string | undefined;
  system?: string | undefined;
};

/** @internal */
export const S7$inboundSchema: z.ZodType<S7, z.ZodTypeDef, unknown> = z.object({
  copyright: z.string().optional(),
  cpu_profile: z.string().optional(),
  firmware: z.string().optional(),
  hardware: z.string().optional(),
  location: z.string().optional(),
  memory_serial_number: z.string().optional(),
  module: z.string().optional(),
  module_id: z.string().optional(),
  module_type: z.string().optional(),
  oem_id: z.string().optional(),
  plant_id: z.string().optional(),
  reserved_for_os: z.string().optional(),
  serial_number: z.string().optional(),
  system: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "cpu_profile": "cpuProfile",
    "memory_serial_number": "memorySerialNumber",
    "module_id": "moduleId",
    "module_type": "moduleType",
    "oem_id": "oemId",
    "plant_id": "plantId",
    "reserved_for_os": "reservedForOs",
    "serial_number": "serialNumber",
  });
});

/** @internal */
export type S7$Outbound = {
  copyright?: string | undefined;
  cpu_profile?: string | undefined;
  firmware?: string | undefined;
  hardware?: string | undefined;
  location?: string | undefined;
  memory_serial_number?: string | undefined;
  module?: string | undefined;
  module_id?: string | undefined;
  module_type?: string | undefined;
  oem_id?: string | undefined;
  plant_id?: string | undefined;
  reserved_for_os?: string | undefined;
  serial_number?: string | undefined;
  system?: string | undefined;
};

/** @internal */
export const S7$outboundSchema: z.ZodType<S7$Outbound, z.ZodTypeDef, S7> = z
  .object({
    copyright: z.string().optional(),
    cpuProfile: z.string().optional(),
    firmware: z.string().optional(),
    hardware: z.string().optional(),
    location: z.string().optional(),
    memorySerialNumber: z.string().optional(),
    module: z.string().optional(),
    moduleId: z.string().optional(),
    moduleType: z.string().optional(),
    oemId: z.string().optional(),
    plantId: z.string().optional(),
    reservedForOs: z.string().optional(),
    serialNumber: z.string().optional(),
    system: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      cpuProfile: "cpu_profile",
      memorySerialNumber: "memory_serial_number",
      moduleId: "module_id",
      moduleType: "module_type",
      oemId: "oem_id",
      plantId: "plant_id",
      reservedForOs: "reserved_for_os",
      serialNumber: "serial_number",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace S7$ {
  /** @deprecated use `S7$inboundSchema` instead. */
  export const inboundSchema = S7$inboundSchema;
  /** @deprecated use `S7$outboundSchema` instead. */
  export const outboundSchema = S7$outboundSchema;
  /** @deprecated use `S7$Outbound` instead. */
  export type Outbound = S7$Outbound;
}

export function s7ToJSON(s7: S7): string {
  return JSON.stringify(S7$outboundSchema.parse(s7));
}

export function s7FromJSON(
  jsonString: string,
): SafeParseResult<S7, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => S7$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'S7' from JSON`,
  );
}
