/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Cpe,
  Cpe$inboundSchema,
  Cpe$Outbound,
  Cpe$outboundSchema,
} from "./cpe.js";
import {
  CPELifeCycle,
  CPELifeCycle$inboundSchema,
  CPELifeCycle$Outbound,
  CPELifeCycle$outboundSchema,
} from "./cpelifecycle.js";
import {
  Evidence,
  Evidence$inboundSchema,
  Evidence$Outbound,
  Evidence$outboundSchema,
} from "./evidence.js";

export const Source = {
  Undefined: "undefined",
  Censys: "censys",
  Recog: "recog",
  Wappalyzer: "wappalyzer",
  ThirdParty: "third_party",
} as const;
export type Source = ClosedEnum<typeof Source>;

export type Attribute = {
  components?: Array<Cpe> | null | undefined;
  confidence?: number | undefined;
  cpe?: string | undefined;
  edition?: string | undefined;
  evidence?: Array<Evidence> | null | undefined;
  lifeCycle?: CPELifeCycle | undefined;
  part?: string | undefined;
  product?: string | undefined;
  source?: Source | undefined;
  type?: Array<string> | null | undefined;
  update?: string | undefined;
  vendor?: string | undefined;
  version?: string | undefined;
};

/** @internal */
export const Source$inboundSchema: z.ZodNativeEnum<typeof Source> = z
  .nativeEnum(Source);

/** @internal */
export const Source$outboundSchema: z.ZodNativeEnum<typeof Source> =
  Source$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Source$ {
  /** @deprecated use `Source$inboundSchema` instead. */
  export const inboundSchema = Source$inboundSchema;
  /** @deprecated use `Source$outboundSchema` instead. */
  export const outboundSchema = Source$outboundSchema;
}

/** @internal */
export const Attribute$inboundSchema: z.ZodType<
  Attribute,
  z.ZodTypeDef,
  unknown
> = z.object({
  components: z.nullable(z.array(Cpe$inboundSchema)).optional(),
  confidence: z.number().optional(),
  cpe: z.string().optional(),
  edition: z.string().optional(),
  evidence: z.nullable(z.array(Evidence$inboundSchema)).optional(),
  life_cycle: CPELifeCycle$inboundSchema.optional(),
  part: z.string().optional(),
  product: z.string().optional(),
  source: Source$inboundSchema.optional(),
  type: z.nullable(z.array(z.string())).optional(),
  update: z.string().optional(),
  vendor: z.string().optional(),
  version: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "life_cycle": "lifeCycle",
  });
});

/** @internal */
export type Attribute$Outbound = {
  components?: Array<Cpe$Outbound> | null | undefined;
  confidence?: number | undefined;
  cpe?: string | undefined;
  edition?: string | undefined;
  evidence?: Array<Evidence$Outbound> | null | undefined;
  life_cycle?: CPELifeCycle$Outbound | undefined;
  part?: string | undefined;
  product?: string | undefined;
  source?: string | undefined;
  type?: Array<string> | null | undefined;
  update?: string | undefined;
  vendor?: string | undefined;
  version?: string | undefined;
};

/** @internal */
export const Attribute$outboundSchema: z.ZodType<
  Attribute$Outbound,
  z.ZodTypeDef,
  Attribute
> = z.object({
  components: z.nullable(z.array(Cpe$outboundSchema)).optional(),
  confidence: z.number().optional(),
  cpe: z.string().optional(),
  edition: z.string().optional(),
  evidence: z.nullable(z.array(Evidence$outboundSchema)).optional(),
  lifeCycle: CPELifeCycle$outboundSchema.optional(),
  part: z.string().optional(),
  product: z.string().optional(),
  source: Source$outboundSchema.optional(),
  type: z.nullable(z.array(z.string())).optional(),
  update: z.string().optional(),
  vendor: z.string().optional(),
  version: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    lifeCycle: "life_cycle",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Attribute$ {
  /** @deprecated use `Attribute$inboundSchema` instead. */
  export const inboundSchema = Attribute$inboundSchema;
  /** @deprecated use `Attribute$outboundSchema` instead. */
  export const outboundSchema = Attribute$outboundSchema;
  /** @deprecated use `Attribute$Outbound` instead. */
  export type Outbound = Attribute$Outbound;
}

export function attributeToJSON(attribute: Attribute): string {
  return JSON.stringify(Attribute$outboundSchema.parse(attribute));
}

export function attributeFromJSON(
  jsonString: string,
): SafeParseResult<Attribute, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Attribute$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Attribute' from JSON`,
  );
}
