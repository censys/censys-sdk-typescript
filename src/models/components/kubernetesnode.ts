/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  KubernetesNodeNodeAddress,
  KubernetesNodeNodeAddress$inboundSchema,
  KubernetesNodeNodeAddress$Outbound,
  KubernetesNodeNodeAddress$outboundSchema,
} from "./kubernetesnodenodeaddress.js";

export type KubernetesNode = {
  addresses?: Array<KubernetesNodeNodeAddress> | null | undefined;
  /**
   * The Architecture reported by the node.
   */
  architecture?: string | undefined;
  /**
   * ContainerRuntime Version reported by the node through runtime remote API (e.g. docker://1.5.0).
   */
  containerRuntimeVersion?: string | undefined;
  /**
   * List of container images on this node
   */
  images?: Array<string> | null | undefined;
  /**
   * Kernel Version reported by the node from 'uname -r' (e.g. 3.16.0-0.bpo.4-amd64).
   */
  kernelVersion?: string | undefined;
  /**
   * KubeProxy Version reported by the node.
   */
  kubeProxyVersion?: string | undefined;
  /**
   * Kubelet Version reported by the node.
   */
  kubeletVersion?: string | undefined;
  name?: string | undefined;
  /**
   * The Operating System reported by the node.
   */
  operatingSystem?: string | undefined;
  /**
   * OS Image reported by the node from /etc/os-release (e.g. Debian GNU/Linux 7 (wheezy)).
   */
  osImage?: string | undefined;
};

/** @internal */
export const KubernetesNode$inboundSchema: z.ZodType<
  KubernetesNode,
  z.ZodTypeDef,
  unknown
> = z.object({
  addresses: z.nullable(z.array(KubernetesNodeNodeAddress$inboundSchema))
    .optional(),
  architecture: z.string().optional(),
  container_runtime_version: z.string().optional(),
  images: z.nullable(z.array(z.string())).optional(),
  kernel_version: z.string().optional(),
  kube_proxy_version: z.string().optional(),
  kubelet_version: z.string().optional(),
  name: z.string().optional(),
  operating_system: z.string().optional(),
  os_image: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "container_runtime_version": "containerRuntimeVersion",
    "kernel_version": "kernelVersion",
    "kube_proxy_version": "kubeProxyVersion",
    "kubelet_version": "kubeletVersion",
    "operating_system": "operatingSystem",
    "os_image": "osImage",
  });
});

/** @internal */
export type KubernetesNode$Outbound = {
  addresses?: Array<KubernetesNodeNodeAddress$Outbound> | null | undefined;
  architecture?: string | undefined;
  container_runtime_version?: string | undefined;
  images?: Array<string> | null | undefined;
  kernel_version?: string | undefined;
  kube_proxy_version?: string | undefined;
  kubelet_version?: string | undefined;
  name?: string | undefined;
  operating_system?: string | undefined;
  os_image?: string | undefined;
};

/** @internal */
export const KubernetesNode$outboundSchema: z.ZodType<
  KubernetesNode$Outbound,
  z.ZodTypeDef,
  KubernetesNode
> = z.object({
  addresses: z.nullable(z.array(KubernetesNodeNodeAddress$outboundSchema))
    .optional(),
  architecture: z.string().optional(),
  containerRuntimeVersion: z.string().optional(),
  images: z.nullable(z.array(z.string())).optional(),
  kernelVersion: z.string().optional(),
  kubeProxyVersion: z.string().optional(),
  kubeletVersion: z.string().optional(),
  name: z.string().optional(),
  operatingSystem: z.string().optional(),
  osImage: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    containerRuntimeVersion: "container_runtime_version",
    kernelVersion: "kernel_version",
    kubeProxyVersion: "kube_proxy_version",
    kubeletVersion: "kubelet_version",
    operatingSystem: "operating_system",
    osImage: "os_image",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace KubernetesNode$ {
  /** @deprecated use `KubernetesNode$inboundSchema` instead. */
  export const inboundSchema = KubernetesNode$inboundSchema;
  /** @deprecated use `KubernetesNode$outboundSchema` instead. */
  export const outboundSchema = KubernetesNode$outboundSchema;
  /** @deprecated use `KubernetesNode$Outbound` instead. */
  export type Outbound = KubernetesNode$Outbound;
}

export function kubernetesNodeToJSON(kubernetesNode: KubernetesNode): string {
  return JSON.stringify(KubernetesNode$outboundSchema.parse(kubernetesNode));
}

export function kubernetesNodeFromJSON(
  jsonString: string,
): SafeParseResult<KubernetesNode, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => KubernetesNode$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'KubernetesNode' from JSON`,
  );
}
