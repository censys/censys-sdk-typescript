/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  CertificateAsset,
  CertificateAsset$inboundSchema,
  CertificateAsset$Outbound,
  CertificateAsset$outboundSchema,
} from "./certificateasset.js";

export type ResponseEnvelopeCertificateAsset = {
  result?: CertificateAsset | undefined;
};

/** @internal */
export const ResponseEnvelopeCertificateAsset$inboundSchema: z.ZodType<
  ResponseEnvelopeCertificateAsset,
  z.ZodTypeDef,
  unknown
> = z.object({
  result: CertificateAsset$inboundSchema.optional(),
});

/** @internal */
export type ResponseEnvelopeCertificateAsset$Outbound = {
  result?: CertificateAsset$Outbound | undefined;
};

/** @internal */
export const ResponseEnvelopeCertificateAsset$outboundSchema: z.ZodType<
  ResponseEnvelopeCertificateAsset$Outbound,
  z.ZodTypeDef,
  ResponseEnvelopeCertificateAsset
> = z.object({
  result: CertificateAsset$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseEnvelopeCertificateAsset$ {
  /** @deprecated use `ResponseEnvelopeCertificateAsset$inboundSchema` instead. */
  export const inboundSchema = ResponseEnvelopeCertificateAsset$inboundSchema;
  /** @deprecated use `ResponseEnvelopeCertificateAsset$outboundSchema` instead. */
  export const outboundSchema = ResponseEnvelopeCertificateAsset$outboundSchema;
  /** @deprecated use `ResponseEnvelopeCertificateAsset$Outbound` instead. */
  export type Outbound = ResponseEnvelopeCertificateAsset$Outbound;
}

export function responseEnvelopeCertificateAssetToJSON(
  responseEnvelopeCertificateAsset: ResponseEnvelopeCertificateAsset,
): string {
  return JSON.stringify(
    ResponseEnvelopeCertificateAsset$outboundSchema.parse(
      responseEnvelopeCertificateAsset,
    ),
  );
}

export function responseEnvelopeCertificateAssetFromJSON(
  jsonString: string,
): SafeParseResult<ResponseEnvelopeCertificateAsset, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseEnvelopeCertificateAsset$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseEnvelopeCertificateAsset' from JSON`,
  );
}
