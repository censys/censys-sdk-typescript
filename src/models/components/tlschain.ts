/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type TlsChain = {
  /**
   * SHA 256 fingerprint of the certificate in the certificate chain.
   */
  fingerprintSha256?: string | undefined;
  /**
   * Distinguished name of the entity that has signed and issued the certificate.
   */
  issuerDn?: string | undefined;
  /**
   * Distinguished name of the entity that the certificate belongs to.
   */
  subjectDn?: string | undefined;
};

/** @internal */
export const TlsChain$inboundSchema: z.ZodType<
  TlsChain,
  z.ZodTypeDef,
  unknown
> = z.object({
  fingerprint_sha256: z.string().optional(),
  issuer_dn: z.string().optional(),
  subject_dn: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "fingerprint_sha256": "fingerprintSha256",
    "issuer_dn": "issuerDn",
    "subject_dn": "subjectDn",
  });
});

/** @internal */
export type TlsChain$Outbound = {
  fingerprint_sha256?: string | undefined;
  issuer_dn?: string | undefined;
  subject_dn?: string | undefined;
};

/** @internal */
export const TlsChain$outboundSchema: z.ZodType<
  TlsChain$Outbound,
  z.ZodTypeDef,
  TlsChain
> = z.object({
  fingerprintSha256: z.string().optional(),
  issuerDn: z.string().optional(),
  subjectDn: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    fingerprintSha256: "fingerprint_sha256",
    issuerDn: "issuer_dn",
    subjectDn: "subject_dn",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TlsChain$ {
  /** @deprecated use `TlsChain$inboundSchema` instead. */
  export const inboundSchema = TlsChain$inboundSchema;
  /** @deprecated use `TlsChain$outboundSchema` instead. */
  export const outboundSchema = TlsChain$outboundSchema;
  /** @deprecated use `TlsChain$Outbound` instead. */
  export type Outbound = TlsChain$Outbound;
}

export function tlsChainToJSON(tlsChain: TlsChain): string {
  return JSON.stringify(TlsChain$outboundSchema.parse(tlsChain));
}

export function tlsChainFromJSON(
  jsonString: string,
): SafeParseResult<TlsChain, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TlsChain$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TlsChain' from JSON`,
  );
}
