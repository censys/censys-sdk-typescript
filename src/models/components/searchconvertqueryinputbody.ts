/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SearchConvertQueryInputBody = {
  /**
   * A list of Censys Search Language queries to convert. Limited to 100 queries.
   */
  queries: Array<string> | null;
};

/** @internal */
export const SearchConvertQueryInputBody$inboundSchema: z.ZodType<
  SearchConvertQueryInputBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  queries: z.nullable(z.array(z.string())),
});

/** @internal */
export type SearchConvertQueryInputBody$Outbound = {
  queries: Array<string> | null;
};

/** @internal */
export const SearchConvertQueryInputBody$outboundSchema: z.ZodType<
  SearchConvertQueryInputBody$Outbound,
  z.ZodTypeDef,
  SearchConvertQueryInputBody
> = z.object({
  queries: z.nullable(z.array(z.string())),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchConvertQueryInputBody$ {
  /** @deprecated use `SearchConvertQueryInputBody$inboundSchema` instead. */
  export const inboundSchema = SearchConvertQueryInputBody$inboundSchema;
  /** @deprecated use `SearchConvertQueryInputBody$outboundSchema` instead. */
  export const outboundSchema = SearchConvertQueryInputBody$outboundSchema;
  /** @deprecated use `SearchConvertQueryInputBody$Outbound` instead. */
  export type Outbound = SearchConvertQueryInputBody$Outbound;
}

export function searchConvertQueryInputBodyToJSON(
  searchConvertQueryInputBody: SearchConvertQueryInputBody,
): string {
  return JSON.stringify(
    SearchConvertQueryInputBody$outboundSchema.parse(
      searchConvertQueryInputBody,
    ),
  );
}

export function searchConvertQueryInputBodyFromJSON(
  jsonString: string,
): SafeParseResult<SearchConvertQueryInputBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchConvertQueryInputBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchConvertQueryInputBody' from JSON`,
  );
}
