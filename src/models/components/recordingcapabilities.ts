/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type RecordingCapabilities = {
  dynamicRecordings?: boolean | undefined;
  dynamicTracks?: boolean | undefined;
  encoding?: string | undefined;
  maxRate?: number | undefined;
  maxRecordings?: number | undefined;
  maxRecordingsJob?: number | undefined;
  maxTotalRate?: number | undefined;
  options?: boolean | undefined;
};

/** @internal */
export const RecordingCapabilities$inboundSchema: z.ZodType<
  RecordingCapabilities,
  z.ZodTypeDef,
  unknown
> = z.object({
  dynamic_recordings: z.boolean().optional(),
  dynamic_tracks: z.boolean().optional(),
  encoding: z.string().optional(),
  max_rate: z.number().int().optional(),
  max_recordings: z.number().int().optional(),
  max_recordings_job: z.number().int().optional(),
  max_total_rate: z.number().int().optional(),
  options: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    "dynamic_recordings": "dynamicRecordings",
    "dynamic_tracks": "dynamicTracks",
    "max_rate": "maxRate",
    "max_recordings": "maxRecordings",
    "max_recordings_job": "maxRecordingsJob",
    "max_total_rate": "maxTotalRate",
  });
});

/** @internal */
export type RecordingCapabilities$Outbound = {
  dynamic_recordings?: boolean | undefined;
  dynamic_tracks?: boolean | undefined;
  encoding?: string | undefined;
  max_rate?: number | undefined;
  max_recordings?: number | undefined;
  max_recordings_job?: number | undefined;
  max_total_rate?: number | undefined;
  options?: boolean | undefined;
};

/** @internal */
export const RecordingCapabilities$outboundSchema: z.ZodType<
  RecordingCapabilities$Outbound,
  z.ZodTypeDef,
  RecordingCapabilities
> = z.object({
  dynamicRecordings: z.boolean().optional(),
  dynamicTracks: z.boolean().optional(),
  encoding: z.string().optional(),
  maxRate: z.number().int().optional(),
  maxRecordings: z.number().int().optional(),
  maxRecordingsJob: z.number().int().optional(),
  maxTotalRate: z.number().int().optional(),
  options: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    dynamicRecordings: "dynamic_recordings",
    dynamicTracks: "dynamic_tracks",
    maxRate: "max_rate",
    maxRecordings: "max_recordings",
    maxRecordingsJob: "max_recordings_job",
    maxTotalRate: "max_total_rate",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecordingCapabilities$ {
  /** @deprecated use `RecordingCapabilities$inboundSchema` instead. */
  export const inboundSchema = RecordingCapabilities$inboundSchema;
  /** @deprecated use `RecordingCapabilities$outboundSchema` instead. */
  export const outboundSchema = RecordingCapabilities$outboundSchema;
  /** @deprecated use `RecordingCapabilities$Outbound` instead. */
  export type Outbound = RecordingCapabilities$Outbound;
}

export function recordingCapabilitiesToJSON(
  recordingCapabilities: RecordingCapabilities,
): string {
  return JSON.stringify(
    RecordingCapabilities$outboundSchema.parse(recordingCapabilities),
  );
}

export function recordingCapabilitiesFromJSON(
  jsonString: string,
): SafeParseResult<RecordingCapabilities, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RecordingCapabilities$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RecordingCapabilities' from JSON`,
  );
}
