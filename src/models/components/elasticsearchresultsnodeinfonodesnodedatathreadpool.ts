/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ElasticSearchResultsNodeInfoNodesNodeDataThreadPool = {
  keepAlive?: string | undefined;
  max?: number | undefined;
  min?: number | undefined;
  queueSize?: number | undefined;
  type?: string | undefined;
};

/** @internal */
export const ElasticSearchResultsNodeInfoNodesNodeDataThreadPool$inboundSchema:
  z.ZodType<
    ElasticSearchResultsNodeInfoNodesNodeDataThreadPool,
    z.ZodTypeDef,
    unknown
  > = z.object({
    keep_alive: z.string().optional(),
    max: z.number().int().optional(),
    min: z.number().int().optional(),
    queue_size: z.number().int().optional(),
    type: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "keep_alive": "keepAlive",
      "queue_size": "queueSize",
    });
  });

/** @internal */
export type ElasticSearchResultsNodeInfoNodesNodeDataThreadPool$Outbound = {
  keep_alive?: string | undefined;
  max?: number | undefined;
  min?: number | undefined;
  queue_size?: number | undefined;
  type?: string | undefined;
};

/** @internal */
export const ElasticSearchResultsNodeInfoNodesNodeDataThreadPool$outboundSchema:
  z.ZodType<
    ElasticSearchResultsNodeInfoNodesNodeDataThreadPool$Outbound,
    z.ZodTypeDef,
    ElasticSearchResultsNodeInfoNodesNodeDataThreadPool
  > = z.object({
    keepAlive: z.string().optional(),
    max: z.number().int().optional(),
    min: z.number().int().optional(),
    queueSize: z.number().int().optional(),
    type: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      keepAlive: "keep_alive",
      queueSize: "queue_size",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ElasticSearchResultsNodeInfoNodesNodeDataThreadPool$ {
  /** @deprecated use `ElasticSearchResultsNodeInfoNodesNodeDataThreadPool$inboundSchema` instead. */
  export const inboundSchema =
    ElasticSearchResultsNodeInfoNodesNodeDataThreadPool$inboundSchema;
  /** @deprecated use `ElasticSearchResultsNodeInfoNodesNodeDataThreadPool$outboundSchema` instead. */
  export const outboundSchema =
    ElasticSearchResultsNodeInfoNodesNodeDataThreadPool$outboundSchema;
  /** @deprecated use `ElasticSearchResultsNodeInfoNodesNodeDataThreadPool$Outbound` instead. */
  export type Outbound =
    ElasticSearchResultsNodeInfoNodesNodeDataThreadPool$Outbound;
}

export function elasticSearchResultsNodeInfoNodesNodeDataThreadPoolToJSON(
  elasticSearchResultsNodeInfoNodesNodeDataThreadPool:
    ElasticSearchResultsNodeInfoNodesNodeDataThreadPool,
): string {
  return JSON.stringify(
    ElasticSearchResultsNodeInfoNodesNodeDataThreadPool$outboundSchema.parse(
      elasticSearchResultsNodeInfoNodesNodeDataThreadPool,
    ),
  );
}

export function elasticSearchResultsNodeInfoNodesNodeDataThreadPoolFromJSON(
  jsonString: string,
): SafeParseResult<
  ElasticSearchResultsNodeInfoNodesNodeDataThreadPool,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ElasticSearchResultsNodeInfoNodesNodeDataThreadPool$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ElasticSearchResultsNodeInfoNodesNodeDataThreadPool' from JSON`,
  );
}
