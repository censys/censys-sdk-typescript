/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type NmeaNmeaMessage = {
  fields?: Array<string> | null | undefined;
  sentenceId?: string | undefined;
  talkerId?: string | undefined;
  talkerName?: string | undefined;
};

/** @internal */
export const NmeaNmeaMessage$inboundSchema: z.ZodType<
  NmeaNmeaMessage,
  z.ZodTypeDef,
  unknown
> = z.object({
  fields: z.nullable(z.array(z.string())).optional(),
  sentence_id: z.string().optional(),
  talker_id: z.string().optional(),
  talker_name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "sentence_id": "sentenceId",
    "talker_id": "talkerId",
    "talker_name": "talkerName",
  });
});

/** @internal */
export type NmeaNmeaMessage$Outbound = {
  fields?: Array<string> | null | undefined;
  sentence_id?: string | undefined;
  talker_id?: string | undefined;
  talker_name?: string | undefined;
};

/** @internal */
export const NmeaNmeaMessage$outboundSchema: z.ZodType<
  NmeaNmeaMessage$Outbound,
  z.ZodTypeDef,
  NmeaNmeaMessage
> = z.object({
  fields: z.nullable(z.array(z.string())).optional(),
  sentenceId: z.string().optional(),
  talkerId: z.string().optional(),
  talkerName: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    sentenceId: "sentence_id",
    talkerId: "talker_id",
    talkerName: "talker_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NmeaNmeaMessage$ {
  /** @deprecated use `NmeaNmeaMessage$inboundSchema` instead. */
  export const inboundSchema = NmeaNmeaMessage$inboundSchema;
  /** @deprecated use `NmeaNmeaMessage$outboundSchema` instead. */
  export const outboundSchema = NmeaNmeaMessage$outboundSchema;
  /** @deprecated use `NmeaNmeaMessage$Outbound` instead. */
  export type Outbound = NmeaNmeaMessage$Outbound;
}

export function nmeaNmeaMessageToJSON(
  nmeaNmeaMessage: NmeaNmeaMessage,
): string {
  return JSON.stringify(NmeaNmeaMessage$outboundSchema.parse(nmeaNmeaMessage));
}

export function nmeaNmeaMessageFromJSON(
  jsonString: string,
): SafeParseResult<NmeaNmeaMessage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NmeaNmeaMessage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NmeaNmeaMessage' from JSON`,
  );
}
