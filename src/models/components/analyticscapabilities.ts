/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AnalyticsCapabilities = {
  analyticsModuleSupport?: boolean | undefined;
  cellBasedSceneDescriptionSupported?: boolean | undefined;
  ruleOptionsSupported?: boolean | undefined;
  ruleSupport?: boolean | undefined;
};

/** @internal */
export const AnalyticsCapabilities$inboundSchema: z.ZodType<
  AnalyticsCapabilities,
  z.ZodTypeDef,
  unknown
> = z.object({
  analytics_module_support: z.boolean().optional(),
  cell_based_scene_description_supported: z.boolean().optional(),
  rule_options_supported: z.boolean().optional(),
  rule_support: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    "analytics_module_support": "analyticsModuleSupport",
    "cell_based_scene_description_supported":
      "cellBasedSceneDescriptionSupported",
    "rule_options_supported": "ruleOptionsSupported",
    "rule_support": "ruleSupport",
  });
});

/** @internal */
export type AnalyticsCapabilities$Outbound = {
  analytics_module_support?: boolean | undefined;
  cell_based_scene_description_supported?: boolean | undefined;
  rule_options_supported?: boolean | undefined;
  rule_support?: boolean | undefined;
};

/** @internal */
export const AnalyticsCapabilities$outboundSchema: z.ZodType<
  AnalyticsCapabilities$Outbound,
  z.ZodTypeDef,
  AnalyticsCapabilities
> = z.object({
  analyticsModuleSupport: z.boolean().optional(),
  cellBasedSceneDescriptionSupported: z.boolean().optional(),
  ruleOptionsSupported: z.boolean().optional(),
  ruleSupport: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    analyticsModuleSupport: "analytics_module_support",
    cellBasedSceneDescriptionSupported:
      "cell_based_scene_description_supported",
    ruleOptionsSupported: "rule_options_supported",
    ruleSupport: "rule_support",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AnalyticsCapabilities$ {
  /** @deprecated use `AnalyticsCapabilities$inboundSchema` instead. */
  export const inboundSchema = AnalyticsCapabilities$inboundSchema;
  /** @deprecated use `AnalyticsCapabilities$outboundSchema` instead. */
  export const outboundSchema = AnalyticsCapabilities$outboundSchema;
  /** @deprecated use `AnalyticsCapabilities$Outbound` instead. */
  export type Outbound = AnalyticsCapabilities$Outbound;
}

export function analyticsCapabilitiesToJSON(
  analyticsCapabilities: AnalyticsCapabilities,
): string {
  return JSON.stringify(
    AnalyticsCapabilities$outboundSchema.parse(analyticsCapabilities),
  );
}

export function analyticsCapabilitiesFromJSON(
  jsonString: string,
): SafeParseResult<AnalyticsCapabilities, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AnalyticsCapabilities$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AnalyticsCapabilities' from JSON`,
  );
}
