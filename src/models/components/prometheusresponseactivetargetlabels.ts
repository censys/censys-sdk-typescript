/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PrometheusResponseActiveTargetLabels = {
  /**
   * Instance after relabelling has occurred.
   */
  instance?: string | undefined;
  /**
   * Job of target after relabelling has occurred.
   */
  job?: string | undefined;
};

/** @internal */
export const PrometheusResponseActiveTargetLabels$inboundSchema: z.ZodType<
  PrometheusResponseActiveTargetLabels,
  z.ZodTypeDef,
  unknown
> = z.object({
  instance: z.string().optional(),
  job: z.string().optional(),
});

/** @internal */
export type PrometheusResponseActiveTargetLabels$Outbound = {
  instance?: string | undefined;
  job?: string | undefined;
};

/** @internal */
export const PrometheusResponseActiveTargetLabels$outboundSchema: z.ZodType<
  PrometheusResponseActiveTargetLabels$Outbound,
  z.ZodTypeDef,
  PrometheusResponseActiveTargetLabels
> = z.object({
  instance: z.string().optional(),
  job: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PrometheusResponseActiveTargetLabels$ {
  /** @deprecated use `PrometheusResponseActiveTargetLabels$inboundSchema` instead. */
  export const inboundSchema =
    PrometheusResponseActiveTargetLabels$inboundSchema;
  /** @deprecated use `PrometheusResponseActiveTargetLabels$outboundSchema` instead. */
  export const outboundSchema =
    PrometheusResponseActiveTargetLabels$outboundSchema;
  /** @deprecated use `PrometheusResponseActiveTargetLabels$Outbound` instead. */
  export type Outbound = PrometheusResponseActiveTargetLabels$Outbound;
}

export function prometheusResponseActiveTargetLabelsToJSON(
  prometheusResponseActiveTargetLabels: PrometheusResponseActiveTargetLabels,
): string {
  return JSON.stringify(
    PrometheusResponseActiveTargetLabels$outboundSchema.parse(
      prometheusResponseActiveTargetLabels,
    ),
  );
}

export function prometheusResponseActiveTargetLabelsFromJSON(
  jsonString: string,
): SafeParseResult<PrometheusResponseActiveTargetLabels, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PrometheusResponseActiveTargetLabels$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PrometheusResponseActiveTargetLabels' from JSON`,
  );
}
