/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Members = {
  clientUrls?: Array<string> | null | undefined;
  id?: string | undefined;
  name?: string | undefined;
  peerUrls?: Array<string> | null | undefined;
};

/** @internal */
export const Members$inboundSchema: z.ZodType<Members, z.ZodTypeDef, unknown> =
  z.object({
    client_urls: z.nullable(z.array(z.string())).optional(),
    id: z.string().optional(),
    name: z.string().optional(),
    peer_urls: z.nullable(z.array(z.string())).optional(),
  }).transform((v) => {
    return remap$(v, {
      "client_urls": "clientUrls",
      "peer_urls": "peerUrls",
    });
  });

/** @internal */
export type Members$Outbound = {
  client_urls?: Array<string> | null | undefined;
  id?: string | undefined;
  name?: string | undefined;
  peer_urls?: Array<string> | null | undefined;
};

/** @internal */
export const Members$outboundSchema: z.ZodType<
  Members$Outbound,
  z.ZodTypeDef,
  Members
> = z.object({
  clientUrls: z.nullable(z.array(z.string())).optional(),
  id: z.string().optional(),
  name: z.string().optional(),
  peerUrls: z.nullable(z.array(z.string())).optional(),
}).transform((v) => {
  return remap$(v, {
    clientUrls: "client_urls",
    peerUrls: "peer_urls",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Members$ {
  /** @deprecated use `Members$inboundSchema` instead. */
  export const inboundSchema = Members$inboundSchema;
  /** @deprecated use `Members$outboundSchema` instead. */
  export const outboundSchema = Members$outboundSchema;
  /** @deprecated use `Members$Outbound` instead. */
  export type Outbound = Members$Outbound;
}

export function membersToJSON(members: Members): string {
  return JSON.stringify(Members$outboundSchema.parse(members));
}

export function membersFromJSON(
  jsonString: string,
): SafeParseResult<Members, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Members$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Members' from JSON`,
  );
}
