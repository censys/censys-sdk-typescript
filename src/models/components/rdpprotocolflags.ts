/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type RdpProtocolFlags = {
  dynvcGraphicsPipeline?: boolean | undefined;
  extendedClientDataSupported?: boolean | undefined;
  negRespReserved?: boolean | undefined;
  restrictedAdminMode?: boolean | undefined;
  restrictedAuthMode?: boolean | undefined;
};

/** @internal */
export const RdpProtocolFlags$inboundSchema: z.ZodType<
  RdpProtocolFlags,
  z.ZodTypeDef,
  unknown
> = z.object({
  dynvc_graphics_pipeline: z.boolean().optional(),
  extended_client_data_supported: z.boolean().optional(),
  neg_resp_reserved: z.boolean().optional(),
  restricted_admin_mode: z.boolean().optional(),
  restricted_auth_mode: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    "dynvc_graphics_pipeline": "dynvcGraphicsPipeline",
    "extended_client_data_supported": "extendedClientDataSupported",
    "neg_resp_reserved": "negRespReserved",
    "restricted_admin_mode": "restrictedAdminMode",
    "restricted_auth_mode": "restrictedAuthMode",
  });
});

/** @internal */
export type RdpProtocolFlags$Outbound = {
  dynvc_graphics_pipeline?: boolean | undefined;
  extended_client_data_supported?: boolean | undefined;
  neg_resp_reserved?: boolean | undefined;
  restricted_admin_mode?: boolean | undefined;
  restricted_auth_mode?: boolean | undefined;
};

/** @internal */
export const RdpProtocolFlags$outboundSchema: z.ZodType<
  RdpProtocolFlags$Outbound,
  z.ZodTypeDef,
  RdpProtocolFlags
> = z.object({
  dynvcGraphicsPipeline: z.boolean().optional(),
  extendedClientDataSupported: z.boolean().optional(),
  negRespReserved: z.boolean().optional(),
  restrictedAdminMode: z.boolean().optional(),
  restrictedAuthMode: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    dynvcGraphicsPipeline: "dynvc_graphics_pipeline",
    extendedClientDataSupported: "extended_client_data_supported",
    negRespReserved: "neg_resp_reserved",
    restrictedAdminMode: "restricted_admin_mode",
    restrictedAuthMode: "restricted_auth_mode",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RdpProtocolFlags$ {
  /** @deprecated use `RdpProtocolFlags$inboundSchema` instead. */
  export const inboundSchema = RdpProtocolFlags$inboundSchema;
  /** @deprecated use `RdpProtocolFlags$outboundSchema` instead. */
  export const outboundSchema = RdpProtocolFlags$outboundSchema;
  /** @deprecated use `RdpProtocolFlags$Outbound` instead. */
  export type Outbound = RdpProtocolFlags$Outbound;
}

export function rdpProtocolFlagsToJSON(
  rdpProtocolFlags: RdpProtocolFlags,
): string {
  return JSON.stringify(
    RdpProtocolFlags$outboundSchema.parse(rdpProtocolFlags),
  );
}

export function rdpProtocolFlagsFromJSON(
  jsonString: string,
): SafeParseResult<RdpProtocolFlags, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RdpProtocolFlags$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RdpProtocolFlags' from JSON`,
  );
}
