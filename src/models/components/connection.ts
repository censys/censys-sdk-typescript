/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Connection = {
  ahsLength?: number | undefined;
  cmdSeq?: number | undefined;
  isid?: number | undefined;
  keyvalPairs?: Array<string> | null | undefined;
  maxNewCmds?: number | undefined;
  statusSeq?: number | undefined;
  tsih?: number | undefined;
  versionActive?: number | undefined;
  versionMax?: number | undefined;
};

/** @internal */
export const Connection$inboundSchema: z.ZodType<
  Connection,
  z.ZodTypeDef,
  unknown
> = z.object({
  ahs_length: z.number().int().optional(),
  cmd_seq: z.number().int().optional(),
  isid: z.number().int().optional(),
  keyval_pairs: z.nullable(z.array(z.string())).optional(),
  max_new_cmds: z.number().int().optional(),
  status_seq: z.number().int().optional(),
  tsih: z.number().int().optional(),
  version_active: z.number().int().optional(),
  version_max: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "ahs_length": "ahsLength",
    "cmd_seq": "cmdSeq",
    "keyval_pairs": "keyvalPairs",
    "max_new_cmds": "maxNewCmds",
    "status_seq": "statusSeq",
    "version_active": "versionActive",
    "version_max": "versionMax",
  });
});

/** @internal */
export type Connection$Outbound = {
  ahs_length?: number | undefined;
  cmd_seq?: number | undefined;
  isid?: number | undefined;
  keyval_pairs?: Array<string> | null | undefined;
  max_new_cmds?: number | undefined;
  status_seq?: number | undefined;
  tsih?: number | undefined;
  version_active?: number | undefined;
  version_max?: number | undefined;
};

/** @internal */
export const Connection$outboundSchema: z.ZodType<
  Connection$Outbound,
  z.ZodTypeDef,
  Connection
> = z.object({
  ahsLength: z.number().int().optional(),
  cmdSeq: z.number().int().optional(),
  isid: z.number().int().optional(),
  keyvalPairs: z.nullable(z.array(z.string())).optional(),
  maxNewCmds: z.number().int().optional(),
  statusSeq: z.number().int().optional(),
  tsih: z.number().int().optional(),
  versionActive: z.number().int().optional(),
  versionMax: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    ahsLength: "ahs_length",
    cmdSeq: "cmd_seq",
    keyvalPairs: "keyval_pairs",
    maxNewCmds: "max_new_cmds",
    statusSeq: "status_seq",
    versionActive: "version_active",
    versionMax: "version_max",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Connection$ {
  /** @deprecated use `Connection$inboundSchema` instead. */
  export const inboundSchema = Connection$inboundSchema;
  /** @deprecated use `Connection$outboundSchema` instead. */
  export const outboundSchema = Connection$outboundSchema;
  /** @deprecated use `Connection$Outbound` instead. */
  export type Outbound = Connection$Outbound;
}

export function connectionToJSON(connection: Connection): string {
  return JSON.stringify(Connection$outboundSchema.parse(connection));
}

export function connectionFromJSON(
  jsonString: string,
): SafeParseResult<Connection, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Connection$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Connection' from JSON`,
  );
}
