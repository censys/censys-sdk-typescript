/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ElasticSearchResultsNodeInfoNodesNodeDataOS = {
  allocatedProc?: number | undefined;
  arch?: string | undefined;
  availableProc?: number | undefined;
  name?: string | undefined;
  prettyName?: string | undefined;
  refreshIntervalMs?: number | undefined;
  version?: string | undefined;
};

/** @internal */
export const ElasticSearchResultsNodeInfoNodesNodeDataOS$inboundSchema:
  z.ZodType<
    ElasticSearchResultsNodeInfoNodesNodeDataOS,
    z.ZodTypeDef,
    unknown
  > = z.object({
    allocated_proc: z.number().int().optional(),
    arch: z.string().optional(),
    available_proc: z.number().int().optional(),
    name: z.string().optional(),
    pretty_name: z.string().optional(),
    refresh_interval_ms: z.number().int().optional(),
    version: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "allocated_proc": "allocatedProc",
      "available_proc": "availableProc",
      "pretty_name": "prettyName",
      "refresh_interval_ms": "refreshIntervalMs",
    });
  });

/** @internal */
export type ElasticSearchResultsNodeInfoNodesNodeDataOS$Outbound = {
  allocated_proc?: number | undefined;
  arch?: string | undefined;
  available_proc?: number | undefined;
  name?: string | undefined;
  pretty_name?: string | undefined;
  refresh_interval_ms?: number | undefined;
  version?: string | undefined;
};

/** @internal */
export const ElasticSearchResultsNodeInfoNodesNodeDataOS$outboundSchema:
  z.ZodType<
    ElasticSearchResultsNodeInfoNodesNodeDataOS$Outbound,
    z.ZodTypeDef,
    ElasticSearchResultsNodeInfoNodesNodeDataOS
  > = z.object({
    allocatedProc: z.number().int().optional(),
    arch: z.string().optional(),
    availableProc: z.number().int().optional(),
    name: z.string().optional(),
    prettyName: z.string().optional(),
    refreshIntervalMs: z.number().int().optional(),
    version: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      allocatedProc: "allocated_proc",
      availableProc: "available_proc",
      prettyName: "pretty_name",
      refreshIntervalMs: "refresh_interval_ms",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ElasticSearchResultsNodeInfoNodesNodeDataOS$ {
  /** @deprecated use `ElasticSearchResultsNodeInfoNodesNodeDataOS$inboundSchema` instead. */
  export const inboundSchema =
    ElasticSearchResultsNodeInfoNodesNodeDataOS$inboundSchema;
  /** @deprecated use `ElasticSearchResultsNodeInfoNodesNodeDataOS$outboundSchema` instead. */
  export const outboundSchema =
    ElasticSearchResultsNodeInfoNodesNodeDataOS$outboundSchema;
  /** @deprecated use `ElasticSearchResultsNodeInfoNodesNodeDataOS$Outbound` instead. */
  export type Outbound = ElasticSearchResultsNodeInfoNodesNodeDataOS$Outbound;
}

export function elasticSearchResultsNodeInfoNodesNodeDataOSToJSON(
  elasticSearchResultsNodeInfoNodesNodeDataOS:
    ElasticSearchResultsNodeInfoNodesNodeDataOS,
): string {
  return JSON.stringify(
    ElasticSearchResultsNodeInfoNodesNodeDataOS$outboundSchema.parse(
      elasticSearchResultsNodeInfoNodesNodeDataOS,
    ),
  );
}

export function elasticSearchResultsNodeInfoNodesNodeDataOSFromJSON(
  jsonString: string,
): SafeParseResult<
  ElasticSearchResultsNodeInfoNodesNodeDataOS,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ElasticSearchResultsNodeInfoNodesNodeDataOS$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ElasticSearchResultsNodeInfoNodesNodeDataOS' from JSON`,
  );
}
