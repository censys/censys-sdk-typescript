/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  MongodbBuildInfo,
  MongodbBuildInfo$inboundSchema,
  MongodbBuildInfo$Outbound,
  MongodbBuildInfo$outboundSchema,
} from "./mongodbbuildinfo.js";
import {
  MongodbIsMaster,
  MongodbIsMaster$inboundSchema,
  MongodbIsMaster$Outbound,
  MongodbIsMaster$outboundSchema,
} from "./mongodbismaster.js";

export type Mongodb = {
  buildInfo?: MongodbBuildInfo | undefined;
  isMaster?: MongodbIsMaster | undefined;
};

/** @internal */
export const Mongodb$inboundSchema: z.ZodType<Mongodb, z.ZodTypeDef, unknown> =
  z.object({
    build_info: MongodbBuildInfo$inboundSchema.optional(),
    is_master: MongodbIsMaster$inboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      "build_info": "buildInfo",
      "is_master": "isMaster",
    });
  });

/** @internal */
export type Mongodb$Outbound = {
  build_info?: MongodbBuildInfo$Outbound | undefined;
  is_master?: MongodbIsMaster$Outbound | undefined;
};

/** @internal */
export const Mongodb$outboundSchema: z.ZodType<
  Mongodb$Outbound,
  z.ZodTypeDef,
  Mongodb
> = z.object({
  buildInfo: MongodbBuildInfo$outboundSchema.optional(),
  isMaster: MongodbIsMaster$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    buildInfo: "build_info",
    isMaster: "is_master",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Mongodb$ {
  /** @deprecated use `Mongodb$inboundSchema` instead. */
  export const inboundSchema = Mongodb$inboundSchema;
  /** @deprecated use `Mongodb$outboundSchema` instead. */
  export const outboundSchema = Mongodb$outboundSchema;
  /** @deprecated use `Mongodb$Outbound` instead. */
  export type Outbound = Mongodb$Outbound;
}

export function mongodbToJSON(mongodb: Mongodb): string {
  return JSON.stringify(Mongodb$outboundSchema.parse(mongodb));
}

export function mongodbFromJSON(
  jsonString: string,
): SafeParseResult<Mongodb, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Mongodb$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Mongodb' from JSON`,
  );
}
