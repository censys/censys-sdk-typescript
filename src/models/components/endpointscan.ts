/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ChromeDevtools,
  ChromeDevtools$inboundSchema,
  ChromeDevtools$Outbound,
  ChromeDevtools$outboundSchema,
} from "./chromedevtools.js";
import {
  CobaltStrike,
  CobaltStrike$inboundSchema,
  CobaltStrike$Outbound,
  CobaltStrike$outboundSchema,
} from "./cobaltstrike.js";
import {
  ElasticSearch,
  ElasticSearch$inboundSchema,
  ElasticSearch$Outbound,
  ElasticSearch$outboundSchema,
} from "./elasticsearch.js";
import {
  Fortigate,
  Fortigate$inboundSchema,
  Fortigate$Outbound,
  Fortigate$outboundSchema,
} from "./fortigate.js";
import {
  Graphql,
  Graphql$inboundSchema,
  Graphql$Outbound,
  Graphql$outboundSchema,
} from "./graphql.js";
import {
  Http,
  Http$inboundSchema,
  Http$Outbound,
  Http$outboundSchema,
} from "./http.js";
import {
  IvantiAvalanche,
  IvantiAvalanche$inboundSchema,
  IvantiAvalanche$Outbound,
  IvantiAvalanche$outboundSchema,
} from "./ivantiavalanche.js";
import {
  Kubernetes,
  Kubernetes$inboundSchema,
  Kubernetes$Outbound,
  Kubernetes$outboundSchema,
} from "./kubernetes.js";
import {
  Ollama,
  Ollama$inboundSchema,
  Ollama$Outbound,
  Ollama$outboundSchema,
} from "./ollama.js";
import {
  PlexMediaServer,
  PlexMediaServer$inboundSchema,
  PlexMediaServer$Outbound,
  PlexMediaServer$outboundSchema,
} from "./plexmediaserver.js";
import {
  Pprof,
  Pprof$inboundSchema,
  Pprof$Outbound,
  Pprof$outboundSchema,
} from "./pprof.js";
import {
  Prometheus,
  Prometheus$inboundSchema,
  Prometheus$Outbound,
  Prometheus$outboundSchema,
} from "./prometheus.js";
import {
  PrometheusTarget,
  PrometheusTarget$inboundSchema,
  PrometheusTarget$Outbound,
  PrometheusTarget$outboundSchema,
} from "./prometheustarget.js";
import {
  RedlionWeb,
  RedlionWeb$inboundSchema,
  RedlionWeb$Outbound,
  RedlionWeb$outboundSchema,
} from "./redlionweb.js";
import {
  Screenshot,
  Screenshot$inboundSchema,
  Screenshot$Outbound,
  Screenshot$outboundSchema,
} from "./screenshot.js";
import {
  Tls,
  Tls$inboundSchema,
  Tls$Outbound,
  Tls$outboundSchema,
} from "./tls.js";

export const EndpointScanTransportProtocol = {
  Unknown: "unknown",
  Tcp: "tcp",
  Udp: "udp",
  Icmp: "icmp",
  Quic: "quic",
} as const;
export type EndpointScanTransportProtocol = ClosedEnum<
  typeof EndpointScanTransportProtocol
>;

export type EndpointScan = {
  banner?: string | undefined;
  bannerHashSha256?: string | undefined;
  chromeDevtools?: ChromeDevtools | undefined;
  cobaltStrike?: CobaltStrike | undefined;
  elasticsearch?: ElasticSearch | undefined;
  endpointType?: string | undefined;
  fortigate?: Fortigate | undefined;
  graphql?: Graphql | undefined;
  hostname?: string | undefined;
  http?: Http | undefined;
  ip?: string | undefined;
  isSuccess?: boolean | undefined;
  ivantiAvalanche?: IvantiAvalanche | undefined;
  kubernetes?: Kubernetes | undefined;
  ollama?: Ollama | undefined;
  path?: string | undefined;
  plexMediaServer?: PlexMediaServer | undefined;
  port?: number | undefined;
  pprof?: Pprof | undefined;
  prometheus?: Prometheus | undefined;
  prometheusTarget?: PrometheusTarget | undefined;
  redlionWeb?: RedlionWeb | undefined;
  scanTime?: string | undefined;
  screenshots?: Array<Screenshot> | null | undefined;
  tls?: Tls | undefined;
  transportProtocol?: EndpointScanTransportProtocol | undefined;
};

/** @internal */
export const EndpointScanTransportProtocol$inboundSchema: z.ZodNativeEnum<
  typeof EndpointScanTransportProtocol
> = z.nativeEnum(EndpointScanTransportProtocol);

/** @internal */
export const EndpointScanTransportProtocol$outboundSchema: z.ZodNativeEnum<
  typeof EndpointScanTransportProtocol
> = EndpointScanTransportProtocol$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EndpointScanTransportProtocol$ {
  /** @deprecated use `EndpointScanTransportProtocol$inboundSchema` instead. */
  export const inboundSchema = EndpointScanTransportProtocol$inboundSchema;
  /** @deprecated use `EndpointScanTransportProtocol$outboundSchema` instead. */
  export const outboundSchema = EndpointScanTransportProtocol$outboundSchema;
}

/** @internal */
export const EndpointScan$inboundSchema: z.ZodType<
  EndpointScan,
  z.ZodTypeDef,
  unknown
> = z.object({
  banner: z.string().optional(),
  banner_hash_sha256: z.string().optional(),
  chrome_devtools: ChromeDevtools$inboundSchema.optional(),
  cobalt_strike: CobaltStrike$inboundSchema.optional(),
  elasticsearch: ElasticSearch$inboundSchema.optional(),
  endpoint_type: z.string().optional(),
  fortigate: Fortigate$inboundSchema.optional(),
  graphql: Graphql$inboundSchema.optional(),
  hostname: z.string().optional(),
  http: Http$inboundSchema.optional(),
  ip: z.string().optional(),
  is_success: z.boolean().optional(),
  ivanti_avalanche: IvantiAvalanche$inboundSchema.optional(),
  kubernetes: Kubernetes$inboundSchema.optional(),
  ollama: Ollama$inboundSchema.optional(),
  path: z.string().optional(),
  plex_media_server: PlexMediaServer$inboundSchema.optional(),
  port: z.number().int().optional(),
  pprof: Pprof$inboundSchema.optional(),
  prometheus: Prometheus$inboundSchema.optional(),
  prometheus_target: PrometheusTarget$inboundSchema.optional(),
  redlion_web: RedlionWeb$inboundSchema.optional(),
  scan_time: z.string().optional(),
  screenshots: z.nullable(z.array(Screenshot$inboundSchema)).optional(),
  tls: Tls$inboundSchema.optional(),
  transport_protocol: EndpointScanTransportProtocol$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "banner_hash_sha256": "bannerHashSha256",
    "chrome_devtools": "chromeDevtools",
    "cobalt_strike": "cobaltStrike",
    "endpoint_type": "endpointType",
    "is_success": "isSuccess",
    "ivanti_avalanche": "ivantiAvalanche",
    "plex_media_server": "plexMediaServer",
    "prometheus_target": "prometheusTarget",
    "redlion_web": "redlionWeb",
    "scan_time": "scanTime",
    "transport_protocol": "transportProtocol",
  });
});

/** @internal */
export type EndpointScan$Outbound = {
  banner?: string | undefined;
  banner_hash_sha256?: string | undefined;
  chrome_devtools?: ChromeDevtools$Outbound | undefined;
  cobalt_strike?: CobaltStrike$Outbound | undefined;
  elasticsearch?: ElasticSearch$Outbound | undefined;
  endpoint_type?: string | undefined;
  fortigate?: Fortigate$Outbound | undefined;
  graphql?: Graphql$Outbound | undefined;
  hostname?: string | undefined;
  http?: Http$Outbound | undefined;
  ip?: string | undefined;
  is_success?: boolean | undefined;
  ivanti_avalanche?: IvantiAvalanche$Outbound | undefined;
  kubernetes?: Kubernetes$Outbound | undefined;
  ollama?: Ollama$Outbound | undefined;
  path?: string | undefined;
  plex_media_server?: PlexMediaServer$Outbound | undefined;
  port?: number | undefined;
  pprof?: Pprof$Outbound | undefined;
  prometheus?: Prometheus$Outbound | undefined;
  prometheus_target?: PrometheusTarget$Outbound | undefined;
  redlion_web?: RedlionWeb$Outbound | undefined;
  scan_time?: string | undefined;
  screenshots?: Array<Screenshot$Outbound> | null | undefined;
  tls?: Tls$Outbound | undefined;
  transport_protocol?: string | undefined;
};

/** @internal */
export const EndpointScan$outboundSchema: z.ZodType<
  EndpointScan$Outbound,
  z.ZodTypeDef,
  EndpointScan
> = z.object({
  banner: z.string().optional(),
  bannerHashSha256: z.string().optional(),
  chromeDevtools: ChromeDevtools$outboundSchema.optional(),
  cobaltStrike: CobaltStrike$outboundSchema.optional(),
  elasticsearch: ElasticSearch$outboundSchema.optional(),
  endpointType: z.string().optional(),
  fortigate: Fortigate$outboundSchema.optional(),
  graphql: Graphql$outboundSchema.optional(),
  hostname: z.string().optional(),
  http: Http$outboundSchema.optional(),
  ip: z.string().optional(),
  isSuccess: z.boolean().optional(),
  ivantiAvalanche: IvantiAvalanche$outboundSchema.optional(),
  kubernetes: Kubernetes$outboundSchema.optional(),
  ollama: Ollama$outboundSchema.optional(),
  path: z.string().optional(),
  plexMediaServer: PlexMediaServer$outboundSchema.optional(),
  port: z.number().int().optional(),
  pprof: Pprof$outboundSchema.optional(),
  prometheus: Prometheus$outboundSchema.optional(),
  prometheusTarget: PrometheusTarget$outboundSchema.optional(),
  redlionWeb: RedlionWeb$outboundSchema.optional(),
  scanTime: z.string().optional(),
  screenshots: z.nullable(z.array(Screenshot$outboundSchema)).optional(),
  tls: Tls$outboundSchema.optional(),
  transportProtocol: EndpointScanTransportProtocol$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    bannerHashSha256: "banner_hash_sha256",
    chromeDevtools: "chrome_devtools",
    cobaltStrike: "cobalt_strike",
    endpointType: "endpoint_type",
    isSuccess: "is_success",
    ivantiAvalanche: "ivanti_avalanche",
    plexMediaServer: "plex_media_server",
    prometheusTarget: "prometheus_target",
    redlionWeb: "redlion_web",
    scanTime: "scan_time",
    transportProtocol: "transport_protocol",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EndpointScan$ {
  /** @deprecated use `EndpointScan$inboundSchema` instead. */
  export const inboundSchema = EndpointScan$inboundSchema;
  /** @deprecated use `EndpointScan$outboundSchema` instead. */
  export const outboundSchema = EndpointScan$outboundSchema;
  /** @deprecated use `EndpointScan$Outbound` instead. */
  export type Outbound = EndpointScan$Outbound;
}

export function endpointScanToJSON(endpointScan: EndpointScan): string {
  return JSON.stringify(EndpointScan$outboundSchema.parse(endpointScan));
}

export function endpointScanFromJSON(
  jsonString: string,
): SafeParseResult<EndpointScan, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EndpointScan$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EndpointScan' from JSON`,
  );
}
