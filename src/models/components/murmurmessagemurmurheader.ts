/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type MurmurMessageMurmurHeader = {
  length?: number | undefined;
  type?: string | undefined;
};

/** @internal */
export const MurmurMessageMurmurHeader$inboundSchema: z.ZodType<
  MurmurMessageMurmurHeader,
  z.ZodTypeDef,
  unknown
> = z.object({
  length: z.number().int().optional(),
  type: z.string().optional(),
});

/** @internal */
export type MurmurMessageMurmurHeader$Outbound = {
  length?: number | undefined;
  type?: string | undefined;
};

/** @internal */
export const MurmurMessageMurmurHeader$outboundSchema: z.ZodType<
  MurmurMessageMurmurHeader$Outbound,
  z.ZodTypeDef,
  MurmurMessageMurmurHeader
> = z.object({
  length: z.number().int().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MurmurMessageMurmurHeader$ {
  /** @deprecated use `MurmurMessageMurmurHeader$inboundSchema` instead. */
  export const inboundSchema = MurmurMessageMurmurHeader$inboundSchema;
  /** @deprecated use `MurmurMessageMurmurHeader$outboundSchema` instead. */
  export const outboundSchema = MurmurMessageMurmurHeader$outboundSchema;
  /** @deprecated use `MurmurMessageMurmurHeader$Outbound` instead. */
  export type Outbound = MurmurMessageMurmurHeader$Outbound;
}

export function murmurMessageMurmurHeaderToJSON(
  murmurMessageMurmurHeader: MurmurMessageMurmurHeader,
): string {
  return JSON.stringify(
    MurmurMessageMurmurHeader$outboundSchema.parse(murmurMessageMurmurHeader),
  );
}

export function murmurMessageMurmurHeaderFromJSON(
  jsonString: string,
): SafeParseResult<MurmurMessageMurmurHeader, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MurmurMessageMurmurHeader$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MurmurMessageMurmurHeader' from JSON`,
  );
}
