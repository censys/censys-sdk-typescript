/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PrometheusResponseDroppedTarget = {
  /**
   * Address of target.
   */
  address?: string | undefined;
  /**
   * Job of target.
   */
  job?: string | undefined;
  /**
   * Path to metrics of target.
   */
  metricsPath?: string | undefined;
  /**
   * URL scheme.
   */
  scheme?: string | undefined;
};

/** @internal */
export const PrometheusResponseDroppedTarget$inboundSchema: z.ZodType<
  PrometheusResponseDroppedTarget,
  z.ZodTypeDef,
  unknown
> = z.object({
  address: z.string().optional(),
  job: z.string().optional(),
  metrics_path: z.string().optional(),
  scheme: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "metrics_path": "metricsPath",
  });
});

/** @internal */
export type PrometheusResponseDroppedTarget$Outbound = {
  address?: string | undefined;
  job?: string | undefined;
  metrics_path?: string | undefined;
  scheme?: string | undefined;
};

/** @internal */
export const PrometheusResponseDroppedTarget$outboundSchema: z.ZodType<
  PrometheusResponseDroppedTarget$Outbound,
  z.ZodTypeDef,
  PrometheusResponseDroppedTarget
> = z.object({
  address: z.string().optional(),
  job: z.string().optional(),
  metricsPath: z.string().optional(),
  scheme: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    metricsPath: "metrics_path",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PrometheusResponseDroppedTarget$ {
  /** @deprecated use `PrometheusResponseDroppedTarget$inboundSchema` instead. */
  export const inboundSchema = PrometheusResponseDroppedTarget$inboundSchema;
  /** @deprecated use `PrometheusResponseDroppedTarget$outboundSchema` instead. */
  export const outboundSchema = PrometheusResponseDroppedTarget$outboundSchema;
  /** @deprecated use `PrometheusResponseDroppedTarget$Outbound` instead. */
  export type Outbound = PrometheusResponseDroppedTarget$Outbound;
}

export function prometheusResponseDroppedTargetToJSON(
  prometheusResponseDroppedTarget: PrometheusResponseDroppedTarget,
): string {
  return JSON.stringify(
    PrometheusResponseDroppedTarget$outboundSchema.parse(
      prometheusResponseDroppedTarget,
    ),
  );
}

export function prometheusResponseDroppedTargetFromJSON(
  jsonString: string,
): SafeParseResult<PrometheusResponseDroppedTarget, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PrometheusResponseDroppedTarget$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PrometheusResponseDroppedTarget' from JSON`,
  );
}
