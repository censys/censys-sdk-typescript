/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type KubernetesNodeNodeAddress = {
  /**
   * Node address, IP/URL.
   */
  address?: string | undefined;
  /**
   * Node address type, one of Hostname, ExternalIP or InternalIP.
   */
  addressType?: string | undefined;
};

/** @internal */
export const KubernetesNodeNodeAddress$inboundSchema: z.ZodType<
  KubernetesNodeNodeAddress,
  z.ZodTypeDef,
  unknown
> = z.object({
  address: z.string().optional(),
  address_type: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "address_type": "addressType",
  });
});

/** @internal */
export type KubernetesNodeNodeAddress$Outbound = {
  address?: string | undefined;
  address_type?: string | undefined;
};

/** @internal */
export const KubernetesNodeNodeAddress$outboundSchema: z.ZodType<
  KubernetesNodeNodeAddress$Outbound,
  z.ZodTypeDef,
  KubernetesNodeNodeAddress
> = z.object({
  address: z.string().optional(),
  addressType: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    addressType: "address_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace KubernetesNodeNodeAddress$ {
  /** @deprecated use `KubernetesNodeNodeAddress$inboundSchema` instead. */
  export const inboundSchema = KubernetesNodeNodeAddress$inboundSchema;
  /** @deprecated use `KubernetesNodeNodeAddress$outboundSchema` instead. */
  export const outboundSchema = KubernetesNodeNodeAddress$outboundSchema;
  /** @deprecated use `KubernetesNodeNodeAddress$Outbound` instead. */
  export type Outbound = KubernetesNodeNodeAddress$Outbound;
}

export function kubernetesNodeNodeAddressToJSON(
  kubernetesNodeNodeAddress: KubernetesNodeNodeAddress,
): string {
  return JSON.stringify(
    KubernetesNodeNodeAddress$outboundSchema.parse(kubernetesNodeNodeAddress),
  );
}

export function kubernetesNodeNodeAddressFromJSON(
  jsonString: string,
): SafeParseResult<KubernetesNodeNodeAddress, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => KubernetesNodeNodeAddress$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'KubernetesNodeNodeAddress' from JSON`,
  );
}
