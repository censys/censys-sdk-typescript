/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  MssqlPreloginOptionsServerVersion,
  MssqlPreloginOptionsServerVersion$inboundSchema,
  MssqlPreloginOptionsServerVersion$Outbound,
  MssqlPreloginOptionsServerVersion$outboundSchema,
} from "./mssqlpreloginoptionsserverversion.js";

export type MssqlPreloginOptions = {
  encryptMode?: string | undefined;
  fedAuthRequired?: boolean | undefined;
  instance?: string | undefined;
  mars?: boolean | undefined;
  nonce?: string | undefined;
  serverVersion?: MssqlPreloginOptionsServerVersion | undefined;
  threadId?: number | undefined;
  traceId?: string | undefined;
  unknown?: { [k: string]: string } | undefined;
};

/** @internal */
export const MssqlPreloginOptions$inboundSchema: z.ZodType<
  MssqlPreloginOptions,
  z.ZodTypeDef,
  unknown
> = z.object({
  encrypt_mode: z.string().optional(),
  fed_auth_required: z.boolean().optional(),
  instance: z.string().optional(),
  mars: z.boolean().optional(),
  nonce: z.string().optional(),
  server_version: MssqlPreloginOptionsServerVersion$inboundSchema.optional(),
  thread_id: z.number().int().optional(),
  trace_id: z.string().optional(),
  unknown: z.record(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "encrypt_mode": "encryptMode",
    "fed_auth_required": "fedAuthRequired",
    "server_version": "serverVersion",
    "thread_id": "threadId",
    "trace_id": "traceId",
  });
});

/** @internal */
export type MssqlPreloginOptions$Outbound = {
  encrypt_mode?: string | undefined;
  fed_auth_required?: boolean | undefined;
  instance?: string | undefined;
  mars?: boolean | undefined;
  nonce?: string | undefined;
  server_version?: MssqlPreloginOptionsServerVersion$Outbound | undefined;
  thread_id?: number | undefined;
  trace_id?: string | undefined;
  unknown?: { [k: string]: string } | undefined;
};

/** @internal */
export const MssqlPreloginOptions$outboundSchema: z.ZodType<
  MssqlPreloginOptions$Outbound,
  z.ZodTypeDef,
  MssqlPreloginOptions
> = z.object({
  encryptMode: z.string().optional(),
  fedAuthRequired: z.boolean().optional(),
  instance: z.string().optional(),
  mars: z.boolean().optional(),
  nonce: z.string().optional(),
  serverVersion: MssqlPreloginOptionsServerVersion$outboundSchema.optional(),
  threadId: z.number().int().optional(),
  traceId: z.string().optional(),
  unknown: z.record(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    encryptMode: "encrypt_mode",
    fedAuthRequired: "fed_auth_required",
    serverVersion: "server_version",
    threadId: "thread_id",
    traceId: "trace_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MssqlPreloginOptions$ {
  /** @deprecated use `MssqlPreloginOptions$inboundSchema` instead. */
  export const inboundSchema = MssqlPreloginOptions$inboundSchema;
  /** @deprecated use `MssqlPreloginOptions$outboundSchema` instead. */
  export const outboundSchema = MssqlPreloginOptions$outboundSchema;
  /** @deprecated use `MssqlPreloginOptions$Outbound` instead. */
  export type Outbound = MssqlPreloginOptions$Outbound;
}

export function mssqlPreloginOptionsToJSON(
  mssqlPreloginOptions: MssqlPreloginOptions,
): string {
  return JSON.stringify(
    MssqlPreloginOptions$outboundSchema.parse(mssqlPreloginOptions),
  );
}

export function mssqlPreloginOptionsFromJSON(
  jsonString: string,
): SafeParseResult<MssqlPreloginOptions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MssqlPreloginOptions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MssqlPreloginOptions' from JSON`,
  );
}
