/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  OllamaModel,
  OllamaModel$inboundSchema,
  OllamaModel$Outbound,
  OllamaModel$outboundSchema,
} from "./ollamamodel.js";

export type Ollama = {
  models?: Array<OllamaModel> | null | undefined;
  runningModels?: Array<OllamaModel> | null | undefined;
  version?: string | undefined;
};

/** @internal */
export const Ollama$inboundSchema: z.ZodType<Ollama, z.ZodTypeDef, unknown> = z
  .object({
    models: z.nullable(z.array(OllamaModel$inboundSchema)).optional(),
    running_models: z.nullable(z.array(OllamaModel$inboundSchema)).optional(),
    version: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "running_models": "runningModels",
    });
  });

/** @internal */
export type Ollama$Outbound = {
  models?: Array<OllamaModel$Outbound> | null | undefined;
  running_models?: Array<OllamaModel$Outbound> | null | undefined;
  version?: string | undefined;
};

/** @internal */
export const Ollama$outboundSchema: z.ZodType<
  Ollama$Outbound,
  z.ZodTypeDef,
  Ollama
> = z.object({
  models: z.nullable(z.array(OllamaModel$outboundSchema)).optional(),
  runningModels: z.nullable(z.array(OllamaModel$outboundSchema)).optional(),
  version: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    runningModels: "running_models",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Ollama$ {
  /** @deprecated use `Ollama$inboundSchema` instead. */
  export const inboundSchema = Ollama$inboundSchema;
  /** @deprecated use `Ollama$outboundSchema` instead. */
  export const outboundSchema = Ollama$outboundSchema;
  /** @deprecated use `Ollama$Outbound` instead. */
  export type Outbound = Ollama$Outbound;
}

export function ollamaToJSON(ollama: Ollama): string {
  return JSON.stringify(Ollama$outboundSchema.parse(ollama));
}

export function ollamaFromJSON(
  jsonString: string,
): SafeParseResult<Ollama, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Ollama$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Ollama' from JSON`,
  );
}
