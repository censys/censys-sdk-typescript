/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  DistinguishedName,
  DistinguishedName$inboundSchema,
  DistinguishedName$Outbound,
  DistinguishedName$outboundSchema,
} from "./distinguishedname.js";
import {
  EdiPartyName,
  EdiPartyName$inboundSchema,
  EdiPartyName$Outbound,
  EdiPartyName$outboundSchema,
} from "./edipartyname.js";
import {
  OtherName,
  OtherName$inboundSchema,
  OtherName$Outbound,
  OtherName$outboundSchema,
} from "./othername.js";

export type GeneralNames = {
  /**
   * The parsed directoryName entries in the GeneralName.
   */
  directoryNames?: Array<DistinguishedName> | null | undefined;
  /**
   * The parsed dNSName entries in the GeneralName.
   */
  dnsNames?: Array<string> | null | undefined;
  /**
   * The parsed eDIPartyName entries in the GeneralName.
   */
  ediPartyNames?: Array<EdiPartyName> | null | undefined;
  /**
   * The parsed rfc822Name entries in the GeneralName.
   */
  emailAddresses?: Array<string> | null | undefined;
  /**
   * The parsed ipAddress entries in the GeneralName.
   */
  ipAddresses?: Array<string> | null | undefined;
  /**
   * The parsed otherName entries in the GeneralName. An arbitrary binary value identified by an OID.
   */
  otherNames?: Array<OtherName> | null | undefined;
  /**
   * The parsed registeredID entries in the GeneralName. Stored in dotted-decimal format.
   */
  registeredIds?: Array<string> | null | undefined;
  /**
   * The parsed uniformResourceIdentifier entries in the GeneralName.
   */
  uniformResourceIdentifiers?: Array<string> | null | undefined;
};

/** @internal */
export const GeneralNames$inboundSchema: z.ZodType<
  GeneralNames,
  z.ZodTypeDef,
  unknown
> = z.object({
  directory_names: z.nullable(z.array(DistinguishedName$inboundSchema))
    .optional(),
  dns_names: z.nullable(z.array(z.string())).optional(),
  edi_party_names: z.nullable(z.array(EdiPartyName$inboundSchema)).optional(),
  email_addresses: z.nullable(z.array(z.string())).optional(),
  ip_addresses: z.nullable(z.array(z.string())).optional(),
  other_names: z.nullable(z.array(OtherName$inboundSchema)).optional(),
  registered_ids: z.nullable(z.array(z.string())).optional(),
  uniform_resource_identifiers: z.nullable(z.array(z.string())).optional(),
}).transform((v) => {
  return remap$(v, {
    "directory_names": "directoryNames",
    "dns_names": "dnsNames",
    "edi_party_names": "ediPartyNames",
    "email_addresses": "emailAddresses",
    "ip_addresses": "ipAddresses",
    "other_names": "otherNames",
    "registered_ids": "registeredIds",
    "uniform_resource_identifiers": "uniformResourceIdentifiers",
  });
});

/** @internal */
export type GeneralNames$Outbound = {
  directory_names?: Array<DistinguishedName$Outbound> | null | undefined;
  dns_names?: Array<string> | null | undefined;
  edi_party_names?: Array<EdiPartyName$Outbound> | null | undefined;
  email_addresses?: Array<string> | null | undefined;
  ip_addresses?: Array<string> | null | undefined;
  other_names?: Array<OtherName$Outbound> | null | undefined;
  registered_ids?: Array<string> | null | undefined;
  uniform_resource_identifiers?: Array<string> | null | undefined;
};

/** @internal */
export const GeneralNames$outboundSchema: z.ZodType<
  GeneralNames$Outbound,
  z.ZodTypeDef,
  GeneralNames
> = z.object({
  directoryNames: z.nullable(z.array(DistinguishedName$outboundSchema))
    .optional(),
  dnsNames: z.nullable(z.array(z.string())).optional(),
  ediPartyNames: z.nullable(z.array(EdiPartyName$outboundSchema)).optional(),
  emailAddresses: z.nullable(z.array(z.string())).optional(),
  ipAddresses: z.nullable(z.array(z.string())).optional(),
  otherNames: z.nullable(z.array(OtherName$outboundSchema)).optional(),
  registeredIds: z.nullable(z.array(z.string())).optional(),
  uniformResourceIdentifiers: z.nullable(z.array(z.string())).optional(),
}).transform((v) => {
  return remap$(v, {
    directoryNames: "directory_names",
    dnsNames: "dns_names",
    ediPartyNames: "edi_party_names",
    emailAddresses: "email_addresses",
    ipAddresses: "ip_addresses",
    otherNames: "other_names",
    registeredIds: "registered_ids",
    uniformResourceIdentifiers: "uniform_resource_identifiers",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GeneralNames$ {
  /** @deprecated use `GeneralNames$inboundSchema` instead. */
  export const inboundSchema = GeneralNames$inboundSchema;
  /** @deprecated use `GeneralNames$outboundSchema` instead. */
  export const outboundSchema = GeneralNames$outboundSchema;
  /** @deprecated use `GeneralNames$Outbound` instead. */
  export type Outbound = GeneralNames$Outbound;
}

export function generalNamesToJSON(generalNames: GeneralNames): string {
  return JSON.stringify(GeneralNames$outboundSchema.parse(generalNames));
}

export function generalNamesFromJSON(
  jsonString: string,
): SafeParseResult<GeneralNames, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GeneralNames$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GeneralNames' from JSON`,
  );
}
