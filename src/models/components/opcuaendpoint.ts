/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  OpcUaDescription,
  OpcUaDescription$inboundSchema,
  OpcUaDescription$Outbound,
  OpcUaDescription$outboundSchema,
} from "./opcuadescription.js";
import {
  OpcUaUserTokenPolicy,
  OpcUaUserTokenPolicy$inboundSchema,
  OpcUaUserTokenPolicy$Outbound,
  OpcUaUserTokenPolicy$outboundSchema,
} from "./opcuausertokenpolicy.js";

export type OpcUaEndpoint = {
  endpointUrl?: string | undefined;
  securityLevel?: number | undefined;
  securityMode?: number | undefined;
  securityPolicyUri?: string | undefined;
  serveCert?: string | undefined;
  server?: OpcUaDescription | undefined;
  transportProfileUri?: string | undefined;
  userIdentityToken?: Array<OpcUaUserTokenPolicy> | null | undefined;
};

/** @internal */
export const OpcUaEndpoint$inboundSchema: z.ZodType<
  OpcUaEndpoint,
  z.ZodTypeDef,
  unknown
> = z.object({
  endpoint_url: z.string().optional(),
  security_level: z.number().int().optional(),
  security_mode: z.number().int().optional(),
  security_policy_uri: z.string().optional(),
  serve_cert: z.string().optional(),
  server: OpcUaDescription$inboundSchema.optional(),
  transport_profile_uri: z.string().optional(),
  user_identity_token: z.nullable(z.array(OpcUaUserTokenPolicy$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "endpoint_url": "endpointUrl",
    "security_level": "securityLevel",
    "security_mode": "securityMode",
    "security_policy_uri": "securityPolicyUri",
    "serve_cert": "serveCert",
    "transport_profile_uri": "transportProfileUri",
    "user_identity_token": "userIdentityToken",
  });
});

/** @internal */
export type OpcUaEndpoint$Outbound = {
  endpoint_url?: string | undefined;
  security_level?: number | undefined;
  security_mode?: number | undefined;
  security_policy_uri?: string | undefined;
  serve_cert?: string | undefined;
  server?: OpcUaDescription$Outbound | undefined;
  transport_profile_uri?: string | undefined;
  user_identity_token?: Array<OpcUaUserTokenPolicy$Outbound> | null | undefined;
};

/** @internal */
export const OpcUaEndpoint$outboundSchema: z.ZodType<
  OpcUaEndpoint$Outbound,
  z.ZodTypeDef,
  OpcUaEndpoint
> = z.object({
  endpointUrl: z.string().optional(),
  securityLevel: z.number().int().optional(),
  securityMode: z.number().int().optional(),
  securityPolicyUri: z.string().optional(),
  serveCert: z.string().optional(),
  server: OpcUaDescription$outboundSchema.optional(),
  transportProfileUri: z.string().optional(),
  userIdentityToken: z.nullable(z.array(OpcUaUserTokenPolicy$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    endpointUrl: "endpoint_url",
    securityLevel: "security_level",
    securityMode: "security_mode",
    securityPolicyUri: "security_policy_uri",
    serveCert: "serve_cert",
    transportProfileUri: "transport_profile_uri",
    userIdentityToken: "user_identity_token",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpcUaEndpoint$ {
  /** @deprecated use `OpcUaEndpoint$inboundSchema` instead. */
  export const inboundSchema = OpcUaEndpoint$inboundSchema;
  /** @deprecated use `OpcUaEndpoint$outboundSchema` instead. */
  export const outboundSchema = OpcUaEndpoint$outboundSchema;
  /** @deprecated use `OpcUaEndpoint$Outbound` instead. */
  export type Outbound = OpcUaEndpoint$Outbound;
}

export function opcUaEndpointToJSON(opcUaEndpoint: OpcUaEndpoint): string {
  return JSON.stringify(OpcUaEndpoint$outboundSchema.parse(opcUaEndpoint));
}

export function opcUaEndpointFromJSON(
  jsonString: string,
): SafeParseResult<OpcUaEndpoint, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpcUaEndpoint$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpcUaEndpoint' from JSON`,
  );
}
