/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SshEndpointId = {
  comment?: string | undefined;
  protocolVersion?: string | undefined;
  raw?: string | undefined;
  softwareVersion?: string | undefined;
};

/** @internal */
export const SshEndpointId$inboundSchema: z.ZodType<
  SshEndpointId,
  z.ZodTypeDef,
  unknown
> = z.object({
  comment: z.string().optional(),
  protocol_version: z.string().optional(),
  raw: z.string().optional(),
  software_version: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "protocol_version": "protocolVersion",
    "software_version": "softwareVersion",
  });
});

/** @internal */
export type SshEndpointId$Outbound = {
  comment?: string | undefined;
  protocol_version?: string | undefined;
  raw?: string | undefined;
  software_version?: string | undefined;
};

/** @internal */
export const SshEndpointId$outboundSchema: z.ZodType<
  SshEndpointId$Outbound,
  z.ZodTypeDef,
  SshEndpointId
> = z.object({
  comment: z.string().optional(),
  protocolVersion: z.string().optional(),
  raw: z.string().optional(),
  softwareVersion: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    protocolVersion: "protocol_version",
    softwareVersion: "software_version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SshEndpointId$ {
  /** @deprecated use `SshEndpointId$inboundSchema` instead. */
  export const inboundSchema = SshEndpointId$inboundSchema;
  /** @deprecated use `SshEndpointId$outboundSchema` instead. */
  export const outboundSchema = SshEndpointId$outboundSchema;
  /** @deprecated use `SshEndpointId$Outbound` instead. */
  export type Outbound = SshEndpointId$Outbound;
}

export function sshEndpointIdToJSON(sshEndpointId: SshEndpointId): string {
  return JSON.stringify(SshEndpointId$outboundSchema.parse(sshEndpointId));
}

export function sshEndpointIdFromJSON(
  jsonString: string,
): SafeParseResult<SshEndpointId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SshEndpointId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SshEndpointId' from JSON`,
  );
}
