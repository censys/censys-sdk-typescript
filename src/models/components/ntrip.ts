/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Ntrip = {};

/** @internal */
export const Ntrip$inboundSchema: z.ZodType<Ntrip, z.ZodTypeDef, unknown> = z
  .object({});

/** @internal */
export type Ntrip$Outbound = {};

/** @internal */
export const Ntrip$outboundSchema: z.ZodType<
  Ntrip$Outbound,
  z.ZodTypeDef,
  Ntrip
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Ntrip$ {
  /** @deprecated use `Ntrip$inboundSchema` instead. */
  export const inboundSchema = Ntrip$inboundSchema;
  /** @deprecated use `Ntrip$outboundSchema` instead. */
  export const outboundSchema = Ntrip$outboundSchema;
  /** @deprecated use `Ntrip$Outbound` instead. */
  export type Outbound = Ntrip$Outbound;
}

export function ntripToJSON(ntrip: Ntrip): string {
  return JSON.stringify(Ntrip$outboundSchema.parse(ntrip));
}

export function ntripFromJSON(
  jsonString: string,
): SafeParseResult<Ntrip, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Ntrip$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Ntrip' from JSON`,
  );
}
