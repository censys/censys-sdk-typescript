/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ChromeDevtoolsTarget = {
  title?: string | undefined;
  type?: string | undefined;
  url?: string | undefined;
};

/** @internal */
export const ChromeDevtoolsTarget$inboundSchema: z.ZodType<
  ChromeDevtoolsTarget,
  z.ZodTypeDef,
  unknown
> = z.object({
  title: z.string().optional(),
  type: z.string().optional(),
  url: z.string().optional(),
});

/** @internal */
export type ChromeDevtoolsTarget$Outbound = {
  title?: string | undefined;
  type?: string | undefined;
  url?: string | undefined;
};

/** @internal */
export const ChromeDevtoolsTarget$outboundSchema: z.ZodType<
  ChromeDevtoolsTarget$Outbound,
  z.ZodTypeDef,
  ChromeDevtoolsTarget
> = z.object({
  title: z.string().optional(),
  type: z.string().optional(),
  url: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChromeDevtoolsTarget$ {
  /** @deprecated use `ChromeDevtoolsTarget$inboundSchema` instead. */
  export const inboundSchema = ChromeDevtoolsTarget$inboundSchema;
  /** @deprecated use `ChromeDevtoolsTarget$outboundSchema` instead. */
  export const outboundSchema = ChromeDevtoolsTarget$outboundSchema;
  /** @deprecated use `ChromeDevtoolsTarget$Outbound` instead. */
  export type Outbound = ChromeDevtoolsTarget$Outbound;
}

export function chromeDevtoolsTargetToJSON(
  chromeDevtoolsTarget: ChromeDevtoolsTarget,
): string {
  return JSON.stringify(
    ChromeDevtoolsTarget$outboundSchema.parse(chromeDevtoolsTarget),
  );
}

export function chromeDevtoolsTargetFromJSON(
  jsonString: string,
): SafeParseResult<ChromeDevtoolsTarget, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChromeDevtoolsTarget$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChromeDevtoolsTarget' from JSON`,
  );
}
