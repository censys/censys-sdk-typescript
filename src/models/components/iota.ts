/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  NodeInfoV0,
  NodeInfoV0$inboundSchema,
  NodeInfoV0$Outbound,
  NodeInfoV0$outboundSchema,
} from "./nodeinfov0.js";
import {
  NodeInfoV1,
  NodeInfoV1$inboundSchema,
  NodeInfoV1$Outbound,
  NodeInfoV1$outboundSchema,
} from "./nodeinfov1.js";
import {
  NodeInfoV2,
  NodeInfoV2$inboundSchema,
  NodeInfoV2$Outbound,
  NodeInfoV2$outboundSchema,
} from "./nodeinfov2.js";

export type Iota = {
  v0Info?: NodeInfoV0 | undefined;
  v1Info?: NodeInfoV1 | undefined;
  v2Info?: NodeInfoV2 | undefined;
};

/** @internal */
export const Iota$inboundSchema: z.ZodType<Iota, z.ZodTypeDef, unknown> = z
  .object({
    v0_info: NodeInfoV0$inboundSchema.optional(),
    v1_info: NodeInfoV1$inboundSchema.optional(),
    v2_info: NodeInfoV2$inboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      "v0_info": "v0Info",
      "v1_info": "v1Info",
      "v2_info": "v2Info",
    });
  });

/** @internal */
export type Iota$Outbound = {
  v0_info?: NodeInfoV0$Outbound | undefined;
  v1_info?: NodeInfoV1$Outbound | undefined;
  v2_info?: NodeInfoV2$Outbound | undefined;
};

/** @internal */
export const Iota$outboundSchema: z.ZodType<Iota$Outbound, z.ZodTypeDef, Iota> =
  z.object({
    v0Info: NodeInfoV0$outboundSchema.optional(),
    v1Info: NodeInfoV1$outboundSchema.optional(),
    v2Info: NodeInfoV2$outboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      v0Info: "v0_info",
      v1Info: "v1_info",
      v2Info: "v2_info",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Iota$ {
  /** @deprecated use `Iota$inboundSchema` instead. */
  export const inboundSchema = Iota$inboundSchema;
  /** @deprecated use `Iota$outboundSchema` instead. */
  export const outboundSchema = Iota$outboundSchema;
  /** @deprecated use `Iota$Outbound` instead. */
  export type Outbound = Iota$Outbound;
}

export function iotaToJSON(iota: Iota): string {
  return JSON.stringify(Iota$outboundSchema.parse(iota));
}

export function iotaFromJSON(
  jsonString: string,
): SafeParseResult<Iota, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Iota$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Iota' from JSON`,
  );
}
