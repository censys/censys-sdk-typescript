/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AuthorityInfoAccess = {
  issuerUrls?: Array<string> | null | undefined;
  ocspUrls?: Array<string> | null | undefined;
};

/** @internal */
export const AuthorityInfoAccess$inboundSchema: z.ZodType<
  AuthorityInfoAccess,
  z.ZodTypeDef,
  unknown
> = z.object({
  issuer_urls: z.nullable(z.array(z.string())).optional(),
  ocsp_urls: z.nullable(z.array(z.string())).optional(),
}).transform((v) => {
  return remap$(v, {
    "issuer_urls": "issuerUrls",
    "ocsp_urls": "ocspUrls",
  });
});

/** @internal */
export type AuthorityInfoAccess$Outbound = {
  issuer_urls?: Array<string> | null | undefined;
  ocsp_urls?: Array<string> | null | undefined;
};

/** @internal */
export const AuthorityInfoAccess$outboundSchema: z.ZodType<
  AuthorityInfoAccess$Outbound,
  z.ZodTypeDef,
  AuthorityInfoAccess
> = z.object({
  issuerUrls: z.nullable(z.array(z.string())).optional(),
  ocspUrls: z.nullable(z.array(z.string())).optional(),
}).transform((v) => {
  return remap$(v, {
    issuerUrls: "issuer_urls",
    ocspUrls: "ocsp_urls",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthorityInfoAccess$ {
  /** @deprecated use `AuthorityInfoAccess$inboundSchema` instead. */
  export const inboundSchema = AuthorityInfoAccess$inboundSchema;
  /** @deprecated use `AuthorityInfoAccess$outboundSchema` instead. */
  export const outboundSchema = AuthorityInfoAccess$outboundSchema;
  /** @deprecated use `AuthorityInfoAccess$Outbound` instead. */
  export type Outbound = AuthorityInfoAccess$Outbound;
}

export function authorityInfoAccessToJSON(
  authorityInfoAccess: AuthorityInfoAccess,
): string {
  return JSON.stringify(
    AuthorityInfoAccess$outboundSchema.parse(authorityInfoAccess),
  );
}

export function authorityInfoAccessFromJSON(
  jsonString: string,
): SafeParseResult<AuthorityInfoAccess, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthorityInfoAccess$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthorityInfoAccess' from JSON`,
  );
}
