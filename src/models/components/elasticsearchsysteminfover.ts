/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ElasticSearchSystemInfoVer = {
  buildDate?: string | undefined;
  buildFlavor?: string | undefined;
  buildHash?: string | undefined;
  buildSnapshot?: boolean | undefined;
  buildType?: string | undefined;
  luceneVersion?: string | undefined;
  minIdxCompatVer?: string | undefined;
  minWireCompatVer?: string | undefined;
  number?: string | undefined;
};

/** @internal */
export const ElasticSearchSystemInfoVer$inboundSchema: z.ZodType<
  ElasticSearchSystemInfoVer,
  z.ZodTypeDef,
  unknown
> = z.object({
  build_date: z.string().optional(),
  build_flavor: z.string().optional(),
  build_hash: z.string().optional(),
  build_snapshot: z.boolean().optional(),
  build_type: z.string().optional(),
  lucene_version: z.string().optional(),
  min_idx_compat_ver: z.string().optional(),
  min_wire_compat_ver: z.string().optional(),
  number: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "build_date": "buildDate",
    "build_flavor": "buildFlavor",
    "build_hash": "buildHash",
    "build_snapshot": "buildSnapshot",
    "build_type": "buildType",
    "lucene_version": "luceneVersion",
    "min_idx_compat_ver": "minIdxCompatVer",
    "min_wire_compat_ver": "minWireCompatVer",
  });
});

/** @internal */
export type ElasticSearchSystemInfoVer$Outbound = {
  build_date?: string | undefined;
  build_flavor?: string | undefined;
  build_hash?: string | undefined;
  build_snapshot?: boolean | undefined;
  build_type?: string | undefined;
  lucene_version?: string | undefined;
  min_idx_compat_ver?: string | undefined;
  min_wire_compat_ver?: string | undefined;
  number?: string | undefined;
};

/** @internal */
export const ElasticSearchSystemInfoVer$outboundSchema: z.ZodType<
  ElasticSearchSystemInfoVer$Outbound,
  z.ZodTypeDef,
  ElasticSearchSystemInfoVer
> = z.object({
  buildDate: z.string().optional(),
  buildFlavor: z.string().optional(),
  buildHash: z.string().optional(),
  buildSnapshot: z.boolean().optional(),
  buildType: z.string().optional(),
  luceneVersion: z.string().optional(),
  minIdxCompatVer: z.string().optional(),
  minWireCompatVer: z.string().optional(),
  number: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    buildDate: "build_date",
    buildFlavor: "build_flavor",
    buildHash: "build_hash",
    buildSnapshot: "build_snapshot",
    buildType: "build_type",
    luceneVersion: "lucene_version",
    minIdxCompatVer: "min_idx_compat_ver",
    minWireCompatVer: "min_wire_compat_ver",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ElasticSearchSystemInfoVer$ {
  /** @deprecated use `ElasticSearchSystemInfoVer$inboundSchema` instead. */
  export const inboundSchema = ElasticSearchSystemInfoVer$inboundSchema;
  /** @deprecated use `ElasticSearchSystemInfoVer$outboundSchema` instead. */
  export const outboundSchema = ElasticSearchSystemInfoVer$outboundSchema;
  /** @deprecated use `ElasticSearchSystemInfoVer$Outbound` instead. */
  export type Outbound = ElasticSearchSystemInfoVer$Outbound;
}

export function elasticSearchSystemInfoVerToJSON(
  elasticSearchSystemInfoVer: ElasticSearchSystemInfoVer,
): string {
  return JSON.stringify(
    ElasticSearchSystemInfoVer$outboundSchema.parse(elasticSearchSystemInfoVer),
  );
}

export function elasticSearchSystemInfoVerFromJSON(
  jsonString: string,
): SafeParseResult<ElasticSearchSystemInfoVer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ElasticSearchSystemInfoVer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ElasticSearchSystemInfoVer' from JSON`,
  );
}
