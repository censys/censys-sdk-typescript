/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DhcpdiscoverIpAddress = {
  defaultGateway?: string | undefined;
  dhcpEnable?: boolean | undefined;
  ipAddress?: string | undefined;
  linkLocalAddress?: string | undefined;
  subnetmask?: string | undefined;
};

/** @internal */
export const DhcpdiscoverIpAddress$inboundSchema: z.ZodType<
  DhcpdiscoverIpAddress,
  z.ZodTypeDef,
  unknown
> = z.object({
  default_gateway: z.string().optional(),
  dhcp_enable: z.boolean().optional(),
  ip_address: z.string().optional(),
  link_local_address: z.string().optional(),
  subnetmask: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "default_gateway": "defaultGateway",
    "dhcp_enable": "dhcpEnable",
    "ip_address": "ipAddress",
    "link_local_address": "linkLocalAddress",
  });
});

/** @internal */
export type DhcpdiscoverIpAddress$Outbound = {
  default_gateway?: string | undefined;
  dhcp_enable?: boolean | undefined;
  ip_address?: string | undefined;
  link_local_address?: string | undefined;
  subnetmask?: string | undefined;
};

/** @internal */
export const DhcpdiscoverIpAddress$outboundSchema: z.ZodType<
  DhcpdiscoverIpAddress$Outbound,
  z.ZodTypeDef,
  DhcpdiscoverIpAddress
> = z.object({
  defaultGateway: z.string().optional(),
  dhcpEnable: z.boolean().optional(),
  ipAddress: z.string().optional(),
  linkLocalAddress: z.string().optional(),
  subnetmask: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    defaultGateway: "default_gateway",
    dhcpEnable: "dhcp_enable",
    ipAddress: "ip_address",
    linkLocalAddress: "link_local_address",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DhcpdiscoverIpAddress$ {
  /** @deprecated use `DhcpdiscoverIpAddress$inboundSchema` instead. */
  export const inboundSchema = DhcpdiscoverIpAddress$inboundSchema;
  /** @deprecated use `DhcpdiscoverIpAddress$outboundSchema` instead. */
  export const outboundSchema = DhcpdiscoverIpAddress$outboundSchema;
  /** @deprecated use `DhcpdiscoverIpAddress$Outbound` instead. */
  export type Outbound = DhcpdiscoverIpAddress$Outbound;
}

export function dhcpdiscoverIpAddressToJSON(
  dhcpdiscoverIpAddress: DhcpdiscoverIpAddress,
): string {
  return JSON.stringify(
    DhcpdiscoverIpAddress$outboundSchema.parse(dhcpdiscoverIpAddress),
  );
}

export function dhcpdiscoverIpAddressFromJSON(
  jsonString: string,
): SafeParseResult<DhcpdiscoverIpAddress, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DhcpdiscoverIpAddress$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DhcpdiscoverIpAddress' from JSON`,
  );
}
