/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type RawCertificateResponse = {
  certificateId: string;
  pem: string;
};

/** @internal */
export const RawCertificateResponse$inboundSchema: z.ZodType<
  RawCertificateResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  certificate_id: z.string(),
  pem: z.string(),
}).transform((v) => {
  return remap$(v, {
    "certificate_id": "certificateId",
  });
});

/** @internal */
export type RawCertificateResponse$Outbound = {
  certificate_id: string;
  pem: string;
};

/** @internal */
export const RawCertificateResponse$outboundSchema: z.ZodType<
  RawCertificateResponse$Outbound,
  z.ZodTypeDef,
  RawCertificateResponse
> = z.object({
  certificateId: z.string(),
  pem: z.string(),
}).transform((v) => {
  return remap$(v, {
    certificateId: "certificate_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RawCertificateResponse$ {
  /** @deprecated use `RawCertificateResponse$inboundSchema` instead. */
  export const inboundSchema = RawCertificateResponse$inboundSchema;
  /** @deprecated use `RawCertificateResponse$outboundSchema` instead. */
  export const outboundSchema = RawCertificateResponse$outboundSchema;
  /** @deprecated use `RawCertificateResponse$Outbound` instead. */
  export type Outbound = RawCertificateResponse$Outbound;
}

export function rawCertificateResponseToJSON(
  rawCertificateResponse: RawCertificateResponse,
): string {
  return JSON.stringify(
    RawCertificateResponse$outboundSchema.parse(rawCertificateResponse),
  );
}

export function rawCertificateResponseFromJSON(
  jsonString: string,
): SafeParseResult<RawCertificateResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RawCertificateResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RawCertificateResponse' from JSON`,
  );
}
