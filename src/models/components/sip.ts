/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Sip = {
  code?: number | undefined;
  /**
   * Server software reported by service
   */
  server?: string | undefined;
  status?: string | undefined;
  /**
   * SIP version
   */
  version?: string | undefined;
};

/** @internal */
export const Sip$inboundSchema: z.ZodType<Sip, z.ZodTypeDef, unknown> = z
  .object({
    code: z.number().int().optional(),
    server: z.string().optional(),
    status: z.string().optional(),
    version: z.string().optional(),
  });

/** @internal */
export type Sip$Outbound = {
  code?: number | undefined;
  server?: string | undefined;
  status?: string | undefined;
  version?: string | undefined;
};

/** @internal */
export const Sip$outboundSchema: z.ZodType<Sip$Outbound, z.ZodTypeDef, Sip> = z
  .object({
    code: z.number().int().optional(),
    server: z.string().optional(),
    status: z.string().optional(),
    version: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Sip$ {
  /** @deprecated use `Sip$inboundSchema` instead. */
  export const inboundSchema = Sip$inboundSchema;
  /** @deprecated use `Sip$outboundSchema` instead. */
  export const outboundSchema = Sip$outboundSchema;
  /** @deprecated use `Sip$Outbound` instead. */
  export type Outbound = Sip$Outbound;
}

export function sipToJSON(sip: Sip): string {
  return JSON.stringify(Sip$outboundSchema.parse(sip));
}

export function sipFromJSON(
  jsonString: string,
): SafeParseResult<Sip, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Sip$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Sip' from JSON`,
  );
}
