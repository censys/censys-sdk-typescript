/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type MongodbBuildInfoBuildEnvironment = {
  cc?: string | undefined;
  ccFlags?: string | undefined;
  cxx?: string | undefined;
  cxxFlags?: string | undefined;
  distArch?: string | undefined;
  distMod?: string | undefined;
  linkFlags?: string | undefined;
  targetArch?: string | undefined;
  targetOs?: string | undefined;
};

/** @internal */
export const MongodbBuildInfoBuildEnvironment$inboundSchema: z.ZodType<
  MongodbBuildInfoBuildEnvironment,
  z.ZodTypeDef,
  unknown
> = z.object({
  cc: z.string().optional(),
  cc_flags: z.string().optional(),
  cxx: z.string().optional(),
  cxx_flags: z.string().optional(),
  dist_arch: z.string().optional(),
  dist_mod: z.string().optional(),
  link_flags: z.string().optional(),
  target_arch: z.string().optional(),
  target_os: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "cc_flags": "ccFlags",
    "cxx_flags": "cxxFlags",
    "dist_arch": "distArch",
    "dist_mod": "distMod",
    "link_flags": "linkFlags",
    "target_arch": "targetArch",
    "target_os": "targetOs",
  });
});

/** @internal */
export type MongodbBuildInfoBuildEnvironment$Outbound = {
  cc?: string | undefined;
  cc_flags?: string | undefined;
  cxx?: string | undefined;
  cxx_flags?: string | undefined;
  dist_arch?: string | undefined;
  dist_mod?: string | undefined;
  link_flags?: string | undefined;
  target_arch?: string | undefined;
  target_os?: string | undefined;
};

/** @internal */
export const MongodbBuildInfoBuildEnvironment$outboundSchema: z.ZodType<
  MongodbBuildInfoBuildEnvironment$Outbound,
  z.ZodTypeDef,
  MongodbBuildInfoBuildEnvironment
> = z.object({
  cc: z.string().optional(),
  ccFlags: z.string().optional(),
  cxx: z.string().optional(),
  cxxFlags: z.string().optional(),
  distArch: z.string().optional(),
  distMod: z.string().optional(),
  linkFlags: z.string().optional(),
  targetArch: z.string().optional(),
  targetOs: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    ccFlags: "cc_flags",
    cxxFlags: "cxx_flags",
    distArch: "dist_arch",
    distMod: "dist_mod",
    linkFlags: "link_flags",
    targetArch: "target_arch",
    targetOs: "target_os",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MongodbBuildInfoBuildEnvironment$ {
  /** @deprecated use `MongodbBuildInfoBuildEnvironment$inboundSchema` instead. */
  export const inboundSchema = MongodbBuildInfoBuildEnvironment$inboundSchema;
  /** @deprecated use `MongodbBuildInfoBuildEnvironment$outboundSchema` instead. */
  export const outboundSchema = MongodbBuildInfoBuildEnvironment$outboundSchema;
  /** @deprecated use `MongodbBuildInfoBuildEnvironment$Outbound` instead. */
  export type Outbound = MongodbBuildInfoBuildEnvironment$Outbound;
}

export function mongodbBuildInfoBuildEnvironmentToJSON(
  mongodbBuildInfoBuildEnvironment: MongodbBuildInfoBuildEnvironment,
): string {
  return JSON.stringify(
    MongodbBuildInfoBuildEnvironment$outboundSchema.parse(
      mongodbBuildInfoBuildEnvironment,
    ),
  );
}

export function mongodbBuildInfoBuildEnvironmentFromJSON(
  jsonString: string,
): SafeParseResult<MongodbBuildInfoBuildEnvironment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MongodbBuildInfoBuildEnvironment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MongodbBuildInfoBuildEnvironment' from JSON`,
  );
}
