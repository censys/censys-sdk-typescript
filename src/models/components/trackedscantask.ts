/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const TrackedScanTaskStatus = {
  Unknown: "",
  Scanning: "scanning",
  Scanned: "scanned",
  Rejected: "rejected",
  TimedOut: "timed_out",
  Completed: "completed",
  Ignored: "ignored",
} as const;
export type TrackedScanTaskStatus = ClosedEnum<typeof TrackedScanTaskStatus>;

export type TrackedScanTask = {
  description?: string | undefined;
  status?: TrackedScanTaskStatus | undefined;
  updateTime?: string | undefined;
};

/** @internal */
export const TrackedScanTaskStatus$inboundSchema: z.ZodNativeEnum<
  typeof TrackedScanTaskStatus
> = z.nativeEnum(TrackedScanTaskStatus);

/** @internal */
export const TrackedScanTaskStatus$outboundSchema: z.ZodNativeEnum<
  typeof TrackedScanTaskStatus
> = TrackedScanTaskStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TrackedScanTaskStatus$ {
  /** @deprecated use `TrackedScanTaskStatus$inboundSchema` instead. */
  export const inboundSchema = TrackedScanTaskStatus$inboundSchema;
  /** @deprecated use `TrackedScanTaskStatus$outboundSchema` instead. */
  export const outboundSchema = TrackedScanTaskStatus$outboundSchema;
}

/** @internal */
export const TrackedScanTask$inboundSchema: z.ZodType<
  TrackedScanTask,
  z.ZodTypeDef,
  unknown
> = z.object({
  description: z.string().optional(),
  status: TrackedScanTaskStatus$inboundSchema.optional(),
  update_time: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "update_time": "updateTime",
  });
});

/** @internal */
export type TrackedScanTask$Outbound = {
  description?: string | undefined;
  status?: string | undefined;
  update_time?: string | undefined;
};

/** @internal */
export const TrackedScanTask$outboundSchema: z.ZodType<
  TrackedScanTask$Outbound,
  z.ZodTypeDef,
  TrackedScanTask
> = z.object({
  description: z.string().optional(),
  status: TrackedScanTaskStatus$outboundSchema.optional(),
  updateTime: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    updateTime: "update_time",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TrackedScanTask$ {
  /** @deprecated use `TrackedScanTask$inboundSchema` instead. */
  export const inboundSchema = TrackedScanTask$inboundSchema;
  /** @deprecated use `TrackedScanTask$outboundSchema` instead. */
  export const outboundSchema = TrackedScanTask$outboundSchema;
  /** @deprecated use `TrackedScanTask$Outbound` instead. */
  export type Outbound = TrackedScanTask$Outbound;
}

export function trackedScanTaskToJSON(
  trackedScanTask: TrackedScanTask,
): string {
  return JSON.stringify(TrackedScanTask$outboundSchema.parse(trackedScanTask));
}

export function trackedScanTaskFromJSON(
  jsonString: string,
): SafeParseResult<TrackedScanTask, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TrackedScanTask$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TrackedScanTask' from JSON`,
  );
}
