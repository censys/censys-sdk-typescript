/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CiscoIpslaMeasureResponse = {
  flags?: number | undefined;
  payload?: string | undefined;
  receiveSeq?: number | undefined;
  receiveTime?: number | undefined;
  sendSeq?: number | undefined;
  sendTime?: number | undefined;
  type?: number | undefined;
};

/** @internal */
export const CiscoIpslaMeasureResponse$inboundSchema: z.ZodType<
  CiscoIpslaMeasureResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  flags: z.number().int().optional(),
  payload: z.string().optional(),
  receive_seq: z.number().int().optional(),
  receive_time: z.number().int().optional(),
  send_seq: z.number().int().optional(),
  send_time: z.number().int().optional(),
  type: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "receive_seq": "receiveSeq",
    "receive_time": "receiveTime",
    "send_seq": "sendSeq",
    "send_time": "sendTime",
  });
});

/** @internal */
export type CiscoIpslaMeasureResponse$Outbound = {
  flags?: number | undefined;
  payload?: string | undefined;
  receive_seq?: number | undefined;
  receive_time?: number | undefined;
  send_seq?: number | undefined;
  send_time?: number | undefined;
  type?: number | undefined;
};

/** @internal */
export const CiscoIpslaMeasureResponse$outboundSchema: z.ZodType<
  CiscoIpslaMeasureResponse$Outbound,
  z.ZodTypeDef,
  CiscoIpslaMeasureResponse
> = z.object({
  flags: z.number().int().optional(),
  payload: z.string().optional(),
  receiveSeq: z.number().int().optional(),
  receiveTime: z.number().int().optional(),
  sendSeq: z.number().int().optional(),
  sendTime: z.number().int().optional(),
  type: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    receiveSeq: "receive_seq",
    receiveTime: "receive_time",
    sendSeq: "send_seq",
    sendTime: "send_time",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CiscoIpslaMeasureResponse$ {
  /** @deprecated use `CiscoIpslaMeasureResponse$inboundSchema` instead. */
  export const inboundSchema = CiscoIpslaMeasureResponse$inboundSchema;
  /** @deprecated use `CiscoIpslaMeasureResponse$outboundSchema` instead. */
  export const outboundSchema = CiscoIpslaMeasureResponse$outboundSchema;
  /** @deprecated use `CiscoIpslaMeasureResponse$Outbound` instead. */
  export type Outbound = CiscoIpslaMeasureResponse$Outbound;
}

export function ciscoIpslaMeasureResponseToJSON(
  ciscoIpslaMeasureResponse: CiscoIpslaMeasureResponse,
): string {
  return JSON.stringify(
    CiscoIpslaMeasureResponse$outboundSchema.parse(ciscoIpslaMeasureResponse),
  );
}

export function ciscoIpslaMeasureResponseFromJSON(
  jsonString: string,
): SafeParseResult<CiscoIpslaMeasureResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CiscoIpslaMeasureResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CiscoIpslaMeasureResponse' from JSON`,
  );
}
