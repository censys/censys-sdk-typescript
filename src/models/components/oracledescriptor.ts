/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type OracleDescriptor = {
  /**
   * The dot-delimited path to the parsed value from the error received when the initial handshake is refused.
   */
  key?: string | undefined;
  /**
   * The parsed value from the error received when the initial handshake is refused.
   */
  value?: string | undefined;
};

/** @internal */
export const OracleDescriptor$inboundSchema: z.ZodType<
  OracleDescriptor,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string().optional(),
  value: z.string().optional(),
});

/** @internal */
export type OracleDescriptor$Outbound = {
  key?: string | undefined;
  value?: string | undefined;
};

/** @internal */
export const OracleDescriptor$outboundSchema: z.ZodType<
  OracleDescriptor$Outbound,
  z.ZodTypeDef,
  OracleDescriptor
> = z.object({
  key: z.string().optional(),
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OracleDescriptor$ {
  /** @deprecated use `OracleDescriptor$inboundSchema` instead. */
  export const inboundSchema = OracleDescriptor$inboundSchema;
  /** @deprecated use `OracleDescriptor$outboundSchema` instead. */
  export const outboundSchema = OracleDescriptor$outboundSchema;
  /** @deprecated use `OracleDescriptor$Outbound` instead. */
  export type Outbound = OracleDescriptor$Outbound;
}

export function oracleDescriptorToJSON(
  oracleDescriptor: OracleDescriptor,
): string {
  return JSON.stringify(
    OracleDescriptor$outboundSchema.parse(oracleDescriptor),
  );
}

export function oracleDescriptorFromJSON(
  jsonString: string,
): SafeParseResult<OracleDescriptor, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OracleDescriptor$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OracleDescriptor' from JSON`,
  );
}
