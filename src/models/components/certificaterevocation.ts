/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  CertificateRevocationRevocationInfo,
  CertificateRevocationRevocationInfo$inboundSchema,
  CertificateRevocationRevocationInfo$Outbound,
  CertificateRevocationRevocationInfo$outboundSchema,
} from "./certificaterevocationrevocationinfo.js";

export type CertificateRevocation = {
  crl?: CertificateRevocationRevocationInfo | undefined;
  ocsp?: CertificateRevocationRevocationInfo | undefined;
};

/** @internal */
export const CertificateRevocation$inboundSchema: z.ZodType<
  CertificateRevocation,
  z.ZodTypeDef,
  unknown
> = z.object({
  crl: CertificateRevocationRevocationInfo$inboundSchema.optional(),
  ocsp: CertificateRevocationRevocationInfo$inboundSchema.optional(),
});

/** @internal */
export type CertificateRevocation$Outbound = {
  crl?: CertificateRevocationRevocationInfo$Outbound | undefined;
  ocsp?: CertificateRevocationRevocationInfo$Outbound | undefined;
};

/** @internal */
export const CertificateRevocation$outboundSchema: z.ZodType<
  CertificateRevocation$Outbound,
  z.ZodTypeDef,
  CertificateRevocation
> = z.object({
  crl: CertificateRevocationRevocationInfo$outboundSchema.optional(),
  ocsp: CertificateRevocationRevocationInfo$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CertificateRevocation$ {
  /** @deprecated use `CertificateRevocation$inboundSchema` instead. */
  export const inboundSchema = CertificateRevocation$inboundSchema;
  /** @deprecated use `CertificateRevocation$outboundSchema` instead. */
  export const outboundSchema = CertificateRevocation$outboundSchema;
  /** @deprecated use `CertificateRevocation$Outbound` instead. */
  export type Outbound = CertificateRevocation$Outbound;
}

export function certificateRevocationToJSON(
  certificateRevocation: CertificateRevocation,
): string {
  return JSON.stringify(
    CertificateRevocation$outboundSchema.parse(certificateRevocation),
  );
}

export function certificateRevocationFromJSON(
  jsonString: string,
): SafeParseResult<CertificateRevocation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CertificateRevocation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CertificateRevocation' from JSON`,
  );
}
