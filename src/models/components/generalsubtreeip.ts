/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GeneralSubtreeIp = {
  /**
   * The first IP address in the range.
   */
  begin?: string | undefined;
  /**
   * The CIDR specifying the subtree.
   */
  cidr?: string | undefined;
  /**
   * The last IP address in the range.
   */
  end?: string | undefined;
  /**
   * The subnet mask of the CIDR.
   */
  mask?: string | undefined;
};

/** @internal */
export const GeneralSubtreeIp$inboundSchema: z.ZodType<
  GeneralSubtreeIp,
  z.ZodTypeDef,
  unknown
> = z.object({
  begin: z.string().optional(),
  cidr: z.string().optional(),
  end: z.string().optional(),
  mask: z.string().optional(),
});

/** @internal */
export type GeneralSubtreeIp$Outbound = {
  begin?: string | undefined;
  cidr?: string | undefined;
  end?: string | undefined;
  mask?: string | undefined;
};

/** @internal */
export const GeneralSubtreeIp$outboundSchema: z.ZodType<
  GeneralSubtreeIp$Outbound,
  z.ZodTypeDef,
  GeneralSubtreeIp
> = z.object({
  begin: z.string().optional(),
  cidr: z.string().optional(),
  end: z.string().optional(),
  mask: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GeneralSubtreeIp$ {
  /** @deprecated use `GeneralSubtreeIp$inboundSchema` instead. */
  export const inboundSchema = GeneralSubtreeIp$inboundSchema;
  /** @deprecated use `GeneralSubtreeIp$outboundSchema` instead. */
  export const outboundSchema = GeneralSubtreeIp$outboundSchema;
  /** @deprecated use `GeneralSubtreeIp$Outbound` instead. */
  export type Outbound = GeneralSubtreeIp$Outbound;
}

export function generalSubtreeIpToJSON(
  generalSubtreeIp: GeneralSubtreeIp,
): string {
  return JSON.stringify(
    GeneralSubtreeIp$outboundSchema.parse(generalSubtreeIp),
  );
}

export function generalSubtreeIpFromJSON(
  jsonString: string,
): SafeParseResult<GeneralSubtreeIp, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GeneralSubtreeIp$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GeneralSubtreeIp' from JSON`,
  );
}
