/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  PcAnywhereStatus,
  PcAnywhereStatus$inboundSchema,
  PcAnywhereStatus$Outbound,
  PcAnywhereStatus$outboundSchema,
} from "./pcanywherestatus.js";

export type PcAnywhere = {
  /**
   * Workstation Name, with padding bytes removed
   */
  name?: string | undefined;
  /**
   * Full 'NR' query response
   */
  nr?: string | undefined;
  status?: PcAnywhereStatus | undefined;
};

/** @internal */
export const PcAnywhere$inboundSchema: z.ZodType<
  PcAnywhere,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  nr: z.string().optional(),
  status: PcAnywhereStatus$inboundSchema.optional(),
});

/** @internal */
export type PcAnywhere$Outbound = {
  name?: string | undefined;
  nr?: string | undefined;
  status?: PcAnywhereStatus$Outbound | undefined;
};

/** @internal */
export const PcAnywhere$outboundSchema: z.ZodType<
  PcAnywhere$Outbound,
  z.ZodTypeDef,
  PcAnywhere
> = z.object({
  name: z.string().optional(),
  nr: z.string().optional(),
  status: PcAnywhereStatus$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PcAnywhere$ {
  /** @deprecated use `PcAnywhere$inboundSchema` instead. */
  export const inboundSchema = PcAnywhere$inboundSchema;
  /** @deprecated use `PcAnywhere$outboundSchema` instead. */
  export const outboundSchema = PcAnywhere$outboundSchema;
  /** @deprecated use `PcAnywhere$Outbound` instead. */
  export type Outbound = PcAnywhere$Outbound;
}

export function pcAnywhereToJSON(pcAnywhere: PcAnywhere): string {
  return JSON.stringify(PcAnywhere$outboundSchema.parse(pcAnywhere));
}

export function pcAnywhereFromJSON(
  jsonString: string,
): SafeParseResult<PcAnywhere, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PcAnywhere$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PcAnywhere' from JSON`,
  );
}
