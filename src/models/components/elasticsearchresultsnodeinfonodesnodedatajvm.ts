/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ElasticSearchResultsNodeInfoNodesNodeDataJVM = {
  gc?: Array<string> | null | undefined;
  inputArgs?: Array<string> | null | undefined;
  memoryPools?: Array<string> | null | undefined;
  startTime?: string | undefined;
  startTimeMs?: number | undefined;
  version?: string | undefined;
  vmName?: string | undefined;
  vmVendor?: string | undefined;
  vmVersion?: string | undefined;
};

/** @internal */
export const ElasticSearchResultsNodeInfoNodesNodeDataJVM$inboundSchema:
  z.ZodType<
    ElasticSearchResultsNodeInfoNodesNodeDataJVM,
    z.ZodTypeDef,
    unknown
  > = z.object({
    gc: z.nullable(z.array(z.string())).optional(),
    input_args: z.nullable(z.array(z.string())).optional(),
    memory_pools: z.nullable(z.array(z.string())).optional(),
    start_time: z.string().optional(),
    start_time_ms: z.number().int().optional(),
    version: z.string().optional(),
    vm_name: z.string().optional(),
    vm_vendor: z.string().optional(),
    vm_version: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "input_args": "inputArgs",
      "memory_pools": "memoryPools",
      "start_time": "startTime",
      "start_time_ms": "startTimeMs",
      "vm_name": "vmName",
      "vm_vendor": "vmVendor",
      "vm_version": "vmVersion",
    });
  });

/** @internal */
export type ElasticSearchResultsNodeInfoNodesNodeDataJVM$Outbound = {
  gc?: Array<string> | null | undefined;
  input_args?: Array<string> | null | undefined;
  memory_pools?: Array<string> | null | undefined;
  start_time?: string | undefined;
  start_time_ms?: number | undefined;
  version?: string | undefined;
  vm_name?: string | undefined;
  vm_vendor?: string | undefined;
  vm_version?: string | undefined;
};

/** @internal */
export const ElasticSearchResultsNodeInfoNodesNodeDataJVM$outboundSchema:
  z.ZodType<
    ElasticSearchResultsNodeInfoNodesNodeDataJVM$Outbound,
    z.ZodTypeDef,
    ElasticSearchResultsNodeInfoNodesNodeDataJVM
  > = z.object({
    gc: z.nullable(z.array(z.string())).optional(),
    inputArgs: z.nullable(z.array(z.string())).optional(),
    memoryPools: z.nullable(z.array(z.string())).optional(),
    startTime: z.string().optional(),
    startTimeMs: z.number().int().optional(),
    version: z.string().optional(),
    vmName: z.string().optional(),
    vmVendor: z.string().optional(),
    vmVersion: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      inputArgs: "input_args",
      memoryPools: "memory_pools",
      startTime: "start_time",
      startTimeMs: "start_time_ms",
      vmName: "vm_name",
      vmVendor: "vm_vendor",
      vmVersion: "vm_version",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ElasticSearchResultsNodeInfoNodesNodeDataJVM$ {
  /** @deprecated use `ElasticSearchResultsNodeInfoNodesNodeDataJVM$inboundSchema` instead. */
  export const inboundSchema =
    ElasticSearchResultsNodeInfoNodesNodeDataJVM$inboundSchema;
  /** @deprecated use `ElasticSearchResultsNodeInfoNodesNodeDataJVM$outboundSchema` instead. */
  export const outboundSchema =
    ElasticSearchResultsNodeInfoNodesNodeDataJVM$outboundSchema;
  /** @deprecated use `ElasticSearchResultsNodeInfoNodesNodeDataJVM$Outbound` instead. */
  export type Outbound = ElasticSearchResultsNodeInfoNodesNodeDataJVM$Outbound;
}

export function elasticSearchResultsNodeInfoNodesNodeDataJVMToJSON(
  elasticSearchResultsNodeInfoNodesNodeDataJVM:
    ElasticSearchResultsNodeInfoNodesNodeDataJVM,
): string {
  return JSON.stringify(
    ElasticSearchResultsNodeInfoNodesNodeDataJVM$outboundSchema.parse(
      elasticSearchResultsNodeInfoNodesNodeDataJVM,
    ),
  );
}

export function elasticSearchResultsNodeInfoNodesNodeDataJVMFromJSON(
  jsonString: string,
): SafeParseResult<
  ElasticSearchResultsNodeInfoNodesNodeDataJVM,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ElasticSearchResultsNodeInfoNodesNodeDataJVM$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ElasticSearchResultsNodeInfoNodesNodeDataJVM' from JSON`,
  );
}
