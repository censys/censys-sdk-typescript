/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type TorServiceDescriptor = {
  algorithmName?: string | undefined;
  hash?: string | undefined;
  hashBits?: number | undefined;
  onion?: string | undefined;
};

/** @internal */
export const TorServiceDescriptor$inboundSchema: z.ZodType<
  TorServiceDescriptor,
  z.ZodTypeDef,
  unknown
> = z.object({
  algorithm_name: z.string().optional(),
  hash: z.string().optional(),
  hash_bits: z.number().int().optional(),
  onion: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "algorithm_name": "algorithmName",
    "hash_bits": "hashBits",
  });
});

/** @internal */
export type TorServiceDescriptor$Outbound = {
  algorithm_name?: string | undefined;
  hash?: string | undefined;
  hash_bits?: number | undefined;
  onion?: string | undefined;
};

/** @internal */
export const TorServiceDescriptor$outboundSchema: z.ZodType<
  TorServiceDescriptor$Outbound,
  z.ZodTypeDef,
  TorServiceDescriptor
> = z.object({
  algorithmName: z.string().optional(),
  hash: z.string().optional(),
  hashBits: z.number().int().optional(),
  onion: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    algorithmName: "algorithm_name",
    hashBits: "hash_bits",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TorServiceDescriptor$ {
  /** @deprecated use `TorServiceDescriptor$inboundSchema` instead. */
  export const inboundSchema = TorServiceDescriptor$inboundSchema;
  /** @deprecated use `TorServiceDescriptor$outboundSchema` instead. */
  export const outboundSchema = TorServiceDescriptor$outboundSchema;
  /** @deprecated use `TorServiceDescriptor$Outbound` instead. */
  export type Outbound = TorServiceDescriptor$Outbound;
}

export function torServiceDescriptorToJSON(
  torServiceDescriptor: TorServiceDescriptor,
): string {
  return JSON.stringify(
    TorServiceDescriptor$outboundSchema.parse(torServiceDescriptor),
  );
}

export function torServiceDescriptorFromJSON(
  jsonString: string,
): SafeParseResult<TorServiceDescriptor, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TorServiceDescriptor$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TorServiceDescriptor' from JSON`,
  );
}
