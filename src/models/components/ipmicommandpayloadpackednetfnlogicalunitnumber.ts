/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type IpmiCommandPayloadPackedNetFnLogicalUnitNumber = {
  /**
   * The human-readable name of the LUN
   */
  name?: string | undefined;
  /**
   * The value of the LUN (3 bits)
   */
  raw?: number | undefined;
};

/** @internal */
export const IpmiCommandPayloadPackedNetFnLogicalUnitNumber$inboundSchema:
  z.ZodType<
    IpmiCommandPayloadPackedNetFnLogicalUnitNumber,
    z.ZodTypeDef,
    unknown
  > = z.object({
    name: z.string().optional(),
    raw: z.number().int().optional(),
  });

/** @internal */
export type IpmiCommandPayloadPackedNetFnLogicalUnitNumber$Outbound = {
  name?: string | undefined;
  raw?: number | undefined;
};

/** @internal */
export const IpmiCommandPayloadPackedNetFnLogicalUnitNumber$outboundSchema:
  z.ZodType<
    IpmiCommandPayloadPackedNetFnLogicalUnitNumber$Outbound,
    z.ZodTypeDef,
    IpmiCommandPayloadPackedNetFnLogicalUnitNumber
  > = z.object({
    name: z.string().optional(),
    raw: z.number().int().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IpmiCommandPayloadPackedNetFnLogicalUnitNumber$ {
  /** @deprecated use `IpmiCommandPayloadPackedNetFnLogicalUnitNumber$inboundSchema` instead. */
  export const inboundSchema =
    IpmiCommandPayloadPackedNetFnLogicalUnitNumber$inboundSchema;
  /** @deprecated use `IpmiCommandPayloadPackedNetFnLogicalUnitNumber$outboundSchema` instead. */
  export const outboundSchema =
    IpmiCommandPayloadPackedNetFnLogicalUnitNumber$outboundSchema;
  /** @deprecated use `IpmiCommandPayloadPackedNetFnLogicalUnitNumber$Outbound` instead. */
  export type Outbound =
    IpmiCommandPayloadPackedNetFnLogicalUnitNumber$Outbound;
}

export function ipmiCommandPayloadPackedNetFnLogicalUnitNumberToJSON(
  ipmiCommandPayloadPackedNetFnLogicalUnitNumber:
    IpmiCommandPayloadPackedNetFnLogicalUnitNumber,
): string {
  return JSON.stringify(
    IpmiCommandPayloadPackedNetFnLogicalUnitNumber$outboundSchema.parse(
      ipmiCommandPayloadPackedNetFnLogicalUnitNumber,
    ),
  );
}

export function ipmiCommandPayloadPackedNetFnLogicalUnitNumberFromJSON(
  jsonString: string,
): SafeParseResult<
  IpmiCommandPayloadPackedNetFnLogicalUnitNumber,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      IpmiCommandPayloadPackedNetFnLogicalUnitNumber$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'IpmiCommandPayloadPackedNetFnLogicalUnitNumber' from JSON`,
  );
}
