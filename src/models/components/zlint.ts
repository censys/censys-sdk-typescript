/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ZLint = {
  /**
   * Whether the certificate's attributes triggered any error lints for non-conformance to the X.509 standard.
   */
  errorsPresent?: boolean | undefined;
  /**
   * A list of lint names which failed, if applicable.
   */
  failedLints?: Array<string> | null | undefined;
  /**
   * Whether the certificate's attributes triggered any fatal lints for non-conformance to the X.509 standard.
   */
  fatalsPresent?: boolean | undefined;
  /**
   * Whether the certificate's attributes triggered any notice lints for non-conformance to the X.509 standard.
   */
  noticesPresent?: boolean | undefined;
  /**
   * An RFC-3339-formated timestamp indicating when the certificate was linted.
   */
  timestamp?: string | undefined;
  /**
   * The version of Zlint used to lint the certificate.
   */
  version?: number | undefined;
  /**
   * Whether the certificate's attributes triggered any warning lints for non-conformance to the X.509 standard.
   */
  warningsPresent?: boolean | undefined;
};

/** @internal */
export const ZLint$inboundSchema: z.ZodType<ZLint, z.ZodTypeDef, unknown> = z
  .object({
    errors_present: z.boolean().optional(),
    failed_lints: z.nullable(z.array(z.string())).optional(),
    fatals_present: z.boolean().optional(),
    notices_present: z.boolean().optional(),
    timestamp: z.string().optional(),
    version: z.number().int().optional(),
    warnings_present: z.boolean().optional(),
  }).transform((v) => {
    return remap$(v, {
      "errors_present": "errorsPresent",
      "failed_lints": "failedLints",
      "fatals_present": "fatalsPresent",
      "notices_present": "noticesPresent",
      "warnings_present": "warningsPresent",
    });
  });

/** @internal */
export type ZLint$Outbound = {
  errors_present?: boolean | undefined;
  failed_lints?: Array<string> | null | undefined;
  fatals_present?: boolean | undefined;
  notices_present?: boolean | undefined;
  timestamp?: string | undefined;
  version?: number | undefined;
  warnings_present?: boolean | undefined;
};

/** @internal */
export const ZLint$outboundSchema: z.ZodType<
  ZLint$Outbound,
  z.ZodTypeDef,
  ZLint
> = z.object({
  errorsPresent: z.boolean().optional(),
  failedLints: z.nullable(z.array(z.string())).optional(),
  fatalsPresent: z.boolean().optional(),
  noticesPresent: z.boolean().optional(),
  timestamp: z.string().optional(),
  version: z.number().int().optional(),
  warningsPresent: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    errorsPresent: "errors_present",
    failedLints: "failed_lints",
    fatalsPresent: "fatals_present",
    noticesPresent: "notices_present",
    warningsPresent: "warnings_present",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ZLint$ {
  /** @deprecated use `ZLint$inboundSchema` instead. */
  export const inboundSchema = ZLint$inboundSchema;
  /** @deprecated use `ZLint$outboundSchema` instead. */
  export const outboundSchema = ZLint$outboundSchema;
  /** @deprecated use `ZLint$Outbound` instead. */
  export type Outbound = ZLint$Outbound;
}

export function zLintToJSON(zLint: ZLint): string {
  return JSON.stringify(ZLint$outboundSchema.parse(zLint));
}

export function zLintFromJSON(
  jsonString: string,
): SafeParseResult<ZLint, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ZLint$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ZLint' from JSON`,
  );
}
