/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SystemCapabilities = {
  discoveryBye?: boolean | undefined;
  discoveryResolve?: boolean | undefined;
  firmwareUpgrade?: boolean | undefined;
  httpFirmwareUpgrade?: boolean | undefined;
  httpSupportInformation?: boolean | undefined;
  httpSystemBackup?: boolean | undefined;
  httpSystemLogging?: boolean | undefined;
  remoteDiscovery?: boolean | undefined;
  storageConfiguration?: boolean | undefined;
  systemBackup?: boolean | undefined;
  systemLogging?: boolean | undefined;
};

/** @internal */
export const SystemCapabilities$inboundSchema: z.ZodType<
  SystemCapabilities,
  z.ZodTypeDef,
  unknown
> = z.object({
  discovery_bye: z.boolean().optional(),
  discovery_resolve: z.boolean().optional(),
  firmware_upgrade: z.boolean().optional(),
  http_firmware_upgrade: z.boolean().optional(),
  http_support_information: z.boolean().optional(),
  http_system_backup: z.boolean().optional(),
  http_system_logging: z.boolean().optional(),
  remote_discovery: z.boolean().optional(),
  storage_configuration: z.boolean().optional(),
  system_backup: z.boolean().optional(),
  system_logging: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    "discovery_bye": "discoveryBye",
    "discovery_resolve": "discoveryResolve",
    "firmware_upgrade": "firmwareUpgrade",
    "http_firmware_upgrade": "httpFirmwareUpgrade",
    "http_support_information": "httpSupportInformation",
    "http_system_backup": "httpSystemBackup",
    "http_system_logging": "httpSystemLogging",
    "remote_discovery": "remoteDiscovery",
    "storage_configuration": "storageConfiguration",
    "system_backup": "systemBackup",
    "system_logging": "systemLogging",
  });
});

/** @internal */
export type SystemCapabilities$Outbound = {
  discovery_bye?: boolean | undefined;
  discovery_resolve?: boolean | undefined;
  firmware_upgrade?: boolean | undefined;
  http_firmware_upgrade?: boolean | undefined;
  http_support_information?: boolean | undefined;
  http_system_backup?: boolean | undefined;
  http_system_logging?: boolean | undefined;
  remote_discovery?: boolean | undefined;
  storage_configuration?: boolean | undefined;
  system_backup?: boolean | undefined;
  system_logging?: boolean | undefined;
};

/** @internal */
export const SystemCapabilities$outboundSchema: z.ZodType<
  SystemCapabilities$Outbound,
  z.ZodTypeDef,
  SystemCapabilities
> = z.object({
  discoveryBye: z.boolean().optional(),
  discoveryResolve: z.boolean().optional(),
  firmwareUpgrade: z.boolean().optional(),
  httpFirmwareUpgrade: z.boolean().optional(),
  httpSupportInformation: z.boolean().optional(),
  httpSystemBackup: z.boolean().optional(),
  httpSystemLogging: z.boolean().optional(),
  remoteDiscovery: z.boolean().optional(),
  storageConfiguration: z.boolean().optional(),
  systemBackup: z.boolean().optional(),
  systemLogging: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    discoveryBye: "discovery_bye",
    discoveryResolve: "discovery_resolve",
    firmwareUpgrade: "firmware_upgrade",
    httpFirmwareUpgrade: "http_firmware_upgrade",
    httpSupportInformation: "http_support_information",
    httpSystemBackup: "http_system_backup",
    httpSystemLogging: "http_system_logging",
    remoteDiscovery: "remote_discovery",
    storageConfiguration: "storage_configuration",
    systemBackup: "system_backup",
    systemLogging: "system_logging",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SystemCapabilities$ {
  /** @deprecated use `SystemCapabilities$inboundSchema` instead. */
  export const inboundSchema = SystemCapabilities$inboundSchema;
  /** @deprecated use `SystemCapabilities$outboundSchema` instead. */
  export const outboundSchema = SystemCapabilities$outboundSchema;
  /** @deprecated use `SystemCapabilities$Outbound` instead. */
  export type Outbound = SystemCapabilities$Outbound;
}

export function systemCapabilitiesToJSON(
  systemCapabilities: SystemCapabilities,
): string {
  return JSON.stringify(
    SystemCapabilities$outboundSchema.parse(systemCapabilities),
  );
}

export function systemCapabilitiesFromJSON(
  jsonString: string,
): SafeParseResult<SystemCapabilities, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SystemCapabilities$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SystemCapabilities' from JSON`,
  );
}
