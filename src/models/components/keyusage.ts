/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type KeyUsage = {
  /**
   * Whether the keyCertSign bit is set.
   */
  certificateSign?: boolean | undefined;
  /**
   * Whether the contentCommitment (formerly called nonRepudiation) bit is set.
   */
  contentCommitment?: boolean | undefined;
  /**
   * Whether the cRLSign bit is set.
   */
  crlSign?: boolean | undefined;
  /**
   * Whether the dataEncipherment bit is set.
   */
  dataEncipherment?: boolean | undefined;
  /**
   * Whether the decipherOnly bit is set.
   */
  decipherOnly?: boolean | undefined;
  /**
   * Whether the digitalSignature bit is set.
   */
  digitalSignature?: boolean | undefined;
  /**
   * Whether the encipherOnly bit is set.
   */
  encipherOnly?: boolean | undefined;
  /**
   * Whether the keyAgreement bit is set.
   */
  keyAgreement?: boolean | undefined;
  /**
   * Whether the keyEncipherment bit is set.
   */
  keyEncipherment?: boolean | undefined;
  /**
   * The integer value of the bitmask in the extension.
   */
  value?: number | undefined;
};

/** @internal */
export const KeyUsage$inboundSchema: z.ZodType<
  KeyUsage,
  z.ZodTypeDef,
  unknown
> = z.object({
  certificate_sign: z.boolean().optional(),
  content_commitment: z.boolean().optional(),
  crl_sign: z.boolean().optional(),
  data_encipherment: z.boolean().optional(),
  decipher_only: z.boolean().optional(),
  digital_signature: z.boolean().optional(),
  encipher_only: z.boolean().optional(),
  key_agreement: z.boolean().optional(),
  key_encipherment: z.boolean().optional(),
  value: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "certificate_sign": "certificateSign",
    "content_commitment": "contentCommitment",
    "crl_sign": "crlSign",
    "data_encipherment": "dataEncipherment",
    "decipher_only": "decipherOnly",
    "digital_signature": "digitalSignature",
    "encipher_only": "encipherOnly",
    "key_agreement": "keyAgreement",
    "key_encipherment": "keyEncipherment",
  });
});

/** @internal */
export type KeyUsage$Outbound = {
  certificate_sign?: boolean | undefined;
  content_commitment?: boolean | undefined;
  crl_sign?: boolean | undefined;
  data_encipherment?: boolean | undefined;
  decipher_only?: boolean | undefined;
  digital_signature?: boolean | undefined;
  encipher_only?: boolean | undefined;
  key_agreement?: boolean | undefined;
  key_encipherment?: boolean | undefined;
  value?: number | undefined;
};

/** @internal */
export const KeyUsage$outboundSchema: z.ZodType<
  KeyUsage$Outbound,
  z.ZodTypeDef,
  KeyUsage
> = z.object({
  certificateSign: z.boolean().optional(),
  contentCommitment: z.boolean().optional(),
  crlSign: z.boolean().optional(),
  dataEncipherment: z.boolean().optional(),
  decipherOnly: z.boolean().optional(),
  digitalSignature: z.boolean().optional(),
  encipherOnly: z.boolean().optional(),
  keyAgreement: z.boolean().optional(),
  keyEncipherment: z.boolean().optional(),
  value: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    certificateSign: "certificate_sign",
    contentCommitment: "content_commitment",
    crlSign: "crl_sign",
    dataEncipherment: "data_encipherment",
    decipherOnly: "decipher_only",
    digitalSignature: "digital_signature",
    encipherOnly: "encipher_only",
    keyAgreement: "key_agreement",
    keyEncipherment: "key_encipherment",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace KeyUsage$ {
  /** @deprecated use `KeyUsage$inboundSchema` instead. */
  export const inboundSchema = KeyUsage$inboundSchema;
  /** @deprecated use `KeyUsage$outboundSchema` instead. */
  export const outboundSchema = KeyUsage$outboundSchema;
  /** @deprecated use `KeyUsage$Outbound` instead. */
  export type Outbound = KeyUsage$Outbound;
}

export function keyUsageToJSON(keyUsage: KeyUsage): string {
  return JSON.stringify(KeyUsage$outboundSchema.parse(keyUsage));
}

export function keyUsageFromJSON(
  jsonString: string,
): SafeParseResult<KeyUsage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => KeyUsage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'KeyUsage' from JSON`,
  );
}
