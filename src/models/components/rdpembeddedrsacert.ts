/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type RdpEmbeddedRSACert = {
  keyLength?: number | undefined;
  magic?: number | undefined;
  maxBytesDatalen?: number | undefined;
  modulus?: string | undefined;
  modulusBitlen?: number | undefined;
  publicExponent?: number | undefined;
  signature?: string | undefined;
};

/** @internal */
export const RdpEmbeddedRSACert$inboundSchema: z.ZodType<
  RdpEmbeddedRSACert,
  z.ZodTypeDef,
  unknown
> = z.object({
  key_length: z.number().int().optional(),
  magic: z.number().int().optional(),
  max_bytes_datalen: z.number().int().optional(),
  modulus: z.string().optional(),
  modulus_bitlen: z.number().int().optional(),
  public_exponent: z.number().int().optional(),
  signature: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "key_length": "keyLength",
    "max_bytes_datalen": "maxBytesDatalen",
    "modulus_bitlen": "modulusBitlen",
    "public_exponent": "publicExponent",
  });
});

/** @internal */
export type RdpEmbeddedRSACert$Outbound = {
  key_length?: number | undefined;
  magic?: number | undefined;
  max_bytes_datalen?: number | undefined;
  modulus?: string | undefined;
  modulus_bitlen?: number | undefined;
  public_exponent?: number | undefined;
  signature?: string | undefined;
};

/** @internal */
export const RdpEmbeddedRSACert$outboundSchema: z.ZodType<
  RdpEmbeddedRSACert$Outbound,
  z.ZodTypeDef,
  RdpEmbeddedRSACert
> = z.object({
  keyLength: z.number().int().optional(),
  magic: z.number().int().optional(),
  maxBytesDatalen: z.number().int().optional(),
  modulus: z.string().optional(),
  modulusBitlen: z.number().int().optional(),
  publicExponent: z.number().int().optional(),
  signature: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    keyLength: "key_length",
    maxBytesDatalen: "max_bytes_datalen",
    modulusBitlen: "modulus_bitlen",
    publicExponent: "public_exponent",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RdpEmbeddedRSACert$ {
  /** @deprecated use `RdpEmbeddedRSACert$inboundSchema` instead. */
  export const inboundSchema = RdpEmbeddedRSACert$inboundSchema;
  /** @deprecated use `RdpEmbeddedRSACert$outboundSchema` instead. */
  export const outboundSchema = RdpEmbeddedRSACert$outboundSchema;
  /** @deprecated use `RdpEmbeddedRSACert$Outbound` instead. */
  export type Outbound = RdpEmbeddedRSACert$Outbound;
}

export function rdpEmbeddedRSACertToJSON(
  rdpEmbeddedRSACert: RdpEmbeddedRSACert,
): string {
  return JSON.stringify(
    RdpEmbeddedRSACert$outboundSchema.parse(rdpEmbeddedRSACert),
  );
}

export function rdpEmbeddedRSACertFromJSON(
  jsonString: string,
): SafeParseResult<RdpEmbeddedRSACert, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RdpEmbeddedRSACert$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RdpEmbeddedRSACert' from JSON`,
  );
}
