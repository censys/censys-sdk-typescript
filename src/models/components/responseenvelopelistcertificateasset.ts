/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  CertificateAsset,
  CertificateAsset$inboundSchema,
  CertificateAsset$Outbound,
  CertificateAsset$outboundSchema,
} from "./certificateasset.js";

export type ResponseEnvelopeListCertificateAsset = {
  result?: Array<CertificateAsset> | null | undefined;
};

/** @internal */
export const ResponseEnvelopeListCertificateAsset$inboundSchema: z.ZodType<
  ResponseEnvelopeListCertificateAsset,
  z.ZodTypeDef,
  unknown
> = z.object({
  result: z.nullable(z.array(CertificateAsset$inboundSchema)).optional(),
});

/** @internal */
export type ResponseEnvelopeListCertificateAsset$Outbound = {
  result?: Array<CertificateAsset$Outbound> | null | undefined;
};

/** @internal */
export const ResponseEnvelopeListCertificateAsset$outboundSchema: z.ZodType<
  ResponseEnvelopeListCertificateAsset$Outbound,
  z.ZodTypeDef,
  ResponseEnvelopeListCertificateAsset
> = z.object({
  result: z.nullable(z.array(CertificateAsset$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseEnvelopeListCertificateAsset$ {
  /** @deprecated use `ResponseEnvelopeListCertificateAsset$inboundSchema` instead. */
  export const inboundSchema =
    ResponseEnvelopeListCertificateAsset$inboundSchema;
  /** @deprecated use `ResponseEnvelopeListCertificateAsset$outboundSchema` instead. */
  export const outboundSchema =
    ResponseEnvelopeListCertificateAsset$outboundSchema;
  /** @deprecated use `ResponseEnvelopeListCertificateAsset$Outbound` instead. */
  export type Outbound = ResponseEnvelopeListCertificateAsset$Outbound;
}

export function responseEnvelopeListCertificateAssetToJSON(
  responseEnvelopeListCertificateAsset: ResponseEnvelopeListCertificateAsset,
): string {
  return JSON.stringify(
    ResponseEnvelopeListCertificateAsset$outboundSchema.parse(
      responseEnvelopeListCertificateAsset,
    ),
  );
}

export function responseEnvelopeListCertificateAssetFromJSON(
  jsonString: string,
): SafeParseResult<ResponseEnvelopeListCertificateAsset, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ResponseEnvelopeListCertificateAsset$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseEnvelopeListCertificateAsset' from JSON`,
  );
}
