/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ThreatDetails = {
  campaignId?: string | undefined;
  campaignTheme?: string | undefined;
  controlServers?: Array<string> | null | undefined;
  version?: string | undefined;
};

/** @internal */
export const ThreatDetails$inboundSchema: z.ZodType<
  ThreatDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  campaign_id: z.string().optional(),
  campaign_theme: z.string().optional(),
  control_servers: z.nullable(z.array(z.string())).optional(),
  version: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "campaign_id": "campaignId",
    "campaign_theme": "campaignTheme",
    "control_servers": "controlServers",
  });
});

/** @internal */
export type ThreatDetails$Outbound = {
  campaign_id?: string | undefined;
  campaign_theme?: string | undefined;
  control_servers?: Array<string> | null | undefined;
  version?: string | undefined;
};

/** @internal */
export const ThreatDetails$outboundSchema: z.ZodType<
  ThreatDetails$Outbound,
  z.ZodTypeDef,
  ThreatDetails
> = z.object({
  campaignId: z.string().optional(),
  campaignTheme: z.string().optional(),
  controlServers: z.nullable(z.array(z.string())).optional(),
  version: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    campaignId: "campaign_id",
    campaignTheme: "campaign_theme",
    controlServers: "control_servers",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ThreatDetails$ {
  /** @deprecated use `ThreatDetails$inboundSchema` instead. */
  export const inboundSchema = ThreatDetails$inboundSchema;
  /** @deprecated use `ThreatDetails$outboundSchema` instead. */
  export const outboundSchema = ThreatDetails$outboundSchema;
  /** @deprecated use `ThreatDetails$Outbound` instead. */
  export type Outbound = ThreatDetails$Outbound;
}

export function threatDetailsToJSON(threatDetails: ThreatDetails): string {
  return JSON.stringify(ThreatDetails$outboundSchema.parse(threatDetails));
}

export function threatDetailsFromJSON(
  jsonString: string,
): SafeParseResult<ThreatDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ThreatDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ThreatDetails' from JSON`,
  );
}
