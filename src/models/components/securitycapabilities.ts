/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SecurityCapabilities = {
  accessPolicyConfig?: boolean | undefined;
  defaultAccessPolicy?: boolean | undefined;
  dot1x?: boolean | undefined;
  httpDigest?: boolean | undefined;
  kerberosToken?: boolean | undefined;
  maxPasswordLength?: number | undefined;
  maxUsernameLength?: number | undefined;
  maxUsers?: number | undefined;
  onboardKeyGeneration?: boolean | undefined;
  relToken?: boolean | undefined;
  remoteUserHandling?: boolean | undefined;
  samlToken?: boolean | undefined;
  supportedEapMethods?: number | undefined;
  tls10?: boolean | undefined;
  tls11?: boolean | undefined;
  tls12?: boolean | undefined;
  usernameToken?: boolean | undefined;
  x509Token?: boolean | undefined;
};

/** @internal */
export const SecurityCapabilities$inboundSchema: z.ZodType<
  SecurityCapabilities,
  z.ZodTypeDef,
  unknown
> = z.object({
  access_policy_config: z.boolean().optional(),
  default_access_policy: z.boolean().optional(),
  dot1x: z.boolean().optional(),
  http_digest: z.boolean().optional(),
  kerberos_token: z.boolean().optional(),
  max_password_length: z.number().int().optional(),
  max_username_length: z.number().int().optional(),
  max_users: z.number().int().optional(),
  onboard_key_generation: z.boolean().optional(),
  rel_token: z.boolean().optional(),
  remote_user_handling: z.boolean().optional(),
  saml_token: z.boolean().optional(),
  supported_eap_methods: z.number().int().optional(),
  tls_1_0: z.boolean().optional(),
  tls_1_1: z.boolean().optional(),
  tls_1_2: z.boolean().optional(),
  username_token: z.boolean().optional(),
  x509_token: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    "access_policy_config": "accessPolicyConfig",
    "default_access_policy": "defaultAccessPolicy",
    "http_digest": "httpDigest",
    "kerberos_token": "kerberosToken",
    "max_password_length": "maxPasswordLength",
    "max_username_length": "maxUsernameLength",
    "max_users": "maxUsers",
    "onboard_key_generation": "onboardKeyGeneration",
    "rel_token": "relToken",
    "remote_user_handling": "remoteUserHandling",
    "saml_token": "samlToken",
    "supported_eap_methods": "supportedEapMethods",
    "tls_1_0": "tls10",
    "tls_1_1": "tls11",
    "tls_1_2": "tls12",
    "username_token": "usernameToken",
    "x509_token": "x509Token",
  });
});

/** @internal */
export type SecurityCapabilities$Outbound = {
  access_policy_config?: boolean | undefined;
  default_access_policy?: boolean | undefined;
  dot1x?: boolean | undefined;
  http_digest?: boolean | undefined;
  kerberos_token?: boolean | undefined;
  max_password_length?: number | undefined;
  max_username_length?: number | undefined;
  max_users?: number | undefined;
  onboard_key_generation?: boolean | undefined;
  rel_token?: boolean | undefined;
  remote_user_handling?: boolean | undefined;
  saml_token?: boolean | undefined;
  supported_eap_methods?: number | undefined;
  tls_1_0?: boolean | undefined;
  tls_1_1?: boolean | undefined;
  tls_1_2?: boolean | undefined;
  username_token?: boolean | undefined;
  x509_token?: boolean | undefined;
};

/** @internal */
export const SecurityCapabilities$outboundSchema: z.ZodType<
  SecurityCapabilities$Outbound,
  z.ZodTypeDef,
  SecurityCapabilities
> = z.object({
  accessPolicyConfig: z.boolean().optional(),
  defaultAccessPolicy: z.boolean().optional(),
  dot1x: z.boolean().optional(),
  httpDigest: z.boolean().optional(),
  kerberosToken: z.boolean().optional(),
  maxPasswordLength: z.number().int().optional(),
  maxUsernameLength: z.number().int().optional(),
  maxUsers: z.number().int().optional(),
  onboardKeyGeneration: z.boolean().optional(),
  relToken: z.boolean().optional(),
  remoteUserHandling: z.boolean().optional(),
  samlToken: z.boolean().optional(),
  supportedEapMethods: z.number().int().optional(),
  tls10: z.boolean().optional(),
  tls11: z.boolean().optional(),
  tls12: z.boolean().optional(),
  usernameToken: z.boolean().optional(),
  x509Token: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    accessPolicyConfig: "access_policy_config",
    defaultAccessPolicy: "default_access_policy",
    httpDigest: "http_digest",
    kerberosToken: "kerberos_token",
    maxPasswordLength: "max_password_length",
    maxUsernameLength: "max_username_length",
    maxUsers: "max_users",
    onboardKeyGeneration: "onboard_key_generation",
    relToken: "rel_token",
    remoteUserHandling: "remote_user_handling",
    samlToken: "saml_token",
    supportedEapMethods: "supported_eap_methods",
    tls10: "tls_1_0",
    tls11: "tls_1_1",
    tls12: "tls_1_2",
    usernameToken: "username_token",
    x509Token: "x509_token",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SecurityCapabilities$ {
  /** @deprecated use `SecurityCapabilities$inboundSchema` instead. */
  export const inboundSchema = SecurityCapabilities$inboundSchema;
  /** @deprecated use `SecurityCapabilities$outboundSchema` instead. */
  export const outboundSchema = SecurityCapabilities$outboundSchema;
  /** @deprecated use `SecurityCapabilities$Outbound` instead. */
  export type Outbound = SecurityCapabilities$Outbound;
}

export function securityCapabilitiesToJSON(
  securityCapabilities: SecurityCapabilities,
): string {
  return JSON.stringify(
    SecurityCapabilities$outboundSchema.parse(securityCapabilities),
  );
}

export function securityCapabilitiesFromJSON(
  jsonString: string,
): SafeParseResult<SecurityCapabilities, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SecurityCapabilities$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SecurityCapabilities' from JSON`,
  );
}
