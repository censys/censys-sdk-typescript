/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type IpmiSessionHeaderAuthType = {
  /**
   * The raw value of the auth_type
   */
  name?: string | undefined;
  /**
   * The raw value of the auth_type
   */
  raw?: number | undefined;
  /**
   * Just the auth type (reserved bits omitted)
   */
  type?: number | undefined;
};

/** @internal */
export const IpmiSessionHeaderAuthType$inboundSchema: z.ZodType<
  IpmiSessionHeaderAuthType,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  raw: z.number().int().optional(),
  type: z.number().int().optional(),
});

/** @internal */
export type IpmiSessionHeaderAuthType$Outbound = {
  name?: string | undefined;
  raw?: number | undefined;
  type?: number | undefined;
};

/** @internal */
export const IpmiSessionHeaderAuthType$outboundSchema: z.ZodType<
  IpmiSessionHeaderAuthType$Outbound,
  z.ZodTypeDef,
  IpmiSessionHeaderAuthType
> = z.object({
  name: z.string().optional(),
  raw: z.number().int().optional(),
  type: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IpmiSessionHeaderAuthType$ {
  /** @deprecated use `IpmiSessionHeaderAuthType$inboundSchema` instead. */
  export const inboundSchema = IpmiSessionHeaderAuthType$inboundSchema;
  /** @deprecated use `IpmiSessionHeaderAuthType$outboundSchema` instead. */
  export const outboundSchema = IpmiSessionHeaderAuthType$outboundSchema;
  /** @deprecated use `IpmiSessionHeaderAuthType$Outbound` instead. */
  export type Outbound = IpmiSessionHeaderAuthType$Outbound;
}

export function ipmiSessionHeaderAuthTypeToJSON(
  ipmiSessionHeaderAuthType: IpmiSessionHeaderAuthType,
): string {
  return JSON.stringify(
    IpmiSessionHeaderAuthType$outboundSchema.parse(ipmiSessionHeaderAuthType),
  );
}

export function ipmiSessionHeaderAuthTypeFromJSON(
  jsonString: string,
): SafeParseResult<IpmiSessionHeaderAuthType, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => IpmiSessionHeaderAuthType$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'IpmiSessionHeaderAuthType' from JSON`,
  );
}
