/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CobaltStrikeHttpConfig = {
  client?: string | undefined;
  uri?: string | undefined;
  verb?: string | undefined;
};

/** @internal */
export const CobaltStrikeHttpConfig$inboundSchema: z.ZodType<
  CobaltStrikeHttpConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  client: z.string().optional(),
  uri: z.string().optional(),
  verb: z.string().optional(),
});

/** @internal */
export type CobaltStrikeHttpConfig$Outbound = {
  client?: string | undefined;
  uri?: string | undefined;
  verb?: string | undefined;
};

/** @internal */
export const CobaltStrikeHttpConfig$outboundSchema: z.ZodType<
  CobaltStrikeHttpConfig$Outbound,
  z.ZodTypeDef,
  CobaltStrikeHttpConfig
> = z.object({
  client: z.string().optional(),
  uri: z.string().optional(),
  verb: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CobaltStrikeHttpConfig$ {
  /** @deprecated use `CobaltStrikeHttpConfig$inboundSchema` instead. */
  export const inboundSchema = CobaltStrikeHttpConfig$inboundSchema;
  /** @deprecated use `CobaltStrikeHttpConfig$outboundSchema` instead. */
  export const outboundSchema = CobaltStrikeHttpConfig$outboundSchema;
  /** @deprecated use `CobaltStrikeHttpConfig$Outbound` instead. */
  export type Outbound = CobaltStrikeHttpConfig$Outbound;
}

export function cobaltStrikeHttpConfigToJSON(
  cobaltStrikeHttpConfig: CobaltStrikeHttpConfig,
): string {
  return JSON.stringify(
    CobaltStrikeHttpConfig$outboundSchema.parse(cobaltStrikeHttpConfig),
  );
}

export function cobaltStrikeHttpConfigFromJSON(
  jsonString: string,
): SafeParseResult<CobaltStrikeHttpConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CobaltStrikeHttpConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CobaltStrikeHttpConfig' from JSON`,
  );
}
