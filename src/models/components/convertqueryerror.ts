/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ConvertQueryError = {
  /**
   * The error message if the query could not be converted.
   */
  message: string;
};

/** @internal */
export const ConvertQueryError$inboundSchema: z.ZodType<
  ConvertQueryError,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
});

/** @internal */
export type ConvertQueryError$Outbound = {
  message: string;
};

/** @internal */
export const ConvertQueryError$outboundSchema: z.ZodType<
  ConvertQueryError$Outbound,
  z.ZodTypeDef,
  ConvertQueryError
> = z.object({
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConvertQueryError$ {
  /** @deprecated use `ConvertQueryError$inboundSchema` instead. */
  export const inboundSchema = ConvertQueryError$inboundSchema;
  /** @deprecated use `ConvertQueryError$outboundSchema` instead. */
  export const outboundSchema = ConvertQueryError$outboundSchema;
  /** @deprecated use `ConvertQueryError$Outbound` instead. */
  export type Outbound = ConvertQueryError$Outbound;
}

export function convertQueryErrorToJSON(
  convertQueryError: ConvertQueryError,
): string {
  return JSON.stringify(
    ConvertQueryError$outboundSchema.parse(convertQueryError),
  );
}

export function convertQueryErrorFromJSON(
  jsonString: string,
): SafeParseResult<ConvertQueryError, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ConvertQueryError$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ConvertQueryError' from JSON`,
  );
}
