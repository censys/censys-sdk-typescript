/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SearchCapabilities = {
  generalStartEvents?: boolean | undefined;
  metadataSearch?: boolean | undefined;
};

/** @internal */
export const SearchCapabilities$inboundSchema: z.ZodType<
  SearchCapabilities,
  z.ZodTypeDef,
  unknown
> = z.object({
  general_start_events: z.boolean().optional(),
  metadata_search: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    "general_start_events": "generalStartEvents",
    "metadata_search": "metadataSearch",
  });
});

/** @internal */
export type SearchCapabilities$Outbound = {
  general_start_events?: boolean | undefined;
  metadata_search?: boolean | undefined;
};

/** @internal */
export const SearchCapabilities$outboundSchema: z.ZodType<
  SearchCapabilities$Outbound,
  z.ZodTypeDef,
  SearchCapabilities
> = z.object({
  generalStartEvents: z.boolean().optional(),
  metadataSearch: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    generalStartEvents: "general_start_events",
    metadataSearch: "metadata_search",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchCapabilities$ {
  /** @deprecated use `SearchCapabilities$inboundSchema` instead. */
  export const inboundSchema = SearchCapabilities$inboundSchema;
  /** @deprecated use `SearchCapabilities$outboundSchema` instead. */
  export const outboundSchema = SearchCapabilities$outboundSchema;
  /** @deprecated use `SearchCapabilities$Outbound` instead. */
  export type Outbound = SearchCapabilities$Outbound;
}

export function searchCapabilitiesToJSON(
  searchCapabilities: SearchCapabilities,
): string {
  return JSON.stringify(
    SearchCapabilities$outboundSchema.parse(searchCapabilities),
  );
}

export function searchCapabilitiesFromJSON(
  jsonString: string,
): SafeParseResult<SearchCapabilities, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchCapabilities$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchCapabilities' from JSON`,
  );
}
