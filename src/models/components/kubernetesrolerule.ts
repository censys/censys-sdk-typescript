/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type KubernetesRoleRule = {
  /**
   * APIGroups is the name of the APIGroup that contains the resources. If multiple API groups are specified, any action requested against one of the enumerated resources in any API group will be allowed.
   */
  apiGroups?: Array<string> | null | undefined;
  /**
   * Resources is a list of resources this rule applies to. ResourceAll represents all resources
   */
  resources?: Array<string> | null | undefined;
  /**
   * Verbs is a list of Verbs that apply to ALL the ResourceKinds and AttributeRestrictions contained in this rule. VerbAll represents all kinds.
   */
  verbs?: Array<string> | null | undefined;
};

/** @internal */
export const KubernetesRoleRule$inboundSchema: z.ZodType<
  KubernetesRoleRule,
  z.ZodTypeDef,
  unknown
> = z.object({
  api_groups: z.nullable(z.array(z.string())).optional(),
  resources: z.nullable(z.array(z.string())).optional(),
  verbs: z.nullable(z.array(z.string())).optional(),
}).transform((v) => {
  return remap$(v, {
    "api_groups": "apiGroups",
  });
});

/** @internal */
export type KubernetesRoleRule$Outbound = {
  api_groups?: Array<string> | null | undefined;
  resources?: Array<string> | null | undefined;
  verbs?: Array<string> | null | undefined;
};

/** @internal */
export const KubernetesRoleRule$outboundSchema: z.ZodType<
  KubernetesRoleRule$Outbound,
  z.ZodTypeDef,
  KubernetesRoleRule
> = z.object({
  apiGroups: z.nullable(z.array(z.string())).optional(),
  resources: z.nullable(z.array(z.string())).optional(),
  verbs: z.nullable(z.array(z.string())).optional(),
}).transform((v) => {
  return remap$(v, {
    apiGroups: "api_groups",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace KubernetesRoleRule$ {
  /** @deprecated use `KubernetesRoleRule$inboundSchema` instead. */
  export const inboundSchema = KubernetesRoleRule$inboundSchema;
  /** @deprecated use `KubernetesRoleRule$outboundSchema` instead. */
  export const outboundSchema = KubernetesRoleRule$outboundSchema;
  /** @deprecated use `KubernetesRoleRule$Outbound` instead. */
  export type Outbound = KubernetesRoleRule$Outbound;
}

export function kubernetesRoleRuleToJSON(
  kubernetesRoleRule: KubernetesRoleRule,
): string {
  return JSON.stringify(
    KubernetesRoleRule$outboundSchema.parse(kubernetesRoleRule),
  );
}

export function kubernetesRoleRuleFromJSON(
  jsonString: string,
): SafeParseResult<KubernetesRoleRule, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => KubernetesRoleRule$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'KubernetesRoleRule' from JSON`,
  );
}
