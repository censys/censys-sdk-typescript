/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  UpnpService,
  UpnpService$inboundSchema,
  UpnpService$Outbound,
  UpnpService$outboundSchema,
} from "./upnpservice.js";

export type UpnpDevice = {
  deviceType?: string | undefined;
  friendlyName?: string | undefined;
  /**
   * Censys-generated IDs representing a device tree
   */
  id?: number | undefined;
  manufacturer?: string | undefined;
  manufacturerUrl?: string | undefined;
  modelDescription?: string | undefined;
  modelName?: string | undefined;
  modelNumber?: string | undefined;
  modelUrl?: string | undefined;
  parentId?: number | undefined;
  presentationUrl?: string | undefined;
  serialNumber?: string | undefined;
  serviceList?: Array<UpnpService> | null | undefined;
  udn?: string | undefined;
  upc?: string | undefined;
};

/** @internal */
export const UpnpDevice$inboundSchema: z.ZodType<
  UpnpDevice,
  z.ZodTypeDef,
  unknown
> = z.object({
  device_type: z.string().optional(),
  friendly_name: z.string().optional(),
  id: z.number().int().optional(),
  manufacturer: z.string().optional(),
  manufacturer_url: z.string().optional(),
  model_description: z.string().optional(),
  model_name: z.string().optional(),
  model_number: z.string().optional(),
  model_url: z.string().optional(),
  parent_id: z.number().int().optional(),
  presentation_url: z.string().optional(),
  serial_number: z.string().optional(),
  service_list: z.nullable(z.array(UpnpService$inboundSchema)).optional(),
  udn: z.string().optional(),
  upc: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "device_type": "deviceType",
    "friendly_name": "friendlyName",
    "manufacturer_url": "manufacturerUrl",
    "model_description": "modelDescription",
    "model_name": "modelName",
    "model_number": "modelNumber",
    "model_url": "modelUrl",
    "parent_id": "parentId",
    "presentation_url": "presentationUrl",
    "serial_number": "serialNumber",
    "service_list": "serviceList",
  });
});

/** @internal */
export type UpnpDevice$Outbound = {
  device_type?: string | undefined;
  friendly_name?: string | undefined;
  id?: number | undefined;
  manufacturer?: string | undefined;
  manufacturer_url?: string | undefined;
  model_description?: string | undefined;
  model_name?: string | undefined;
  model_number?: string | undefined;
  model_url?: string | undefined;
  parent_id?: number | undefined;
  presentation_url?: string | undefined;
  serial_number?: string | undefined;
  service_list?: Array<UpnpService$Outbound> | null | undefined;
  udn?: string | undefined;
  upc?: string | undefined;
};

/** @internal */
export const UpnpDevice$outboundSchema: z.ZodType<
  UpnpDevice$Outbound,
  z.ZodTypeDef,
  UpnpDevice
> = z.object({
  deviceType: z.string().optional(),
  friendlyName: z.string().optional(),
  id: z.number().int().optional(),
  manufacturer: z.string().optional(),
  manufacturerUrl: z.string().optional(),
  modelDescription: z.string().optional(),
  modelName: z.string().optional(),
  modelNumber: z.string().optional(),
  modelUrl: z.string().optional(),
  parentId: z.number().int().optional(),
  presentationUrl: z.string().optional(),
  serialNumber: z.string().optional(),
  serviceList: z.nullable(z.array(UpnpService$outboundSchema)).optional(),
  udn: z.string().optional(),
  upc: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    deviceType: "device_type",
    friendlyName: "friendly_name",
    manufacturerUrl: "manufacturer_url",
    modelDescription: "model_description",
    modelName: "model_name",
    modelNumber: "model_number",
    modelUrl: "model_url",
    parentId: "parent_id",
    presentationUrl: "presentation_url",
    serialNumber: "serial_number",
    serviceList: "service_list",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpnpDevice$ {
  /** @deprecated use `UpnpDevice$inboundSchema` instead. */
  export const inboundSchema = UpnpDevice$inboundSchema;
  /** @deprecated use `UpnpDevice$outboundSchema` instead. */
  export const outboundSchema = UpnpDevice$outboundSchema;
  /** @deprecated use `UpnpDevice$Outbound` instead. */
  export type Outbound = UpnpDevice$Outbound;
}

export function upnpDeviceToJSON(upnpDevice: UpnpDevice): string {
  return JSON.stringify(UpnpDevice$outboundSchema.parse(upnpDevice));
}

export function upnpDeviceFromJSON(
  jsonString: string,
): SafeParseResult<UpnpDevice, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpnpDevice$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpnpDevice' from JSON`,
  );
}
