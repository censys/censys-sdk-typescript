/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ScadaView = {
  description?: string | undefined;
  title?: string | undefined;
};

/** @internal */
export const ScadaView$inboundSchema: z.ZodType<
  ScadaView,
  z.ZodTypeDef,
  unknown
> = z.object({
  description: z.string().optional(),
  title: z.string().optional(),
});

/** @internal */
export type ScadaView$Outbound = {
  description?: string | undefined;
  title?: string | undefined;
};

/** @internal */
export const ScadaView$outboundSchema: z.ZodType<
  ScadaView$Outbound,
  z.ZodTypeDef,
  ScadaView
> = z.object({
  description: z.string().optional(),
  title: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ScadaView$ {
  /** @deprecated use `ScadaView$inboundSchema` instead. */
  export const inboundSchema = ScadaView$inboundSchema;
  /** @deprecated use `ScadaView$outboundSchema` instead. */
  export const outboundSchema = ScadaView$outboundSchema;
  /** @deprecated use `ScadaView$Outbound` instead. */
  export type Outbound = ScadaView$Outbound;
}

export function scadaViewToJSON(scadaView: ScadaView): string {
  return JSON.stringify(ScadaView$outboundSchema.parse(scadaView));
}

export function scadaViewFromJSON(
  jsonString: string,
): SafeParseResult<ScadaView, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ScadaView$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ScadaView' from JSON`,
  );
}
