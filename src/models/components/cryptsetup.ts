/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CryptSetup = {
  clientNonce?: string | undefined;
  key?: string | undefined;
  serverNonce?: string | undefined;
};

/** @internal */
export const CryptSetup$inboundSchema: z.ZodType<
  CryptSetup,
  z.ZodTypeDef,
  unknown
> = z.object({
  client_nonce: z.string().optional(),
  key: z.string().optional(),
  server_nonce: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "client_nonce": "clientNonce",
    "server_nonce": "serverNonce",
  });
});

/** @internal */
export type CryptSetup$Outbound = {
  client_nonce?: string | undefined;
  key?: string | undefined;
  server_nonce?: string | undefined;
};

/** @internal */
export const CryptSetup$outboundSchema: z.ZodType<
  CryptSetup$Outbound,
  z.ZodTypeDef,
  CryptSetup
> = z.object({
  clientNonce: z.string().optional(),
  key: z.string().optional(),
  serverNonce: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    clientNonce: "client_nonce",
    serverNonce: "server_nonce",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CryptSetup$ {
  /** @deprecated use `CryptSetup$inboundSchema` instead. */
  export const inboundSchema = CryptSetup$inboundSchema;
  /** @deprecated use `CryptSetup$outboundSchema` instead. */
  export const outboundSchema = CryptSetup$outboundSchema;
  /** @deprecated use `CryptSetup$Outbound` instead. */
  export type Outbound = CryptSetup$Outbound;
}

export function cryptSetupToJSON(cryptSetup: CryptSetup): string {
  return JSON.stringify(CryptSetup$outboundSchema.parse(cryptSetup));
}

export function cryptSetupFromJSON(
  jsonString: string,
): SafeParseResult<CryptSetup, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CryptSetup$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CryptSetup' from JSON`,
  );
}
