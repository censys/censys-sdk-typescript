/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Postgres = {
  /**
   * The error received in response to a StartupMessage with an unexpected protocol version.
   */
  protocolError?: { [k: string]: string } | undefined;
  /**
   * The error received in response to a StartupMessage without providing the User field.
   */
  startupError?: { [k: string]: string } | undefined;
  supportedVersions?: string | undefined;
};

/** @internal */
export const Postgres$inboundSchema: z.ZodType<
  Postgres,
  z.ZodTypeDef,
  unknown
> = z.object({
  protocol_error: z.record(z.string()).optional(),
  startup_error: z.record(z.string()).optional(),
  supported_versions: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "protocol_error": "protocolError",
    "startup_error": "startupError",
    "supported_versions": "supportedVersions",
  });
});

/** @internal */
export type Postgres$Outbound = {
  protocol_error?: { [k: string]: string } | undefined;
  startup_error?: { [k: string]: string } | undefined;
  supported_versions?: string | undefined;
};

/** @internal */
export const Postgres$outboundSchema: z.ZodType<
  Postgres$Outbound,
  z.ZodTypeDef,
  Postgres
> = z.object({
  protocolError: z.record(z.string()).optional(),
  startupError: z.record(z.string()).optional(),
  supportedVersions: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    protocolError: "protocol_error",
    startupError: "startup_error",
    supportedVersions: "supported_versions",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Postgres$ {
  /** @deprecated use `Postgres$inboundSchema` instead. */
  export const inboundSchema = Postgres$inboundSchema;
  /** @deprecated use `Postgres$outboundSchema` instead. */
  export const outboundSchema = Postgres$outboundSchema;
  /** @deprecated use `Postgres$Outbound` instead. */
  export type Outbound = Postgres$Outbound;
}

export function postgresToJSON(postgres: Postgres): string {
  return JSON.stringify(Postgres$outboundSchema.parse(postgres));
}

export function postgresFromJSON(
  jsonString: string,
): SafeParseResult<Postgres, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Postgres$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Postgres' from JSON`,
  );
}
