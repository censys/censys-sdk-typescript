/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ZeromqHandshake = {
  raw?: string | undefined;
  ready?: boolean | undefined;
  socketType?: string | undefined;
};

/** @internal */
export const ZeromqHandshake$inboundSchema: z.ZodType<
  ZeromqHandshake,
  z.ZodTypeDef,
  unknown
> = z.object({
  raw: z.string().optional(),
  ready: z.boolean().optional(),
  socket_type: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "socket_type": "socketType",
  });
});

/** @internal */
export type ZeromqHandshake$Outbound = {
  raw?: string | undefined;
  ready?: boolean | undefined;
  socket_type?: string | undefined;
};

/** @internal */
export const ZeromqHandshake$outboundSchema: z.ZodType<
  ZeromqHandshake$Outbound,
  z.ZodTypeDef,
  ZeromqHandshake
> = z.object({
  raw: z.string().optional(),
  ready: z.boolean().optional(),
  socketType: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    socketType: "socket_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ZeromqHandshake$ {
  /** @deprecated use `ZeromqHandshake$inboundSchema` instead. */
  export const inboundSchema = ZeromqHandshake$inboundSchema;
  /** @deprecated use `ZeromqHandshake$outboundSchema` instead. */
  export const outboundSchema = ZeromqHandshake$outboundSchema;
  /** @deprecated use `ZeromqHandshake$Outbound` instead. */
  export type Outbound = ZeromqHandshake$Outbound;
}

export function zeromqHandshakeToJSON(
  zeromqHandshake: ZeromqHandshake,
): string {
  return JSON.stringify(ZeromqHandshake$outboundSchema.parse(zeromqHandshake));
}

export function zeromqHandshakeFromJSON(
  jsonString: string,
): SafeParseResult<ZeromqHandshake, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ZeromqHandshake$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ZeromqHandshake' from JSON`,
  );
}
