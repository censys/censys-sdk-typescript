/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  PrometheusMetricFamily,
  PrometheusMetricFamily$inboundSchema,
  PrometheusMetricFamily$Outbound,
  PrometheusMetricFamily$outboundSchema,
} from "./prometheusmetricfamily.js";

export type PrometheusTarget = {
  metricFamilies?: Array<PrometheusMetricFamily> | null | undefined;
};

/** @internal */
export const PrometheusTarget$inboundSchema: z.ZodType<
  PrometheusTarget,
  z.ZodTypeDef,
  unknown
> = z.object({
  metric_families: z.nullable(z.array(PrometheusMetricFamily$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "metric_families": "metricFamilies",
  });
});

/** @internal */
export type PrometheusTarget$Outbound = {
  metric_families?: Array<PrometheusMetricFamily$Outbound> | null | undefined;
};

/** @internal */
export const PrometheusTarget$outboundSchema: z.ZodType<
  PrometheusTarget$Outbound,
  z.ZodTypeDef,
  PrometheusTarget
> = z.object({
  metricFamilies: z.nullable(z.array(PrometheusMetricFamily$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    metricFamilies: "metric_families",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PrometheusTarget$ {
  /** @deprecated use `PrometheusTarget$inboundSchema` instead. */
  export const inboundSchema = PrometheusTarget$inboundSchema;
  /** @deprecated use `PrometheusTarget$outboundSchema` instead. */
  export const outboundSchema = PrometheusTarget$outboundSchema;
  /** @deprecated use `PrometheusTarget$Outbound` instead. */
  export type Outbound = PrometheusTarget$Outbound;
}

export function prometheusTargetToJSON(
  prometheusTarget: PrometheusTarget,
): string {
  return JSON.stringify(
    PrometheusTarget$outboundSchema.parse(prometheusTarget),
  );
}

export function prometheusTargetFromJSON(
  jsonString: string,
): SafeParseResult<PrometheusTarget, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PrometheusTarget$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PrometheusTarget' from JSON`,
  );
}
