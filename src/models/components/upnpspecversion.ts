/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpnpSpecVersion = {
  major?: string | undefined;
  minor?: string | undefined;
};

/** @internal */
export const UpnpSpecVersion$inboundSchema: z.ZodType<
  UpnpSpecVersion,
  z.ZodTypeDef,
  unknown
> = z.object({
  major: z.string().optional(),
  minor: z.string().optional(),
});

/** @internal */
export type UpnpSpecVersion$Outbound = {
  major?: string | undefined;
  minor?: string | undefined;
};

/** @internal */
export const UpnpSpecVersion$outboundSchema: z.ZodType<
  UpnpSpecVersion$Outbound,
  z.ZodTypeDef,
  UpnpSpecVersion
> = z.object({
  major: z.string().optional(),
  minor: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpnpSpecVersion$ {
  /** @deprecated use `UpnpSpecVersion$inboundSchema` instead. */
  export const inboundSchema = UpnpSpecVersion$inboundSchema;
  /** @deprecated use `UpnpSpecVersion$outboundSchema` instead. */
  export const outboundSchema = UpnpSpecVersion$outboundSchema;
  /** @deprecated use `UpnpSpecVersion$Outbound` instead. */
  export type Outbound = UpnpSpecVersion$Outbound;
}

export function upnpSpecVersionToJSON(
  upnpSpecVersion: UpnpSpecVersion,
): string {
  return JSON.stringify(UpnpSpecVersion$outboundSchema.parse(upnpSpecVersion));
}

export function upnpSpecVersionFromJSON(
  jsonString: string,
): SafeParseResult<UpnpSpecVersion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpnpSpecVersion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpnpSpecVersion' from JSON`,
  );
}
