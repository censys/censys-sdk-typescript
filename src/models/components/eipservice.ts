/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type EipService = {
  capabilities?: number | undefined;
  serviceName?: string | undefined;
  supportsTcp?: boolean | undefined;
  supportsUdp?: boolean | undefined;
};

/** @internal */
export const EipService$inboundSchema: z.ZodType<
  EipService,
  z.ZodTypeDef,
  unknown
> = z.object({
  capabilities: z.number().int().optional(),
  service_name: z.string().optional(),
  supports_tcp: z.boolean().optional(),
  supports_udp: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    "service_name": "serviceName",
    "supports_tcp": "supportsTcp",
    "supports_udp": "supportsUdp",
  });
});

/** @internal */
export type EipService$Outbound = {
  capabilities?: number | undefined;
  service_name?: string | undefined;
  supports_tcp?: boolean | undefined;
  supports_udp?: boolean | undefined;
};

/** @internal */
export const EipService$outboundSchema: z.ZodType<
  EipService$Outbound,
  z.ZodTypeDef,
  EipService
> = z.object({
  capabilities: z.number().int().optional(),
  serviceName: z.string().optional(),
  supportsTcp: z.boolean().optional(),
  supportsUdp: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    serviceName: "service_name",
    supportsTcp: "supports_tcp",
    supportsUdp: "supports_udp",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EipService$ {
  /** @deprecated use `EipService$inboundSchema` instead. */
  export const inboundSchema = EipService$inboundSchema;
  /** @deprecated use `EipService$outboundSchema` instead. */
  export const outboundSchema = EipService$outboundSchema;
  /** @deprecated use `EipService$Outbound` instead. */
  export type Outbound = EipService$Outbound;
}

export function eipServiceToJSON(eipService: EipService): string {
  return JSON.stringify(EipService$outboundSchema.parse(eipService));
}

export function eipServiceFromJSON(
  jsonString: string,
): SafeParseResult<EipService, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EipService$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EipService' from JSON`,
  );
}
