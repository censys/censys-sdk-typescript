/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ElasticSearchResultsNodeInfoNodesNodeDataNodeSettingsNodeAttrML = {
  enabled?: string | undefined;
  machineMemory?: string | undefined;
  maxOpenJobs?: string | undefined;
};

/** @internal */
export const ElasticSearchResultsNodeInfoNodesNodeDataNodeSettingsNodeAttrML$inboundSchema:
  z.ZodType<
    ElasticSearchResultsNodeInfoNodesNodeDataNodeSettingsNodeAttrML,
    z.ZodTypeDef,
    unknown
  > = z.object({
    enabled: z.string().optional(),
    machine_memory: z.string().optional(),
    max_open_jobs: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "machine_memory": "machineMemory",
      "max_open_jobs": "maxOpenJobs",
    });
  });

/** @internal */
export type ElasticSearchResultsNodeInfoNodesNodeDataNodeSettingsNodeAttrML$Outbound =
  {
    enabled?: string | undefined;
    machine_memory?: string | undefined;
    max_open_jobs?: string | undefined;
  };

/** @internal */
export const ElasticSearchResultsNodeInfoNodesNodeDataNodeSettingsNodeAttrML$outboundSchema:
  z.ZodType<
    ElasticSearchResultsNodeInfoNodesNodeDataNodeSettingsNodeAttrML$Outbound,
    z.ZodTypeDef,
    ElasticSearchResultsNodeInfoNodesNodeDataNodeSettingsNodeAttrML
  > = z.object({
    enabled: z.string().optional(),
    machineMemory: z.string().optional(),
    maxOpenJobs: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      machineMemory: "machine_memory",
      maxOpenJobs: "max_open_jobs",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ElasticSearchResultsNodeInfoNodesNodeDataNodeSettingsNodeAttrML$ {
  /** @deprecated use `ElasticSearchResultsNodeInfoNodesNodeDataNodeSettingsNodeAttrML$inboundSchema` instead. */
  export const inboundSchema =
    ElasticSearchResultsNodeInfoNodesNodeDataNodeSettingsNodeAttrML$inboundSchema;
  /** @deprecated use `ElasticSearchResultsNodeInfoNodesNodeDataNodeSettingsNodeAttrML$outboundSchema` instead. */
  export const outboundSchema =
    ElasticSearchResultsNodeInfoNodesNodeDataNodeSettingsNodeAttrML$outboundSchema;
  /** @deprecated use `ElasticSearchResultsNodeInfoNodesNodeDataNodeSettingsNodeAttrML$Outbound` instead. */
  export type Outbound =
    ElasticSearchResultsNodeInfoNodesNodeDataNodeSettingsNodeAttrML$Outbound;
}

export function elasticSearchResultsNodeInfoNodesNodeDataNodeSettingsNodeAttrMLToJSON(
  elasticSearchResultsNodeInfoNodesNodeDataNodeSettingsNodeAttrML:
    ElasticSearchResultsNodeInfoNodesNodeDataNodeSettingsNodeAttrML,
): string {
  return JSON.stringify(
    ElasticSearchResultsNodeInfoNodesNodeDataNodeSettingsNodeAttrML$outboundSchema
      .parse(elasticSearchResultsNodeInfoNodesNodeDataNodeSettingsNodeAttrML),
  );
}

export function elasticSearchResultsNodeInfoNodesNodeDataNodeSettingsNodeAttrMLFromJSON(
  jsonString: string,
): SafeParseResult<
  ElasticSearchResultsNodeInfoNodesNodeDataNodeSettingsNodeAttrML,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ElasticSearchResultsNodeInfoNodesNodeDataNodeSettingsNodeAttrML$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'ElasticSearchResultsNodeInfoNodesNodeDataNodeSettingsNodeAttrML' from JSON`,
  );
}
