/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  MoneroP2PEntry,
  MoneroP2PEntry$inboundSchema,
  MoneroP2PEntry$Outbound,
  MoneroP2PEntry$outboundSchema,
} from "./monerop2pentry.js";

export type MoneroP2PPayload = {
  entries?: Array<MoneroP2PEntry> | null | undefined;
};

/** @internal */
export const MoneroP2PPayload$inboundSchema: z.ZodType<
  MoneroP2PPayload,
  z.ZodTypeDef,
  unknown
> = z.object({
  entries: z.nullable(z.array(MoneroP2PEntry$inboundSchema)).optional(),
});

/** @internal */
export type MoneroP2PPayload$Outbound = {
  entries?: Array<MoneroP2PEntry$Outbound> | null | undefined;
};

/** @internal */
export const MoneroP2PPayload$outboundSchema: z.ZodType<
  MoneroP2PPayload$Outbound,
  z.ZodTypeDef,
  MoneroP2PPayload
> = z.object({
  entries: z.nullable(z.array(MoneroP2PEntry$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MoneroP2PPayload$ {
  /** @deprecated use `MoneroP2PPayload$inboundSchema` instead. */
  export const inboundSchema = MoneroP2PPayload$inboundSchema;
  /** @deprecated use `MoneroP2PPayload$outboundSchema` instead. */
  export const outboundSchema = MoneroP2PPayload$outboundSchema;
  /** @deprecated use `MoneroP2PPayload$Outbound` instead. */
  export type Outbound = MoneroP2PPayload$Outbound;
}

export function moneroP2PPayloadToJSON(
  moneroP2PPayload: MoneroP2PPayload,
): string {
  return JSON.stringify(
    MoneroP2PPayload$outboundSchema.parse(moneroP2PPayload),
  );
}

export function moneroP2PPayloadFromJSON(
  jsonString: string,
): SafeParseResult<MoneroP2PPayload, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MoneroP2PPayload$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MoneroP2PPayload' from JSON`,
  );
}
