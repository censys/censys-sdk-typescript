/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Evidence,
  Evidence$inboundSchema,
  Evidence$Outbound,
  Evidence$outboundSchema,
} from "./evidence.js";

export const LabelSource = {
  Unknown: "",
  Censys: "censys",
  Recog: "recog",
  Wappalyzer: "wappalyzer",
  ThirdParty: "third_party",
} as const;
export type LabelSource = ClosedEnum<typeof LabelSource>;

export type Label = {
  confidence?: number | undefined;
  evidence?: Array<Evidence> | null | undefined;
  source?: LabelSource | undefined;
  value?: string | undefined;
};

/** @internal */
export const LabelSource$inboundSchema: z.ZodNativeEnum<typeof LabelSource> = z
  .nativeEnum(LabelSource);

/** @internal */
export const LabelSource$outboundSchema: z.ZodNativeEnum<typeof LabelSource> =
  LabelSource$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LabelSource$ {
  /** @deprecated use `LabelSource$inboundSchema` instead. */
  export const inboundSchema = LabelSource$inboundSchema;
  /** @deprecated use `LabelSource$outboundSchema` instead. */
  export const outboundSchema = LabelSource$outboundSchema;
}

/** @internal */
export const Label$inboundSchema: z.ZodType<Label, z.ZodTypeDef, unknown> = z
  .object({
    confidence: z.number().optional(),
    evidence: z.nullable(z.array(Evidence$inboundSchema)).optional(),
    source: LabelSource$inboundSchema.optional(),
    value: z.string().optional(),
  });

/** @internal */
export type Label$Outbound = {
  confidence?: number | undefined;
  evidence?: Array<Evidence$Outbound> | null | undefined;
  source?: string | undefined;
  value?: string | undefined;
};

/** @internal */
export const Label$outboundSchema: z.ZodType<
  Label$Outbound,
  z.ZodTypeDef,
  Label
> = z.object({
  confidence: z.number().optional(),
  evidence: z.nullable(z.array(Evidence$outboundSchema)).optional(),
  source: LabelSource$outboundSchema.optional(),
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Label$ {
  /** @deprecated use `Label$inboundSchema` instead. */
  export const inboundSchema = Label$inboundSchema;
  /** @deprecated use `Label$outboundSchema` instead. */
  export const outboundSchema = Label$outboundSchema;
  /** @deprecated use `Label$Outbound` instead. */
  export type Outbound = Label$Outbound;
}

export function labelToJSON(label: Label): string {
  return JSON.stringify(Label$outboundSchema.parse(label));
}

export function labelFromJSON(
  jsonString: string,
): SafeParseResult<Label, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Label$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Label' from JSON`,
  );
}
