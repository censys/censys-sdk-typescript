/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Spice = {
  majorVersion?: number | undefined;
  minorVersion?: number | undefined;
  tlsOnly?: boolean | undefined;
  x509PublicKey?: string | undefined;
};

/** @internal */
export const Spice$inboundSchema: z.ZodType<Spice, z.ZodTypeDef, unknown> = z
  .object({
    major_version: z.number().int().optional(),
    minor_version: z.number().int().optional(),
    tls_only: z.boolean().optional(),
    x509_public_key: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "major_version": "majorVersion",
      "minor_version": "minorVersion",
      "tls_only": "tlsOnly",
      "x509_public_key": "x509PublicKey",
    });
  });

/** @internal */
export type Spice$Outbound = {
  major_version?: number | undefined;
  minor_version?: number | undefined;
  tls_only?: boolean | undefined;
  x509_public_key?: string | undefined;
};

/** @internal */
export const Spice$outboundSchema: z.ZodType<
  Spice$Outbound,
  z.ZodTypeDef,
  Spice
> = z.object({
  majorVersion: z.number().int().optional(),
  minorVersion: z.number().int().optional(),
  tlsOnly: z.boolean().optional(),
  x509PublicKey: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    majorVersion: "major_version",
    minorVersion: "minor_version",
    tlsOnly: "tls_only",
    x509PublicKey: "x509_public_key",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Spice$ {
  /** @deprecated use `Spice$inboundSchema` instead. */
  export const inboundSchema = Spice$inboundSchema;
  /** @deprecated use `Spice$outboundSchema` instead. */
  export const outboundSchema = Spice$outboundSchema;
  /** @deprecated use `Spice$Outbound` instead. */
  export type Outbound = Spice$Outbound;
}

export function spiceToJSON(spice: Spice): string {
  return JSON.stringify(Spice$outboundSchema.parse(spice));
}

export function spiceFromJSON(
  jsonString: string,
): SafeParseResult<Spice, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Spice$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Spice' from JSON`,
  );
}
