/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type NtlmInfo = {
  alwaysSignSupported?: boolean | undefined;
  challengeType?: number | undefined;
  dnsDomainName?: string | undefined;
  dnsServerName?: string | undefined;
  dnsTreeName?: string | undefined;
  encryption128bitSupported?: boolean | undefined;
  encryption56bitSupported?: boolean | undefined;
  netbiosComputerName?: string | undefined;
  netbiosDomainName?: string | undefined;
  ntlm1Supported?: boolean | undefined;
  ntlm2Supported?: boolean | undefined;
  ntlmVersion?: number | undefined;
  osVersion?: string | undefined;
  targetName?: string | undefined;
};

/** @internal */
export const NtlmInfo$inboundSchema: z.ZodType<
  NtlmInfo,
  z.ZodTypeDef,
  unknown
> = z.object({
  always_sign_supported: z.boolean().optional(),
  challenge_type: z.number().int().optional(),
  dns_domain_name: z.string().optional(),
  dns_server_name: z.string().optional(),
  dns_tree_name: z.string().optional(),
  encryption_128bit_supported: z.boolean().optional(),
  encryption_56bit_supported: z.boolean().optional(),
  netbios_computer_name: z.string().optional(),
  netbios_domain_name: z.string().optional(),
  ntlm1_supported: z.boolean().optional(),
  ntlm2_supported: z.boolean().optional(),
  ntlm_version: z.number().int().optional(),
  os_version: z.string().optional(),
  target_name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "always_sign_supported": "alwaysSignSupported",
    "challenge_type": "challengeType",
    "dns_domain_name": "dnsDomainName",
    "dns_server_name": "dnsServerName",
    "dns_tree_name": "dnsTreeName",
    "encryption_128bit_supported": "encryption128bitSupported",
    "encryption_56bit_supported": "encryption56bitSupported",
    "netbios_computer_name": "netbiosComputerName",
    "netbios_domain_name": "netbiosDomainName",
    "ntlm1_supported": "ntlm1Supported",
    "ntlm2_supported": "ntlm2Supported",
    "ntlm_version": "ntlmVersion",
    "os_version": "osVersion",
    "target_name": "targetName",
  });
});

/** @internal */
export type NtlmInfo$Outbound = {
  always_sign_supported?: boolean | undefined;
  challenge_type?: number | undefined;
  dns_domain_name?: string | undefined;
  dns_server_name?: string | undefined;
  dns_tree_name?: string | undefined;
  encryption_128bit_supported?: boolean | undefined;
  encryption_56bit_supported?: boolean | undefined;
  netbios_computer_name?: string | undefined;
  netbios_domain_name?: string | undefined;
  ntlm1_supported?: boolean | undefined;
  ntlm2_supported?: boolean | undefined;
  ntlm_version?: number | undefined;
  os_version?: string | undefined;
  target_name?: string | undefined;
};

/** @internal */
export const NtlmInfo$outboundSchema: z.ZodType<
  NtlmInfo$Outbound,
  z.ZodTypeDef,
  NtlmInfo
> = z.object({
  alwaysSignSupported: z.boolean().optional(),
  challengeType: z.number().int().optional(),
  dnsDomainName: z.string().optional(),
  dnsServerName: z.string().optional(),
  dnsTreeName: z.string().optional(),
  encryption128bitSupported: z.boolean().optional(),
  encryption56bitSupported: z.boolean().optional(),
  netbiosComputerName: z.string().optional(),
  netbiosDomainName: z.string().optional(),
  ntlm1Supported: z.boolean().optional(),
  ntlm2Supported: z.boolean().optional(),
  ntlmVersion: z.number().int().optional(),
  osVersion: z.string().optional(),
  targetName: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    alwaysSignSupported: "always_sign_supported",
    challengeType: "challenge_type",
    dnsDomainName: "dns_domain_name",
    dnsServerName: "dns_server_name",
    dnsTreeName: "dns_tree_name",
    encryption128bitSupported: "encryption_128bit_supported",
    encryption56bitSupported: "encryption_56bit_supported",
    netbiosComputerName: "netbios_computer_name",
    netbiosDomainName: "netbios_domain_name",
    ntlm1Supported: "ntlm1_supported",
    ntlm2Supported: "ntlm2_supported",
    ntlmVersion: "ntlm_version",
    osVersion: "os_version",
    targetName: "target_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NtlmInfo$ {
  /** @deprecated use `NtlmInfo$inboundSchema` instead. */
  export const inboundSchema = NtlmInfo$inboundSchema;
  /** @deprecated use `NtlmInfo$outboundSchema` instead. */
  export const outboundSchema = NtlmInfo$outboundSchema;
  /** @deprecated use `NtlmInfo$Outbound` instead. */
  export type Outbound = NtlmInfo$Outbound;
}

export function ntlmInfoToJSON(ntlmInfo: NtlmInfo): string {
  return JSON.stringify(NtlmInfo$outboundSchema.parse(ntlmInfo));
}

export function ntlmInfoFromJSON(
  jsonString: string,
): SafeParseResult<NtlmInfo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NtlmInfo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NtlmInfo' from JSON`,
  );
}
