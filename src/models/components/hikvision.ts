/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  HikvisionPlatform,
  HikvisionPlatform$inboundSchema,
  HikvisionPlatform$Outbound,
  HikvisionPlatform$outboundSchema,
} from "./hikvisionplatform.js";

export type Hikvision = {
  customVersion?: string | undefined;
  platforms?: Array<HikvisionPlatform> | null | undefined;
  pluginVersion?: string | undefined;
  webVersion?: string | undefined;
};

/** @internal */
export const Hikvision$inboundSchema: z.ZodType<
  Hikvision,
  z.ZodTypeDef,
  unknown
> = z.object({
  custom_version: z.string().optional(),
  platforms: z.nullable(z.array(HikvisionPlatform$inboundSchema)).optional(),
  plugin_version: z.string().optional(),
  web_version: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "custom_version": "customVersion",
    "plugin_version": "pluginVersion",
    "web_version": "webVersion",
  });
});

/** @internal */
export type Hikvision$Outbound = {
  custom_version?: string | undefined;
  platforms?: Array<HikvisionPlatform$Outbound> | null | undefined;
  plugin_version?: string | undefined;
  web_version?: string | undefined;
};

/** @internal */
export const Hikvision$outboundSchema: z.ZodType<
  Hikvision$Outbound,
  z.ZodTypeDef,
  Hikvision
> = z.object({
  customVersion: z.string().optional(),
  platforms: z.nullable(z.array(HikvisionPlatform$outboundSchema)).optional(),
  pluginVersion: z.string().optional(),
  webVersion: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    customVersion: "custom_version",
    pluginVersion: "plugin_version",
    webVersion: "web_version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Hikvision$ {
  /** @deprecated use `Hikvision$inboundSchema` instead. */
  export const inboundSchema = Hikvision$inboundSchema;
  /** @deprecated use `Hikvision$outboundSchema` instead. */
  export const outboundSchema = Hikvision$outboundSchema;
  /** @deprecated use `Hikvision$Outbound` instead. */
  export type Outbound = Hikvision$Outbound;
}

export function hikvisionToJSON(hikvision: Hikvision): string {
  return JSON.stringify(Hikvision$outboundSchema.parse(hikvision));
}

export function hikvisionFromJSON(
  jsonString: string,
): SafeParseResult<Hikvision, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Hikvision$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Hikvision' from JSON`,
  );
}
