/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AmqpVersion = {
  major?: number | undefined;
  minor?: number | undefined;
  revision?: number | undefined;
};

/** @internal */
export const AmqpVersion$inboundSchema: z.ZodType<
  AmqpVersion,
  z.ZodTypeDef,
  unknown
> = z.object({
  major: z.number().int().optional(),
  minor: z.number().int().optional(),
  revision: z.number().int().optional(),
});

/** @internal */
export type AmqpVersion$Outbound = {
  major?: number | undefined;
  minor?: number | undefined;
  revision?: number | undefined;
};

/** @internal */
export const AmqpVersion$outboundSchema: z.ZodType<
  AmqpVersion$Outbound,
  z.ZodTypeDef,
  AmqpVersion
> = z.object({
  major: z.number().int().optional(),
  minor: z.number().int().optional(),
  revision: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AmqpVersion$ {
  /** @deprecated use `AmqpVersion$inboundSchema` instead. */
  export const inboundSchema = AmqpVersion$inboundSchema;
  /** @deprecated use `AmqpVersion$outboundSchema` instead. */
  export const outboundSchema = AmqpVersion$outboundSchema;
  /** @deprecated use `AmqpVersion$Outbound` instead. */
  export type Outbound = AmqpVersion$Outbound;
}

export function amqpVersionToJSON(amqpVersion: AmqpVersion): string {
  return JSON.stringify(AmqpVersion$outboundSchema.parse(amqpVersion));
}

export function amqpVersionFromJSON(
  jsonString: string,
): SafeParseResult<AmqpVersion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AmqpVersion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AmqpVersion' from JSON`,
  );
}
