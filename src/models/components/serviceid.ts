/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const ServiceIdTransportProtocol = {
  Unknown: "",
  Tcp: "tcp",
  Udp: "udp",
  Icmp: "icmp",
  Quic: "quic",
} as const;
export type ServiceIdTransportProtocol = ClosedEnum<
  typeof ServiceIdTransportProtocol
>;

export type ServiceId = {
  ip?: string | undefined;
  port?: number | undefined;
  protocol?: string | undefined;
  transportProtocol?: ServiceIdTransportProtocol | undefined;
};

/** @internal */
export const ServiceIdTransportProtocol$inboundSchema: z.ZodNativeEnum<
  typeof ServiceIdTransportProtocol
> = z.nativeEnum(ServiceIdTransportProtocol);

/** @internal */
export const ServiceIdTransportProtocol$outboundSchema: z.ZodNativeEnum<
  typeof ServiceIdTransportProtocol
> = ServiceIdTransportProtocol$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServiceIdTransportProtocol$ {
  /** @deprecated use `ServiceIdTransportProtocol$inboundSchema` instead. */
  export const inboundSchema = ServiceIdTransportProtocol$inboundSchema;
  /** @deprecated use `ServiceIdTransportProtocol$outboundSchema` instead. */
  export const outboundSchema = ServiceIdTransportProtocol$outboundSchema;
}

/** @internal */
export const ServiceId$inboundSchema: z.ZodType<
  ServiceId,
  z.ZodTypeDef,
  unknown
> = z.object({
  ip: z.string().optional(),
  port: z.number().int().optional(),
  protocol: z.string().optional(),
  transport_protocol: ServiceIdTransportProtocol$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "transport_protocol": "transportProtocol",
  });
});

/** @internal */
export type ServiceId$Outbound = {
  ip?: string | undefined;
  port?: number | undefined;
  protocol?: string | undefined;
  transport_protocol?: string | undefined;
};

/** @internal */
export const ServiceId$outboundSchema: z.ZodType<
  ServiceId$Outbound,
  z.ZodTypeDef,
  ServiceId
> = z.object({
  ip: z.string().optional(),
  port: z.number().int().optional(),
  protocol: z.string().optional(),
  transportProtocol: ServiceIdTransportProtocol$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    transportProtocol: "transport_protocol",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServiceId$ {
  /** @deprecated use `ServiceId$inboundSchema` instead. */
  export const inboundSchema = ServiceId$inboundSchema;
  /** @deprecated use `ServiceId$outboundSchema` instead. */
  export const outboundSchema = ServiceId$outboundSchema;
  /** @deprecated use `ServiceId$Outbound` instead. */
  export type Outbound = ServiceId$Outbound;
}

export function serviceIdToJSON(serviceId: ServiceId): string {
  return JSON.stringify(ServiceId$outboundSchema.parse(serviceId));
}

export function serviceIdFromJSON(
  jsonString: string,
): SafeParseResult<ServiceId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ServiceId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ServiceId' from JSON`,
  );
}
