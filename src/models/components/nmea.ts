/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  NmeaNmeaMessage,
  NmeaNmeaMessage$inboundSchema,
  NmeaNmeaMessage$Outbound,
  NmeaNmeaMessage$outboundSchema,
} from "./nmeanmeamessage.js";

export type Nmea = {
  messages?: Array<NmeaNmeaMessage> | null | undefined;
};

/** @internal */
export const Nmea$inboundSchema: z.ZodType<Nmea, z.ZodTypeDef, unknown> = z
  .object({
    messages: z.nullable(z.array(NmeaNmeaMessage$inboundSchema)).optional(),
  });

/** @internal */
export type Nmea$Outbound = {
  messages?: Array<NmeaNmeaMessage$Outbound> | null | undefined;
};

/** @internal */
export const Nmea$outboundSchema: z.ZodType<Nmea$Outbound, z.ZodTypeDef, Nmea> =
  z.object({
    messages: z.nullable(z.array(NmeaNmeaMessage$outboundSchema)).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Nmea$ {
  /** @deprecated use `Nmea$inboundSchema` instead. */
  export const inboundSchema = Nmea$inboundSchema;
  /** @deprecated use `Nmea$outboundSchema` instead. */
  export const outboundSchema = Nmea$outboundSchema;
  /** @deprecated use `Nmea$Outbound` instead. */
  export type Outbound = Nmea$Outbound;
}

export function nmeaToJSON(nmea: Nmea): string {
  return JSON.stringify(Nmea$outboundSchema.parse(nmea));
}

export function nmeaFromJSON(
  jsonString: string,
): SafeParseResult<Nmea, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Nmea$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Nmea' from JSON`,
  );
}
