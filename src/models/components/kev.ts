/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The source checked to determine whether the CVE is in the KEV catalog.
 */
export const KEVSource = {
  Unspecified: "unspecified",
  Cisa: "cisa",
  ThirdParty: "third_party",
} as const;
/**
 * The source checked to determine whether the CVE is in the KEV catalog.
 */
export type KEVSource = ClosedEnum<typeof KEVSource>;

export type Kev = {
  /**
   * The date the vulnerability was added to the KEV catalog.
   */
  dateAdded?: string | undefined;
  /**
   * Per CISAâ€™s Binding Operation Directive 22-01, the date all federal civilian executive branch (FCEB) agencies are required to remediate vulnerabilities in the KEV catalog.
   */
  dateDue?: string | undefined;
  /**
   * The source checked to determine whether the CVE is in the KEV catalog.
   */
  source?: KEVSource | undefined;
};

/** @internal */
export const KEVSource$inboundSchema: z.ZodNativeEnum<typeof KEVSource> = z
  .nativeEnum(KEVSource);

/** @internal */
export const KEVSource$outboundSchema: z.ZodNativeEnum<typeof KEVSource> =
  KEVSource$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace KEVSource$ {
  /** @deprecated use `KEVSource$inboundSchema` instead. */
  export const inboundSchema = KEVSource$inboundSchema;
  /** @deprecated use `KEVSource$outboundSchema` instead. */
  export const outboundSchema = KEVSource$outboundSchema;
}

/** @internal */
export const Kev$inboundSchema: z.ZodType<Kev, z.ZodTypeDef, unknown> = z
  .object({
    date_added: z.string().optional(),
    date_due: z.string().optional(),
    source: KEVSource$inboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      "date_added": "dateAdded",
      "date_due": "dateDue",
    });
  });

/** @internal */
export type Kev$Outbound = {
  date_added?: string | undefined;
  date_due?: string | undefined;
  source?: string | undefined;
};

/** @internal */
export const Kev$outboundSchema: z.ZodType<Kev$Outbound, z.ZodTypeDef, Kev> = z
  .object({
    dateAdded: z.string().optional(),
    dateDue: z.string().optional(),
    source: KEVSource$outboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      dateAdded: "date_added",
      dateDue: "date_due",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Kev$ {
  /** @deprecated use `Kev$inboundSchema` instead. */
  export const inboundSchema = Kev$inboundSchema;
  /** @deprecated use `Kev$outboundSchema` instead. */
  export const outboundSchema = Kev$outboundSchema;
  /** @deprecated use `Kev$Outbound` instead. */
  export type Outbound = Kev$Outbound;
}

export function kevToJSON(kev: Kev): string {
  return JSON.stringify(Kev$outboundSchema.parse(kev));
}

export function kevFromJSON(
  jsonString: string,
): SafeParseResult<Kev, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Kev$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Kev' from JSON`,
  );
}
