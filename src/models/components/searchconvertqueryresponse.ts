/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AlternativeQuery,
  AlternativeQuery$inboundSchema,
  AlternativeQuery$Outbound,
  AlternativeQuery$outboundSchema,
} from "./alternativequery.js";
import {
  ConvertQueryError,
  ConvertQueryError$inboundSchema,
  ConvertQueryError$Outbound,
  ConvertQueryError$outboundSchema,
} from "./convertqueryerror.js";

export const SearchConvertQueryResponseTargets = {
  Host: "host",
  Web: "web",
  Cert: "cert",
  Unknown: "unknown",
} as const;
export type SearchConvertQueryResponseTargets = ClosedEnum<
  typeof SearchConvertQueryResponseTargets
>;

export type SearchConvertQueryResponse = {
  /**
   * Alternative queries that may be used. For example, a query that includes web results in addition to host results.
   */
  alternativeQueries?: Array<AlternativeQuery> | null | undefined;
  /**
   * Comments about the query conversion.
   */
  comments?: Array<string> | null | undefined;
  /**
   * The original query, converted to CenQL syntax. This may be empty if unable to translate the query.
   */
  convertedQuery?: string | undefined;
  /**
   * The error messages if the query could not be converted.
   */
  errors: Array<ConvertQueryError> | null;
  /**
   * The original Censys Search Language query.
   */
  originalQuery: string;
  /**
   * The types of Platform data records (host, cert, and web) that can be targeted by the converted query. Note: Does not include targets that could be returned due to full-document search. This may be empty if the query is a match-all for full-document search query.
   */
  targets: Array<SearchConvertQueryResponseTargets> | null;
};

/** @internal */
export const SearchConvertQueryResponseTargets$inboundSchema: z.ZodNativeEnum<
  typeof SearchConvertQueryResponseTargets
> = z.nativeEnum(SearchConvertQueryResponseTargets);

/** @internal */
export const SearchConvertQueryResponseTargets$outboundSchema: z.ZodNativeEnum<
  typeof SearchConvertQueryResponseTargets
> = SearchConvertQueryResponseTargets$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchConvertQueryResponseTargets$ {
  /** @deprecated use `SearchConvertQueryResponseTargets$inboundSchema` instead. */
  export const inboundSchema = SearchConvertQueryResponseTargets$inboundSchema;
  /** @deprecated use `SearchConvertQueryResponseTargets$outboundSchema` instead. */
  export const outboundSchema =
    SearchConvertQueryResponseTargets$outboundSchema;
}

/** @internal */
export const SearchConvertQueryResponse$inboundSchema: z.ZodType<
  SearchConvertQueryResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  alternative_queries: z.nullable(z.array(AlternativeQuery$inboundSchema))
    .optional(),
  comments: z.nullable(z.array(z.string())).optional(),
  converted_query: z.string().optional(),
  errors: z.nullable(z.array(ConvertQueryError$inboundSchema)),
  original_query: z.string(),
  targets: z.nullable(z.array(SearchConvertQueryResponseTargets$inboundSchema)),
}).transform((v) => {
  return remap$(v, {
    "alternative_queries": "alternativeQueries",
    "converted_query": "convertedQuery",
    "original_query": "originalQuery",
  });
});

/** @internal */
export type SearchConvertQueryResponse$Outbound = {
  alternative_queries?: Array<AlternativeQuery$Outbound> | null | undefined;
  comments?: Array<string> | null | undefined;
  converted_query?: string | undefined;
  errors: Array<ConvertQueryError$Outbound> | null;
  original_query: string;
  targets: Array<string> | null;
};

/** @internal */
export const SearchConvertQueryResponse$outboundSchema: z.ZodType<
  SearchConvertQueryResponse$Outbound,
  z.ZodTypeDef,
  SearchConvertQueryResponse
> = z.object({
  alternativeQueries: z.nullable(z.array(AlternativeQuery$outboundSchema))
    .optional(),
  comments: z.nullable(z.array(z.string())).optional(),
  convertedQuery: z.string().optional(),
  errors: z.nullable(z.array(ConvertQueryError$outboundSchema)),
  originalQuery: z.string(),
  targets: z.nullable(
    z.array(SearchConvertQueryResponseTargets$outboundSchema),
  ),
}).transform((v) => {
  return remap$(v, {
    alternativeQueries: "alternative_queries",
    convertedQuery: "converted_query",
    originalQuery: "original_query",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchConvertQueryResponse$ {
  /** @deprecated use `SearchConvertQueryResponse$inboundSchema` instead. */
  export const inboundSchema = SearchConvertQueryResponse$inboundSchema;
  /** @deprecated use `SearchConvertQueryResponse$outboundSchema` instead. */
  export const outboundSchema = SearchConvertQueryResponse$outboundSchema;
  /** @deprecated use `SearchConvertQueryResponse$Outbound` instead. */
  export type Outbound = SearchConvertQueryResponse$Outbound;
}

export function searchConvertQueryResponseToJSON(
  searchConvertQueryResponse: SearchConvertQueryResponse,
): string {
  return JSON.stringify(
    SearchConvertQueryResponse$outboundSchema.parse(searchConvertQueryResponse),
  );
}

export function searchConvertQueryResponseFromJSON(
  jsonString: string,
): SafeParseResult<SearchConvertQueryResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchConvertQueryResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchConvertQueryResponse' from JSON`,
  );
}
