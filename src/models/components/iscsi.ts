/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Connection,
  Connection$inboundSchema,
  Connection$Outbound,
  Connection$outboundSchema,
} from "./connection.js";
import {
  Target,
  Target$inboundSchema,
  Target$Outbound,
  Target$outboundSchema,
} from "./target.js";

export type Iscsi = {
  connection?: Connection | undefined;
  errors?: Array<string> | null | undefined;
  targets?: Array<Target> | null | undefined;
};

/** @internal */
export const Iscsi$inboundSchema: z.ZodType<Iscsi, z.ZodTypeDef, unknown> = z
  .object({
    connection: Connection$inboundSchema.optional(),
    errors: z.nullable(z.array(z.string())).optional(),
    targets: z.nullable(z.array(Target$inboundSchema)).optional(),
  });

/** @internal */
export type Iscsi$Outbound = {
  connection?: Connection$Outbound | undefined;
  errors?: Array<string> | null | undefined;
  targets?: Array<Target$Outbound> | null | undefined;
};

/** @internal */
export const Iscsi$outboundSchema: z.ZodType<
  Iscsi$Outbound,
  z.ZodTypeDef,
  Iscsi
> = z.object({
  connection: Connection$outboundSchema.optional(),
  errors: z.nullable(z.array(z.string())).optional(),
  targets: z.nullable(z.array(Target$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Iscsi$ {
  /** @deprecated use `Iscsi$inboundSchema` instead. */
  export const inboundSchema = Iscsi$inboundSchema;
  /** @deprecated use `Iscsi$outboundSchema` instead. */
  export const outboundSchema = Iscsi$outboundSchema;
  /** @deprecated use `Iscsi$Outbound` instead. */
  export type Outbound = Iscsi$Outbound;
}

export function iscsiToJSON(iscsi: Iscsi): string {
  return JSON.stringify(Iscsi$outboundSchema.parse(iscsi));
}

export function iscsiFromJSON(
  jsonString: string,
): SafeParseResult<Iscsi, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Iscsi$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Iscsi' from JSON`,
  );
}
