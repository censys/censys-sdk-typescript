/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ElasticSearchResultsNodeInfoNodesNodeDataNodeSettingsNode,
  ElasticSearchResultsNodeInfoNodesNodeDataNodeSettingsNode$inboundSchema,
  ElasticSearchResultsNodeInfoNodesNodeDataNodeSettingsNode$Outbound,
  ElasticSearchResultsNodeInfoNodesNodeDataNodeSettingsNode$outboundSchema,
} from "./elasticsearchresultsnodeinfonodesnodedatanodesettingsnode.js";

export type ElasticSearchResultsNodeInfoNodesNodeDataNodeSettings = {
  clusterName?: string | undefined;
  node?: ElasticSearchResultsNodeInfoNodesNodeDataNodeSettingsNode | undefined;
};

/** @internal */
export const ElasticSearchResultsNodeInfoNodesNodeDataNodeSettings$inboundSchema:
  z.ZodType<
    ElasticSearchResultsNodeInfoNodesNodeDataNodeSettings,
    z.ZodTypeDef,
    unknown
  > = z.object({
    cluster_name: z.string().optional(),
    node:
      ElasticSearchResultsNodeInfoNodesNodeDataNodeSettingsNode$inboundSchema
        .optional(),
  }).transform((v) => {
    return remap$(v, {
      "cluster_name": "clusterName",
    });
  });

/** @internal */
export type ElasticSearchResultsNodeInfoNodesNodeDataNodeSettings$Outbound = {
  cluster_name?: string | undefined;
  node?:
    | ElasticSearchResultsNodeInfoNodesNodeDataNodeSettingsNode$Outbound
    | undefined;
};

/** @internal */
export const ElasticSearchResultsNodeInfoNodesNodeDataNodeSettings$outboundSchema:
  z.ZodType<
    ElasticSearchResultsNodeInfoNodesNodeDataNodeSettings$Outbound,
    z.ZodTypeDef,
    ElasticSearchResultsNodeInfoNodesNodeDataNodeSettings
  > = z.object({
    clusterName: z.string().optional(),
    node:
      ElasticSearchResultsNodeInfoNodesNodeDataNodeSettingsNode$outboundSchema
        .optional(),
  }).transform((v) => {
    return remap$(v, {
      clusterName: "cluster_name",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ElasticSearchResultsNodeInfoNodesNodeDataNodeSettings$ {
  /** @deprecated use `ElasticSearchResultsNodeInfoNodesNodeDataNodeSettings$inboundSchema` instead. */
  export const inboundSchema =
    ElasticSearchResultsNodeInfoNodesNodeDataNodeSettings$inboundSchema;
  /** @deprecated use `ElasticSearchResultsNodeInfoNodesNodeDataNodeSettings$outboundSchema` instead. */
  export const outboundSchema =
    ElasticSearchResultsNodeInfoNodesNodeDataNodeSettings$outboundSchema;
  /** @deprecated use `ElasticSearchResultsNodeInfoNodesNodeDataNodeSettings$Outbound` instead. */
  export type Outbound =
    ElasticSearchResultsNodeInfoNodesNodeDataNodeSettings$Outbound;
}

export function elasticSearchResultsNodeInfoNodesNodeDataNodeSettingsToJSON(
  elasticSearchResultsNodeInfoNodesNodeDataNodeSettings:
    ElasticSearchResultsNodeInfoNodesNodeDataNodeSettings,
): string {
  return JSON.stringify(
    ElasticSearchResultsNodeInfoNodesNodeDataNodeSettings$outboundSchema.parse(
      elasticSearchResultsNodeInfoNodesNodeDataNodeSettings,
    ),
  );
}

export function elasticSearchResultsNodeInfoNodesNodeDataNodeSettingsFromJSON(
  jsonString: string,
): SafeParseResult<
  ElasticSearchResultsNodeInfoNodesNodeDataNodeSettings,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ElasticSearchResultsNodeInfoNodesNodeDataNodeSettings$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ElasticSearchResultsNodeInfoNodesNodeDataNodeSettings' from JSON`,
  );
}
