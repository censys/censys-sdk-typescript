/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SearchAggregateInputBody = {
  /**
   * Specifies which document level's count is returned per term bucket, primarily for nested fields. This is the same functionality available in the Count By dropdown in the Report Builder UI. When aggregating on nested fields like 'host.services.port': empty string (default) counts documents at the deepest level containing the field; '.' counts root documents (e.g. counts matching 'host'); 'host.services' counts documents at the specified nested level.
   */
  countByLevel?: string | undefined;
  /**
   * field to aggregate by
   */
  field: string;
  /**
   * Controls whether aggregation results are limited to values that match the query. When true, only field values that satisfy the query constraints are included in aggregation counts. When false, aggregation includes all field values from records that match the query, even if those specific field values don't match the query constraints. For example, if the query is 'host.services.protocol=SSH' and you are aggregating by 'host.services.port' - when true, only shows SSH ports; when false, shows all ports on hosts that have SSH services.
   */
  filterByQuery?: boolean | undefined;
  /**
   * number of buckets to split results into
   */
  numberOfBuckets: number;
  /**
   * CenQL query string to search upon
   */
  query: string;
};

/** @internal */
export const SearchAggregateInputBody$inboundSchema: z.ZodType<
  SearchAggregateInputBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  count_by_level: z.string().optional(),
  field: z.string(),
  filter_by_query: z.boolean().default(false),
  number_of_buckets: z.number().int(),
  query: z.string(),
}).transform((v) => {
  return remap$(v, {
    "count_by_level": "countByLevel",
    "filter_by_query": "filterByQuery",
    "number_of_buckets": "numberOfBuckets",
  });
});

/** @internal */
export type SearchAggregateInputBody$Outbound = {
  count_by_level?: string | undefined;
  field: string;
  filter_by_query: boolean;
  number_of_buckets: number;
  query: string;
};

/** @internal */
export const SearchAggregateInputBody$outboundSchema: z.ZodType<
  SearchAggregateInputBody$Outbound,
  z.ZodTypeDef,
  SearchAggregateInputBody
> = z.object({
  countByLevel: z.string().optional(),
  field: z.string(),
  filterByQuery: z.boolean().default(false),
  numberOfBuckets: z.number().int(),
  query: z.string(),
}).transform((v) => {
  return remap$(v, {
    countByLevel: "count_by_level",
    filterByQuery: "filter_by_query",
    numberOfBuckets: "number_of_buckets",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchAggregateInputBody$ {
  /** @deprecated use `SearchAggregateInputBody$inboundSchema` instead. */
  export const inboundSchema = SearchAggregateInputBody$inboundSchema;
  /** @deprecated use `SearchAggregateInputBody$outboundSchema` instead. */
  export const outboundSchema = SearchAggregateInputBody$outboundSchema;
  /** @deprecated use `SearchAggregateInputBody$Outbound` instead. */
  export type Outbound = SearchAggregateInputBody$Outbound;
}

export function searchAggregateInputBodyToJSON(
  searchAggregateInputBody: SearchAggregateInputBody,
): string {
  return JSON.stringify(
    SearchAggregateInputBody$outboundSchema.parse(searchAggregateInputBody),
  );
}

export function searchAggregateInputBodyFromJSON(
  jsonString: string,
): SafeParseResult<SearchAggregateInputBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchAggregateInputBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchAggregateInputBody' from JSON`,
  );
}
