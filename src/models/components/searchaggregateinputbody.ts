/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SearchAggregateInputBody = {
  /**
   * field to aggregate by
   */
  field: string;
  /**
   * number of buckets to split results into
   */
  numberOfBuckets: number;
  /**
   * CenQL query string to search upon
   */
  query: string;
};

/** @internal */
export const SearchAggregateInputBody$inboundSchema: z.ZodType<
  SearchAggregateInputBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  field: z.string(),
  number_of_buckets: z.number().int(),
  query: z.string(),
}).transform((v) => {
  return remap$(v, {
    "number_of_buckets": "numberOfBuckets",
  });
});

/** @internal */
export type SearchAggregateInputBody$Outbound = {
  field: string;
  number_of_buckets: number;
  query: string;
};

/** @internal */
export const SearchAggregateInputBody$outboundSchema: z.ZodType<
  SearchAggregateInputBody$Outbound,
  z.ZodTypeDef,
  SearchAggregateInputBody
> = z.object({
  field: z.string(),
  numberOfBuckets: z.number().int(),
  query: z.string(),
}).transform((v) => {
  return remap$(v, {
    numberOfBuckets: "number_of_buckets",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchAggregateInputBody$ {
  /** @deprecated use `SearchAggregateInputBody$inboundSchema` instead. */
  export const inboundSchema = SearchAggregateInputBody$inboundSchema;
  /** @deprecated use `SearchAggregateInputBody$outboundSchema` instead. */
  export const outboundSchema = SearchAggregateInputBody$outboundSchema;
  /** @deprecated use `SearchAggregateInputBody$Outbound` instead. */
  export type Outbound = SearchAggregateInputBody$Outbound;
}

export function searchAggregateInputBodyToJSON(
  searchAggregateInputBody: SearchAggregateInputBody,
): string {
  return JSON.stringify(
    SearchAggregateInputBody$outboundSchema.parse(searchAggregateInputBody),
  );
}

export function searchAggregateInputBodyFromJSON(
  jsonString: string,
): SafeParseResult<SearchAggregateInputBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchAggregateInputBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchAggregateInputBody' from JSON`,
  );
}
