/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PixelFormat = {
  /**
   * If pixel RGB data are in big-endian
   */
  bigEndian?: boolean | undefined;
  /**
   * How many bits in a single full pixel datum. Valid values are: 8, 16, 32
   */
  bitsPerPixel?: number | undefined;
  /**
   * Max value of blue pixel
   */
  blueMax?: number | undefined;
  /**
   * How many bits to right shift a pixel datum to get blue bits in lsb
   */
  blueShift?: number | undefined;
  /**
   * Color depth
   */
  depth?: number | undefined;
  /**
   * Max value of green pixel
   */
  greenMax?: number | undefined;
  /**
   * How many bits to right shift a pixel datum to get green bits in lsb
   */
  greenShift?: number | undefined;
  padding1?: number | undefined;
  padding2?: number | undefined;
  padding3?: number | undefined;
  /**
   * Max value of red pixel
   */
  redMax?: number | undefined;
  /**
   * How many bits to right shift a pixel datum to get red bits in lsb
   */
  redShift?: number | undefined;
  /**
   * If false, color maps are used
   */
  trueColor?: boolean | undefined;
};

/** @internal */
export const PixelFormat$inboundSchema: z.ZodType<
  PixelFormat,
  z.ZodTypeDef,
  unknown
> = z.object({
  big_endian: z.boolean().optional(),
  bits_per_pixel: z.number().int().optional(),
  blue_max: z.number().int().optional(),
  blue_shift: z.number().int().optional(),
  depth: z.number().int().optional(),
  green_max: z.number().int().optional(),
  green_shift: z.number().int().optional(),
  padding1: z.number().int().optional(),
  padding2: z.number().int().optional(),
  padding3: z.number().int().optional(),
  red_max: z.number().int().optional(),
  red_shift: z.number().int().optional(),
  true_color: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    "big_endian": "bigEndian",
    "bits_per_pixel": "bitsPerPixel",
    "blue_max": "blueMax",
    "blue_shift": "blueShift",
    "green_max": "greenMax",
    "green_shift": "greenShift",
    "red_max": "redMax",
    "red_shift": "redShift",
    "true_color": "trueColor",
  });
});

/** @internal */
export type PixelFormat$Outbound = {
  big_endian?: boolean | undefined;
  bits_per_pixel?: number | undefined;
  blue_max?: number | undefined;
  blue_shift?: number | undefined;
  depth?: number | undefined;
  green_max?: number | undefined;
  green_shift?: number | undefined;
  padding1?: number | undefined;
  padding2?: number | undefined;
  padding3?: number | undefined;
  red_max?: number | undefined;
  red_shift?: number | undefined;
  true_color?: boolean | undefined;
};

/** @internal */
export const PixelFormat$outboundSchema: z.ZodType<
  PixelFormat$Outbound,
  z.ZodTypeDef,
  PixelFormat
> = z.object({
  bigEndian: z.boolean().optional(),
  bitsPerPixel: z.number().int().optional(),
  blueMax: z.number().int().optional(),
  blueShift: z.number().int().optional(),
  depth: z.number().int().optional(),
  greenMax: z.number().int().optional(),
  greenShift: z.number().int().optional(),
  padding1: z.number().int().optional(),
  padding2: z.number().int().optional(),
  padding3: z.number().int().optional(),
  redMax: z.number().int().optional(),
  redShift: z.number().int().optional(),
  trueColor: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    bigEndian: "big_endian",
    bitsPerPixel: "bits_per_pixel",
    blueMax: "blue_max",
    blueShift: "blue_shift",
    greenMax: "green_max",
    greenShift: "green_shift",
    redMax: "red_max",
    redShift: "red_shift",
    trueColor: "true_color",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PixelFormat$ {
  /** @deprecated use `PixelFormat$inboundSchema` instead. */
  export const inboundSchema = PixelFormat$inboundSchema;
  /** @deprecated use `PixelFormat$outboundSchema` instead. */
  export const outboundSchema = PixelFormat$outboundSchema;
  /** @deprecated use `PixelFormat$Outbound` instead. */
  export type Outbound = PixelFormat$Outbound;
}

export function pixelFormatToJSON(pixelFormat: PixelFormat): string {
  return JSON.stringify(PixelFormat$outboundSchema.parse(pixelFormat));
}

export function pixelFormatFromJSON(
  jsonString: string,
): SafeParseResult<PixelFormat, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PixelFormat$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PixelFormat' from JSON`,
  );
}
