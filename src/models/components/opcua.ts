/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  OpcUaEndpoint,
  OpcUaEndpoint$inboundSchema,
  OpcUaEndpoint$Outbound,
  OpcUaEndpoint$outboundSchema,
} from "./opcuaendpoint.js";

export type OpcUa = {
  endpoints?: Array<OpcUaEndpoint> | null | undefined;
  maxChunkSize?: number | undefined;
  maxMessageSize?: number | undefined;
  protocolVersion?: number | undefined;
  receiveBufferSize?: number | undefined;
  sendBufferSize?: number | undefined;
};

/** @internal */
export const OpcUa$inboundSchema: z.ZodType<OpcUa, z.ZodTypeDef, unknown> = z
  .object({
    endpoints: z.nullable(z.array(OpcUaEndpoint$inboundSchema)).optional(),
    max_chunk_size: z.number().int().optional(),
    max_message_size: z.number().int().optional(),
    protocol_version: z.number().int().optional(),
    receive_buffer_size: z.number().int().optional(),
    send_buffer_size: z.number().int().optional(),
  }).transform((v) => {
    return remap$(v, {
      "max_chunk_size": "maxChunkSize",
      "max_message_size": "maxMessageSize",
      "protocol_version": "protocolVersion",
      "receive_buffer_size": "receiveBufferSize",
      "send_buffer_size": "sendBufferSize",
    });
  });

/** @internal */
export type OpcUa$Outbound = {
  endpoints?: Array<OpcUaEndpoint$Outbound> | null | undefined;
  max_chunk_size?: number | undefined;
  max_message_size?: number | undefined;
  protocol_version?: number | undefined;
  receive_buffer_size?: number | undefined;
  send_buffer_size?: number | undefined;
};

/** @internal */
export const OpcUa$outboundSchema: z.ZodType<
  OpcUa$Outbound,
  z.ZodTypeDef,
  OpcUa
> = z.object({
  endpoints: z.nullable(z.array(OpcUaEndpoint$outboundSchema)).optional(),
  maxChunkSize: z.number().int().optional(),
  maxMessageSize: z.number().int().optional(),
  protocolVersion: z.number().int().optional(),
  receiveBufferSize: z.number().int().optional(),
  sendBufferSize: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    maxChunkSize: "max_chunk_size",
    maxMessageSize: "max_message_size",
    protocolVersion: "protocol_version",
    receiveBufferSize: "receive_buffer_size",
    sendBufferSize: "send_buffer_size",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpcUa$ {
  /** @deprecated use `OpcUa$inboundSchema` instead. */
  export const inboundSchema = OpcUa$inboundSchema;
  /** @deprecated use `OpcUa$outboundSchema` instead. */
  export const outboundSchema = OpcUa$outboundSchema;
  /** @deprecated use `OpcUa$Outbound` instead. */
  export type Outbound = OpcUa$Outbound;
}

export function opcUaToJSON(opcUa: OpcUa): string {
  return JSON.stringify(OpcUa$outboundSchema.parse(opcUa));
}

export function opcUaFromJSON(
  jsonString: string,
): SafeParseResult<OpcUa, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpcUa$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpcUa' from JSON`,
  );
}
