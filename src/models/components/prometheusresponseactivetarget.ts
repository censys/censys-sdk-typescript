/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  PrometheusResponseActiveTargetDiscoveredLabels,
  PrometheusResponseActiveTargetDiscoveredLabels$inboundSchema,
  PrometheusResponseActiveTargetDiscoveredLabels$Outbound,
  PrometheusResponseActiveTargetDiscoveredLabels$outboundSchema,
} from "./prometheusresponseactivetargetdiscoveredlabels.js";
import {
  PrometheusResponseActiveTargetLabels,
  PrometheusResponseActiveTargetLabels$inboundSchema,
  PrometheusResponseActiveTargetLabels$Outbound,
  PrometheusResponseActiveTargetLabels$outboundSchema,
} from "./prometheusresponseactivetargetlabels.js";

export type PrometheusResponseActiveTarget = {
  discoveredLabels?: PrometheusResponseActiveTargetDiscoveredLabels | undefined;
  /**
   * Whether target is up or down.
   */
  health?: string | undefined;
  labels?: PrometheusResponseActiveTargetLabels | undefined;
  /**
   * Last error that occurred within target.
   */
  lastError?: string | undefined;
  /**
   * Last time Prometheus scraped target.
   */
  lastScrape?: string | undefined;
  /**
   * URL that Prometheus scraped.
   */
  scrapeUrl?: string | undefined;
};

/** @internal */
export const PrometheusResponseActiveTarget$inboundSchema: z.ZodType<
  PrometheusResponseActiveTarget,
  z.ZodTypeDef,
  unknown
> = z.object({
  discovered_labels:
    PrometheusResponseActiveTargetDiscoveredLabels$inboundSchema.optional(),
  health: z.string().optional(),
  labels: PrometheusResponseActiveTargetLabels$inboundSchema.optional(),
  last_error: z.string().optional(),
  last_scrape: z.string().optional(),
  scrape_url: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "discovered_labels": "discoveredLabels",
    "last_error": "lastError",
    "last_scrape": "lastScrape",
    "scrape_url": "scrapeUrl",
  });
});

/** @internal */
export type PrometheusResponseActiveTarget$Outbound = {
  discovered_labels?:
    | PrometheusResponseActiveTargetDiscoveredLabels$Outbound
    | undefined;
  health?: string | undefined;
  labels?: PrometheusResponseActiveTargetLabels$Outbound | undefined;
  last_error?: string | undefined;
  last_scrape?: string | undefined;
  scrape_url?: string | undefined;
};

/** @internal */
export const PrometheusResponseActiveTarget$outboundSchema: z.ZodType<
  PrometheusResponseActiveTarget$Outbound,
  z.ZodTypeDef,
  PrometheusResponseActiveTarget
> = z.object({
  discoveredLabels:
    PrometheusResponseActiveTargetDiscoveredLabels$outboundSchema.optional(),
  health: z.string().optional(),
  labels: PrometheusResponseActiveTargetLabels$outboundSchema.optional(),
  lastError: z.string().optional(),
  lastScrape: z.string().optional(),
  scrapeUrl: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    discoveredLabels: "discovered_labels",
    lastError: "last_error",
    lastScrape: "last_scrape",
    scrapeUrl: "scrape_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PrometheusResponseActiveTarget$ {
  /** @deprecated use `PrometheusResponseActiveTarget$inboundSchema` instead. */
  export const inboundSchema = PrometheusResponseActiveTarget$inboundSchema;
  /** @deprecated use `PrometheusResponseActiveTarget$outboundSchema` instead. */
  export const outboundSchema = PrometheusResponseActiveTarget$outboundSchema;
  /** @deprecated use `PrometheusResponseActiveTarget$Outbound` instead. */
  export type Outbound = PrometheusResponseActiveTarget$Outbound;
}

export function prometheusResponseActiveTargetToJSON(
  prometheusResponseActiveTarget: PrometheusResponseActiveTarget,
): string {
  return JSON.stringify(
    PrometheusResponseActiveTarget$outboundSchema.parse(
      prometheusResponseActiveTarget,
    ),
  );
}

export function prometheusResponseActiveTargetFromJSON(
  jsonString: string,
): SafeParseResult<PrometheusResponseActiveTarget, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PrometheusResponseActiveTarget$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PrometheusResponseActiveTarget' from JSON`,
  );
}
