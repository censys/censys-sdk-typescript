/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type BasicConstraints = {
  /**
   * Whether the certificate is permitted to sign other certificates.
   */
  isCa?: boolean | undefined;
  /**
   * When present, provides the maximum number of intermediate certificates that may follow this certificate in a trusted certification path.
   */
  maxPathLen?: number | undefined;
};

/** @internal */
export const BasicConstraints$inboundSchema: z.ZodType<
  BasicConstraints,
  z.ZodTypeDef,
  unknown
> = z.object({
  is_ca: z.boolean().optional(),
  max_path_len: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "is_ca": "isCa",
    "max_path_len": "maxPathLen",
  });
});

/** @internal */
export type BasicConstraints$Outbound = {
  is_ca?: boolean | undefined;
  max_path_len?: number | undefined;
};

/** @internal */
export const BasicConstraints$outboundSchema: z.ZodType<
  BasicConstraints$Outbound,
  z.ZodTypeDef,
  BasicConstraints
> = z.object({
  isCa: z.boolean().optional(),
  maxPathLen: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    isCa: "is_ca",
    maxPathLen: "max_path_len",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BasicConstraints$ {
  /** @deprecated use `BasicConstraints$inboundSchema` instead. */
  export const inboundSchema = BasicConstraints$inboundSchema;
  /** @deprecated use `BasicConstraints$outboundSchema` instead. */
  export const outboundSchema = BasicConstraints$outboundSchema;
  /** @deprecated use `BasicConstraints$Outbound` instead. */
  export type Outbound = BasicConstraints$Outbound;
}

export function basicConstraintsToJSON(
  basicConstraints: BasicConstraints,
): string {
  return JSON.stringify(
    BasicConstraints$outboundSchema.parse(basicConstraints),
  );
}

export function basicConstraintsFromJSON(
  jsonString: string,
): SafeParseResult<BasicConstraints, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BasicConstraints$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BasicConstraints' from JSON`,
  );
}
