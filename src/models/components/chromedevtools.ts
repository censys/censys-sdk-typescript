/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ChromeDevtoolsTarget,
  ChromeDevtoolsTarget$inboundSchema,
  ChromeDevtoolsTarget$Outbound,
  ChromeDevtoolsTarget$outboundSchema,
} from "./chromedevtoolstarget.js";

export type ChromeDevtools = {
  browser?: string | undefined;
  protocolVersion?: string | undefined;
  targets?: Array<ChromeDevtoolsTarget> | null | undefined;
  userAgent?: string | undefined;
  v8Version?: string | undefined;
  webkitVersion?: string | undefined;
};

/** @internal */
export const ChromeDevtools$inboundSchema: z.ZodType<
  ChromeDevtools,
  z.ZodTypeDef,
  unknown
> = z.object({
  browser: z.string().optional(),
  protocol_version: z.string().optional(),
  targets: z.nullable(z.array(ChromeDevtoolsTarget$inboundSchema)).optional(),
  user_agent: z.string().optional(),
  v8_version: z.string().optional(),
  webkit_version: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "protocol_version": "protocolVersion",
    "user_agent": "userAgent",
    "v8_version": "v8Version",
    "webkit_version": "webkitVersion",
  });
});

/** @internal */
export type ChromeDevtools$Outbound = {
  browser?: string | undefined;
  protocol_version?: string | undefined;
  targets?: Array<ChromeDevtoolsTarget$Outbound> | null | undefined;
  user_agent?: string | undefined;
  v8_version?: string | undefined;
  webkit_version?: string | undefined;
};

/** @internal */
export const ChromeDevtools$outboundSchema: z.ZodType<
  ChromeDevtools$Outbound,
  z.ZodTypeDef,
  ChromeDevtools
> = z.object({
  browser: z.string().optional(),
  protocolVersion: z.string().optional(),
  targets: z.nullable(z.array(ChromeDevtoolsTarget$outboundSchema)).optional(),
  userAgent: z.string().optional(),
  v8Version: z.string().optional(),
  webkitVersion: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    protocolVersion: "protocol_version",
    userAgent: "user_agent",
    v8Version: "v8_version",
    webkitVersion: "webkit_version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChromeDevtools$ {
  /** @deprecated use `ChromeDevtools$inboundSchema` instead. */
  export const inboundSchema = ChromeDevtools$inboundSchema;
  /** @deprecated use `ChromeDevtools$outboundSchema` instead. */
  export const outboundSchema = ChromeDevtools$outboundSchema;
  /** @deprecated use `ChromeDevtools$Outbound` instead. */
  export type Outbound = ChromeDevtools$Outbound;
}

export function chromeDevtoolsToJSON(chromeDevtools: ChromeDevtools): string {
  return JSON.stringify(ChromeDevtools$outboundSchema.parse(chromeDevtools));
}

export function chromeDevtoolsFromJSON(
  jsonString: string,
): SafeParseResult<ChromeDevtools, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChromeDevtools$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChromeDevtools' from JSON`,
  );
}
