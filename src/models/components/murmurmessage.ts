/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  MurmurMessageMurmurHeader,
  MurmurMessageMurmurHeader$inboundSchema,
  MurmurMessageMurmurHeader$Outbound,
  MurmurMessageMurmurHeader$outboundSchema,
} from "./murmurmessagemurmurheader.js";

export type MurmurMessage = {
  body?: string | undefined;
  header?: MurmurMessageMurmurHeader | undefined;
};

/** @internal */
export const MurmurMessage$inboundSchema: z.ZodType<
  MurmurMessage,
  z.ZodTypeDef,
  unknown
> = z.object({
  body: z.string().optional(),
  header: MurmurMessageMurmurHeader$inboundSchema.optional(),
});

/** @internal */
export type MurmurMessage$Outbound = {
  body?: string | undefined;
  header?: MurmurMessageMurmurHeader$Outbound | undefined;
};

/** @internal */
export const MurmurMessage$outboundSchema: z.ZodType<
  MurmurMessage$Outbound,
  z.ZodTypeDef,
  MurmurMessage
> = z.object({
  body: z.string().optional(),
  header: MurmurMessageMurmurHeader$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MurmurMessage$ {
  /** @deprecated use `MurmurMessage$inboundSchema` instead. */
  export const inboundSchema = MurmurMessage$inboundSchema;
  /** @deprecated use `MurmurMessage$outboundSchema` instead. */
  export const outboundSchema = MurmurMessage$outboundSchema;
  /** @deprecated use `MurmurMessage$Outbound` instead. */
  export type Outbound = MurmurMessage$Outbound;
}

export function murmurMessageToJSON(murmurMessage: MurmurMessage): string {
  return JSON.stringify(MurmurMessage$outboundSchema.parse(murmurMessage));
}

export function murmurMessageFromJSON(
  jsonString: string,
): SafeParseResult<MurmurMessage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MurmurMessage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MurmurMessage' from JSON`,
  );
}
