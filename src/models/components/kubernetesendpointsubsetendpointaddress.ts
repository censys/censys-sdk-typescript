/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type KubernetesEndpointSubsetEndpointAddress = {
  hostname?: string | undefined;
  ip?: string | undefined;
  nodeName?: string | undefined;
};

/** @internal */
export const KubernetesEndpointSubsetEndpointAddress$inboundSchema: z.ZodType<
  KubernetesEndpointSubsetEndpointAddress,
  z.ZodTypeDef,
  unknown
> = z.object({
  hostname: z.string().optional(),
  ip: z.string().optional(),
  node_name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "node_name": "nodeName",
  });
});

/** @internal */
export type KubernetesEndpointSubsetEndpointAddress$Outbound = {
  hostname?: string | undefined;
  ip?: string | undefined;
  node_name?: string | undefined;
};

/** @internal */
export const KubernetesEndpointSubsetEndpointAddress$outboundSchema: z.ZodType<
  KubernetesEndpointSubsetEndpointAddress$Outbound,
  z.ZodTypeDef,
  KubernetesEndpointSubsetEndpointAddress
> = z.object({
  hostname: z.string().optional(),
  ip: z.string().optional(),
  nodeName: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    nodeName: "node_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace KubernetesEndpointSubsetEndpointAddress$ {
  /** @deprecated use `KubernetesEndpointSubsetEndpointAddress$inboundSchema` instead. */
  export const inboundSchema =
    KubernetesEndpointSubsetEndpointAddress$inboundSchema;
  /** @deprecated use `KubernetesEndpointSubsetEndpointAddress$outboundSchema` instead. */
  export const outboundSchema =
    KubernetesEndpointSubsetEndpointAddress$outboundSchema;
  /** @deprecated use `KubernetesEndpointSubsetEndpointAddress$Outbound` instead. */
  export type Outbound = KubernetesEndpointSubsetEndpointAddress$Outbound;
}

export function kubernetesEndpointSubsetEndpointAddressToJSON(
  kubernetesEndpointSubsetEndpointAddress:
    KubernetesEndpointSubsetEndpointAddress,
): string {
  return JSON.stringify(
    KubernetesEndpointSubsetEndpointAddress$outboundSchema.parse(
      kubernetesEndpointSubsetEndpointAddress,
    ),
  );
}

export function kubernetesEndpointSubsetEndpointAddressFromJSON(
  jsonString: string,
): SafeParseResult<
  KubernetesEndpointSubsetEndpointAddress,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      KubernetesEndpointSubsetEndpointAddress$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'KubernetesEndpointSubsetEndpointAddress' from JSON`,
  );
}
