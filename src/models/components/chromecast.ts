/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ChromecastApplication,
  ChromecastApplication$inboundSchema,
  ChromecastApplication$Outbound,
  ChromecastApplication$outboundSchema,
} from "./chromecastapplication.js";
import {
  ChromecastVolume,
  ChromecastVolume$inboundSchema,
  ChromecastVolume$Outbound,
  ChromecastVolume$outboundSchema,
} from "./chromecastvolume.js";

export type Chromecast = {
  applications?: Array<ChromecastApplication> | null | undefined;
  iconUrl?: string | undefined;
  isActiveInput?: boolean | undefined;
  protocolVersion?: number | undefined;
  statusText?: string | undefined;
  universalAppId?: string | undefined;
  volume?: ChromecastVolume | undefined;
};

/** @internal */
export const Chromecast$inboundSchema: z.ZodType<
  Chromecast,
  z.ZodTypeDef,
  unknown
> = z.object({
  applications: z.nullable(z.array(ChromecastApplication$inboundSchema))
    .optional(),
  icon_url: z.string().optional(),
  is_active_input: z.boolean().optional(),
  protocol_version: z.number().int().optional(),
  status_text: z.string().optional(),
  universal_app_id: z.string().optional(),
  volume: ChromecastVolume$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "icon_url": "iconUrl",
    "is_active_input": "isActiveInput",
    "protocol_version": "protocolVersion",
    "status_text": "statusText",
    "universal_app_id": "universalAppId",
  });
});

/** @internal */
export type Chromecast$Outbound = {
  applications?: Array<ChromecastApplication$Outbound> | null | undefined;
  icon_url?: string | undefined;
  is_active_input?: boolean | undefined;
  protocol_version?: number | undefined;
  status_text?: string | undefined;
  universal_app_id?: string | undefined;
  volume?: ChromecastVolume$Outbound | undefined;
};

/** @internal */
export const Chromecast$outboundSchema: z.ZodType<
  Chromecast$Outbound,
  z.ZodTypeDef,
  Chromecast
> = z.object({
  applications: z.nullable(z.array(ChromecastApplication$outboundSchema))
    .optional(),
  iconUrl: z.string().optional(),
  isActiveInput: z.boolean().optional(),
  protocolVersion: z.number().int().optional(),
  statusText: z.string().optional(),
  universalAppId: z.string().optional(),
  volume: ChromecastVolume$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    iconUrl: "icon_url",
    isActiveInput: "is_active_input",
    protocolVersion: "protocol_version",
    statusText: "status_text",
    universalAppId: "universal_app_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Chromecast$ {
  /** @deprecated use `Chromecast$inboundSchema` instead. */
  export const inboundSchema = Chromecast$inboundSchema;
  /** @deprecated use `Chromecast$outboundSchema` instead. */
  export const outboundSchema = Chromecast$outboundSchema;
  /** @deprecated use `Chromecast$Outbound` instead. */
  export type Outbound = Chromecast$Outbound;
}

export function chromecastToJSON(chromecast: Chromecast): string {
  return JSON.stringify(Chromecast$outboundSchema.parse(chromecast));
}

export function chromecastFromJSON(
  jsonString: string,
): SafeParseResult<Chromecast, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Chromecast$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Chromecast' from JSON`,
  );
}
