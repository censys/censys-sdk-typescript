/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Port = {
  port?: string | undefined;
  protocol?: Array<string> | null | undefined;
};

/** @internal */
export const Port$inboundSchema: z.ZodType<Port, z.ZodTypeDef, unknown> = z
  .object({
    port: z.string().optional(),
    protocol: z.nullable(z.array(z.string())).optional(),
  });

/** @internal */
export type Port$Outbound = {
  port?: string | undefined;
  protocol?: Array<string> | null | undefined;
};

/** @internal */
export const Port$outboundSchema: z.ZodType<Port$Outbound, z.ZodTypeDef, Port> =
  z.object({
    port: z.string().optional(),
    protocol: z.nullable(z.array(z.string())).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Port$ {
  /** @deprecated use `Port$inboundSchema` instead. */
  export const inboundSchema = Port$inboundSchema;
  /** @deprecated use `Port$outboundSchema` instead. */
  export const outboundSchema = Port$outboundSchema;
  /** @deprecated use `Port$Outbound` instead. */
  export type Outbound = Port$Outbound;
}

export function portToJSON(port: Port): string {
  return JSON.stringify(Port$outboundSchema.parse(port));
}

export function portFromJSON(
  jsonString: string,
): SafeParseResult<Port, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Port$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Port' from JSON`,
  );
}
