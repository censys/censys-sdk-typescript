/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ServerSync = {
  maxBandwidth?: number | undefined;
  permissions?: Array<string> | null | undefined;
  welcomeText?: string | undefined;
};

/** @internal */
export const ServerSync$inboundSchema: z.ZodType<
  ServerSync,
  z.ZodTypeDef,
  unknown
> = z.object({
  max_bandwidth: z.number().int().optional(),
  permissions: z.nullable(z.array(z.string())).optional(),
  welcome_text: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "max_bandwidth": "maxBandwidth",
    "welcome_text": "welcomeText",
  });
});

/** @internal */
export type ServerSync$Outbound = {
  max_bandwidth?: number | undefined;
  permissions?: Array<string> | null | undefined;
  welcome_text?: string | undefined;
};

/** @internal */
export const ServerSync$outboundSchema: z.ZodType<
  ServerSync$Outbound,
  z.ZodTypeDef,
  ServerSync
> = z.object({
  maxBandwidth: z.number().int().optional(),
  permissions: z.nullable(z.array(z.string())).optional(),
  welcomeText: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    maxBandwidth: "max_bandwidth",
    welcomeText: "welcome_text",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServerSync$ {
  /** @deprecated use `ServerSync$inboundSchema` instead. */
  export const inboundSchema = ServerSync$inboundSchema;
  /** @deprecated use `ServerSync$outboundSchema` instead. */
  export const outboundSchema = ServerSync$outboundSchema;
  /** @deprecated use `ServerSync$Outbound` instead. */
  export type Outbound = ServerSync$Outbound;
}

export function serverSyncToJSON(serverSync: ServerSync): string {
  return JSON.stringify(ServerSync$outboundSchema.parse(serverSync));
}

export function serverSyncFromJSON(
  jsonString: string,
): SafeParseResult<ServerSync, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ServerSync$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ServerSync' from JSON`,
  );
}
