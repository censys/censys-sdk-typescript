/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * An enumerated field indicating what type of data is in the "services.dns.additionals.response" field. For example, "A" signifies that the value in "services.dns.additionals.response" is an IPv4 address for the FQDN in "services.dns.additionals.name".
 */
export const DnsResourceRecordType = {
  Unknown: "",
  A: "a",
  Txt: "txt",
  Ns: "ns",
} as const;
/**
 * An enumerated field indicating what type of data is in the "services.dns.additionals.response" field. For example, "A" signifies that the value in "services.dns.additionals.response" is an IPv4 address for the FQDN in "services.dns.additionals.name".
 */
export type DnsResourceRecordType = ClosedEnum<typeof DnsResourceRecordType>;

export type DnsResourceRecord = {
  /**
   * The Fully Qualified Domain Name (FQDN) this RR is for.
   */
  name?: string | undefined;
  /**
   * The RDATA field of the RR.
   */
  response?: string | undefined;
  /**
   * An enumerated field indicating what type of data is in the "services.dns.additionals.response" field. For example, "A" signifies that the value in "services.dns.additionals.response" is an IPv4 address for the FQDN in "services.dns.additionals.name".
   */
  type?: DnsResourceRecordType | undefined;
};

/** @internal */
export const DnsResourceRecordType$inboundSchema: z.ZodNativeEnum<
  typeof DnsResourceRecordType
> = z.nativeEnum(DnsResourceRecordType);

/** @internal */
export const DnsResourceRecordType$outboundSchema: z.ZodNativeEnum<
  typeof DnsResourceRecordType
> = DnsResourceRecordType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DnsResourceRecordType$ {
  /** @deprecated use `DnsResourceRecordType$inboundSchema` instead. */
  export const inboundSchema = DnsResourceRecordType$inboundSchema;
  /** @deprecated use `DnsResourceRecordType$outboundSchema` instead. */
  export const outboundSchema = DnsResourceRecordType$outboundSchema;
}

/** @internal */
export const DnsResourceRecord$inboundSchema: z.ZodType<
  DnsResourceRecord,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  response: z.string().optional(),
  type: DnsResourceRecordType$inboundSchema.optional(),
});

/** @internal */
export type DnsResourceRecord$Outbound = {
  name?: string | undefined;
  response?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const DnsResourceRecord$outboundSchema: z.ZodType<
  DnsResourceRecord$Outbound,
  z.ZodTypeDef,
  DnsResourceRecord
> = z.object({
  name: z.string().optional(),
  response: z.string().optional(),
  type: DnsResourceRecordType$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DnsResourceRecord$ {
  /** @deprecated use `DnsResourceRecord$inboundSchema` instead. */
  export const inboundSchema = DnsResourceRecord$inboundSchema;
  /** @deprecated use `DnsResourceRecord$outboundSchema` instead. */
  export const outboundSchema = DnsResourceRecord$outboundSchema;
  /** @deprecated use `DnsResourceRecord$Outbound` instead. */
  export type Outbound = DnsResourceRecord$Outbound;
}

export function dnsResourceRecordToJSON(
  dnsResourceRecord: DnsResourceRecord,
): string {
  return JSON.stringify(
    DnsResourceRecord$outboundSchema.parse(dnsResourceRecord),
  );
}

export function dnsResourceRecordFromJSON(
  jsonString: string,
): SafeParseResult<DnsResourceRecord, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DnsResourceRecord$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DnsResourceRecord' from JSON`,
  );
}
