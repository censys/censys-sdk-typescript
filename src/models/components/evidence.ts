/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Evidence = {
  dataPath?: string | undefined;
  exists?: boolean | undefined;
  foundValue?: string | undefined;
  literalMatch?: string | undefined;
  negative?: boolean | undefined;
  proprietary?: boolean | undefined;
  regex?: string | undefined;
  semverExpression?: string | undefined;
};

/** @internal */
export const Evidence$inboundSchema: z.ZodType<
  Evidence,
  z.ZodTypeDef,
  unknown
> = z.object({
  data_path: z.string().optional(),
  exists: z.boolean().optional(),
  found_value: z.string().optional(),
  literal_match: z.string().optional(),
  negative: z.boolean().optional(),
  proprietary: z.boolean().optional(),
  regex: z.string().optional(),
  semver_expression: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "data_path": "dataPath",
    "found_value": "foundValue",
    "literal_match": "literalMatch",
    "semver_expression": "semverExpression",
  });
});

/** @internal */
export type Evidence$Outbound = {
  data_path?: string | undefined;
  exists?: boolean | undefined;
  found_value?: string | undefined;
  literal_match?: string | undefined;
  negative?: boolean | undefined;
  proprietary?: boolean | undefined;
  regex?: string | undefined;
  semver_expression?: string | undefined;
};

/** @internal */
export const Evidence$outboundSchema: z.ZodType<
  Evidence$Outbound,
  z.ZodTypeDef,
  Evidence
> = z.object({
  dataPath: z.string().optional(),
  exists: z.boolean().optional(),
  foundValue: z.string().optional(),
  literalMatch: z.string().optional(),
  negative: z.boolean().optional(),
  proprietary: z.boolean().optional(),
  regex: z.string().optional(),
  semverExpression: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    dataPath: "data_path",
    foundValue: "found_value",
    literalMatch: "literal_match",
    semverExpression: "semver_expression",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Evidence$ {
  /** @deprecated use `Evidence$inboundSchema` instead. */
  export const inboundSchema = Evidence$inboundSchema;
  /** @deprecated use `Evidence$outboundSchema` instead. */
  export const outboundSchema = Evidence$outboundSchema;
  /** @deprecated use `Evidence$Outbound` instead. */
  export type Outbound = Evidence$Outbound;
}

export function evidenceToJSON(evidence: Evidence): string {
  return JSON.stringify(Evidence$outboundSchema.parse(evidence));
}

export function evidenceFromJSON(
  jsonString: string,
): SafeParseResult<Evidence, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Evidence$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Evidence' from JSON`,
  );
}
