/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CheckpointTopology = {
  commonName?: string | undefined;
  organization?: string | undefined;
};

/** @internal */
export const CheckpointTopology$inboundSchema: z.ZodType<
  CheckpointTopology,
  z.ZodTypeDef,
  unknown
> = z.object({
  common_name: z.string().optional(),
  organization: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "common_name": "commonName",
  });
});

/** @internal */
export type CheckpointTopology$Outbound = {
  common_name?: string | undefined;
  organization?: string | undefined;
};

/** @internal */
export const CheckpointTopology$outboundSchema: z.ZodType<
  CheckpointTopology$Outbound,
  z.ZodTypeDef,
  CheckpointTopology
> = z.object({
  commonName: z.string().optional(),
  organization: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    commonName: "common_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CheckpointTopology$ {
  /** @deprecated use `CheckpointTopology$inboundSchema` instead. */
  export const inboundSchema = CheckpointTopology$inboundSchema;
  /** @deprecated use `CheckpointTopology$outboundSchema` instead. */
  export const outboundSchema = CheckpointTopology$outboundSchema;
  /** @deprecated use `CheckpointTopology$Outbound` instead. */
  export type Outbound = CheckpointTopology$Outbound;
}

export function checkpointTopologyToJSON(
  checkpointTopology: CheckpointTopology,
): string {
  return JSON.stringify(
    CheckpointTopology$outboundSchema.parse(checkpointTopology),
  );
}

export function checkpointTopologyFromJSON(
  jsonString: string,
): SafeParseResult<CheckpointTopology, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CheckpointTopology$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CheckpointTopology' from JSON`,
  );
}
