/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Activemq,
  Activemq$inboundSchema,
  Activemq$Outbound,
  Activemq$outboundSchema,
} from "./activemq.js";
import {
  Amqp,
  Amqp$inboundSchema,
  Amqp$Outbound,
  Amqp$outboundSchema,
} from "./amqp.js";
import {
  AnyConnect,
  AnyConnect$inboundSchema,
  AnyConnect$Outbound,
  AnyConnect$outboundSchema,
} from "./anyconnect.js";
import {
  AsteriskManagerInterface,
  AsteriskManagerInterface$inboundSchema,
  AsteriskManagerInterface$Outbound,
  AsteriskManagerInterface$outboundSchema,
} from "./asteriskmanagerinterface.js";
import {
  Bacnet,
  Bacnet$inboundSchema,
  Bacnet$Outbound,
  Bacnet$outboundSchema,
} from "./bacnet.js";
import {
  CheckpointTopology,
  CheckpointTopology$inboundSchema,
  CheckpointTopology$Outbound,
  CheckpointTopology$outboundSchema,
} from "./checkpointtopology.js";
import {
  Chromecast,
  Chromecast$inboundSchema,
  Chromecast$Outbound,
  Chromecast$outboundSchema,
} from "./chromecast.js";
import {
  CiscoIpsla,
  CiscoIpsla$inboundSchema,
  CiscoIpsla$Outbound,
  CiscoIpsla$outboundSchema,
} from "./ciscoipsla.js";
import {
  Cmore,
  Cmore$inboundSchema,
  Cmore$Outbound,
  Cmore$outboundSchema,
} from "./cmore.js";
import {
  Coap,
  Coap$inboundSchema,
  Coap$Outbound,
  Coap$outboundSchema,
} from "./coap.js";
import {
  CrestronCp3,
  CrestronCp3$inboundSchema,
  CrestronCp3$Outbound,
  CrestronCp3$outboundSchema,
} from "./crestroncp3.js";
import {
  CrestronDinAp2,
  CrestronDinAp2$inboundSchema,
  CrestronDinAp2$Outbound,
  CrestronDinAp2$outboundSchema,
} from "./crestrondinap2.js";
import {
  Cwmp,
  Cwmp$inboundSchema,
  Cwmp$Outbound,
  Cwmp$outboundSchema,
} from "./cwmp.js";
import {
  Darkcomet,
  Darkcomet$inboundSchema,
  Darkcomet$Outbound,
  Darkcomet$outboundSchema,
} from "./darkcomet.js";
import {
  Darkgate,
  Darkgate$inboundSchema,
  Darkgate$Outbound,
  Darkgate$outboundSchema,
} from "./darkgate.js";
import {
  Dcerpc,
  Dcerpc$inboundSchema,
  Dcerpc$Outbound,
  Dcerpc$outboundSchema,
} from "./dcerpc.js";
import {
  Dhcpdiscover,
  Dhcpdiscover$inboundSchema,
  Dhcpdiscover$Outbound,
  Dhcpdiscover$outboundSchema,
} from "./dhcpdiscover.js";
import {
  Dnp3,
  Dnp3$inboundSchema,
  Dnp3$Outbound,
  Dnp3$outboundSchema,
} from "./dnp3.js";
import {
  Dns,
  Dns$inboundSchema,
  Dns$Outbound,
  Dns$outboundSchema,
} from "./dns.js";
import {
  Dtls,
  Dtls$inboundSchema,
  Dtls$Outbound,
  Dtls$outboundSchema,
} from "./dtls.js";
import {
  DvrIp,
  DvrIp$inboundSchema,
  DvrIp$Outbound,
  DvrIp$outboundSchema,
} from "./dvrip.js";
import {
  Eip,
  Eip$inboundSchema,
  Eip$Outbound,
  Eip$outboundSchema,
} from "./eip.js";
import {
  ElfFile,
  ElfFile$inboundSchema,
  ElfFile$Outbound,
  ElfFile$outboundSchema,
} from "./elffile.js";
import {
  Epmd,
  Epmd$inboundSchema,
  Epmd$Outbound,
  Epmd$outboundSchema,
} from "./epmd.js";
import {
  Etcd,
  Etcd$inboundSchema,
  Etcd$Outbound,
  Etcd$outboundSchema,
} from "./etcd.js";
import {
  Ethereum,
  Ethereum$inboundSchema,
  Ethereum$Outbound,
  Ethereum$outboundSchema,
} from "./ethereum.js";
import {
  Fox,
  Fox$inboundSchema,
  Fox$Outbound,
  Fox$outboundSchema,
} from "./fox.js";
import {
  Ftp,
  Ftp$inboundSchema,
  Ftp$Outbound,
  Ftp$outboundSchema,
} from "./ftp.js";
import {
  Gearman,
  Gearman$inboundSchema,
  Gearman$Outbound,
  Gearman$outboundSchema,
} from "./gearman.js";
import {
  HidVertx,
  HidVertx$inboundSchema,
  HidVertx$Outbound,
  HidVertx$outboundSchema,
} from "./hidvertx.js";
import {
  Hikvision,
  Hikvision$inboundSchema,
  Hikvision$Outbound,
  Hikvision$outboundSchema,
} from "./hikvision.js";
import {
  Ibmnje,
  Ibmnje$inboundSchema,
  Ibmnje$Outbound,
  Ibmnje$outboundSchema,
} from "./ibmnje.js";
import {
  Ike,
  Ike$inboundSchema,
  Ike$Outbound,
  Ike$outboundSchema,
} from "./ike.js";
import {
  Imap,
  Imap$inboundSchema,
  Imap$Outbound,
  Imap$outboundSchema,
} from "./imap.js";
import {
  Iota,
  Iota$inboundSchema,
  Iota$Outbound,
  Iota$outboundSchema,
} from "./iota.js";
import {
  Ipmi,
  Ipmi$inboundSchema,
  Ipmi$Outbound,
  Ipmi$outboundSchema,
} from "./ipmi.js";
import {
  Ipp,
  Ipp$inboundSchema,
  Ipp$Outbound,
  Ipp$outboundSchema,
} from "./ipp.js";
import {
  Iscsi,
  Iscsi$inboundSchema,
  Iscsi$Outbound,
  Iscsi$outboundSchema,
} from "./iscsi.js";
import {
  Krpc,
  Krpc$inboundSchema,
  Krpc$Outbound,
  Krpc$outboundSchema,
} from "./krpc.js";
import {
  L2Tp,
  L2Tp$inboundSchema,
  L2Tp$Outbound,
  L2Tp$outboundSchema,
} from "./l2tp.js";
import {
  Ldap,
  Ldap$inboundSchema,
  Ldap$Outbound,
  Ldap$outboundSchema,
} from "./ldap.js";
import {
  Lpd,
  Lpd$inboundSchema,
  Lpd$Outbound,
  Lpd$outboundSchema,
} from "./lpd.js";
import {
  Mdns,
  Mdns$inboundSchema,
  Mdns$Outbound,
  Mdns$outboundSchema,
} from "./mdns.js";
import {
  Memcached,
  Memcached$inboundSchema,
  Memcached$Outbound,
  Memcached$outboundSchema,
} from "./memcached.js";
import {
  Minecraft,
  Minecraft$inboundSchema,
  Minecraft$Outbound,
  Minecraft$outboundSchema,
} from "./minecraft.js";
import {
  Mms,
  Mms$inboundSchema,
  Mms$Outbound,
  Mms$outboundSchema,
} from "./mms.js";
import {
  Modbus,
  Modbus$inboundSchema,
  Modbus$Outbound,
  Modbus$outboundSchema,
} from "./modbus.js";
import {
  MoneroP2P,
  MoneroP2P$inboundSchema,
  MoneroP2P$Outbound,
  MoneroP2P$outboundSchema,
} from "./monerop2p.js";
import {
  Mongodb,
  Mongodb$inboundSchema,
  Mongodb$Outbound,
  Mongodb$outboundSchema,
} from "./mongodb.js";
import {
  Mqtt,
  Mqtt$inboundSchema,
  Mqtt$Outbound,
  Mqtt$outboundSchema,
} from "./mqtt.js";
import {
  Mssql,
  Mssql$inboundSchema,
  Mssql$Outbound,
  Mssql$outboundSchema,
} from "./mssql.js";
import {
  Murmur,
  Murmur$inboundSchema,
  Murmur$Outbound,
  Murmur$outboundSchema,
} from "./murmur.js";
import {
  Mysql,
  Mysql$inboundSchema,
  Mysql$Outbound,
  Mysql$outboundSchema,
} from "./mysql.js";
import {
  NatsIo,
  NatsIo$inboundSchema,
  NatsIo$Outbound,
  NatsIo$outboundSchema,
} from "./natsio.js";
import {
  Nbd,
  Nbd$inboundSchema,
  Nbd$Outbound,
  Nbd$outboundSchema,
} from "./nbd.js";
import {
  NfsMountd,
  NfsMountd$inboundSchema,
  NfsMountd$Outbound,
  NfsMountd$outboundSchema,
} from "./nfsmountd.js";
import {
  Nmea,
  Nmea$inboundSchema,
  Nmea$Outbound,
  Nmea$outboundSchema,
} from "./nmea.js";
import {
  Ntp,
  Ntp$inboundSchema,
  Ntp$Outbound,
  Ntp$outboundSchema,
} from "./ntp.js";
import {
  Ntrip,
  Ntrip$inboundSchema,
  Ntrip$Outbound,
  Ntrip$outboundSchema,
} from "./ntrip.js";
import {
  Onc,
  Onc$inboundSchema,
  Onc$Outbound,
  Onc$outboundSchema,
} from "./onc.js";
import {
  Onvif,
  Onvif$inboundSchema,
  Onvif$Outbound,
  Onvif$outboundSchema,
} from "./onvif.js";
import {
  OpcUa,
  OpcUa$inboundSchema,
  OpcUa$Outbound,
  OpcUa$outboundSchema,
} from "./opcua.js";
import {
  Openvpn,
  Openvpn$inboundSchema,
  Openvpn$Outbound,
  Openvpn$outboundSchema,
} from "./openvpn.js";
import {
  OpenvpnMgmt,
  OpenvpnMgmt$inboundSchema,
  OpenvpnMgmt$Outbound,
  OpenvpnMgmt$outboundSchema,
} from "./openvpnmgmt.js";
import {
  Oracle,
  Oracle$inboundSchema,
  Oracle$Outbound,
  Oracle$outboundSchema,
} from "./oracle.js";
import {
  PcAnywhere,
  PcAnywhere$inboundSchema,
  PcAnywhere$Outbound,
  PcAnywhere$outboundSchema,
} from "./pcanywhere.js";
import {
  Pgbouncer,
  Pgbouncer$inboundSchema,
  Pgbouncer$Outbound,
  Pgbouncer$outboundSchema,
} from "./pgbouncer.js";
import {
  Pop3,
  Pop3$inboundSchema,
  Pop3$Outbound,
  Pop3$outboundSchema,
} from "./pop3.js";
import {
  Portmap,
  Portmap$inboundSchema,
  Portmap$Outbound,
  Portmap$outboundSchema,
} from "./portmap.js";
import {
  Postgres,
  Postgres$inboundSchema,
  Postgres$Outbound,
  Postgres$outboundSchema,
} from "./postgres.js";
import {
  Pptp,
  Pptp$inboundSchema,
  Pptp$Outbound,
  Pptp$outboundSchema,
} from "./pptp.js";
import {
  ProfinetCm,
  ProfinetCm$inboundSchema,
  ProfinetCm$Outbound,
  ProfinetCm$outboundSchema,
} from "./profinetcm.js";
import {
  Rdate,
  Rdate$inboundSchema,
  Rdate$Outbound,
  Rdate$outboundSchema,
} from "./rdate.js";
import {
  Rdp,
  Rdp$inboundSchema,
  Rdp$Outbound,
  Rdp$outboundSchema,
} from "./rdp.js";
import {
  Realport,
  Realport$inboundSchema,
  Realport$Outbound,
  Realport$outboundSchema,
} from "./realport.js";
import {
  Redis,
  Redis$inboundSchema,
  Redis$Outbound,
  Redis$outboundSchema,
} from "./redis.js";
import {
  Redline,
  Redline$inboundSchema,
  Redline$Outbound,
  Redline$outboundSchema,
} from "./redline.js";
import {
  RedlionCrimson,
  RedlionCrimson$inboundSchema,
  RedlionCrimson$Outbound,
  RedlionCrimson$outboundSchema,
} from "./redlioncrimson.js";
import {
  RepresentativeInfo,
  RepresentativeInfo$inboundSchema,
  RepresentativeInfo$Outbound,
  RepresentativeInfo$outboundSchema,
} from "./representativeinfo.js";
import {
  Rifatron,
  Rifatron$inboundSchema,
  Rifatron$Outbound,
  Rifatron$outboundSchema,
} from "./rifatron.js";
import {
  Ripple,
  Ripple$inboundSchema,
  Ripple$Outbound,
  Ripple$outboundSchema,
} from "./ripple.js";
import {
  Rlogin,
  Rlogin$inboundSchema,
  Rlogin$Outbound,
  Rlogin$outboundSchema,
} from "./rlogin.js";
import {
  Rocketmq,
  Rocketmq$inboundSchema,
  Rocketmq$Outbound,
  Rocketmq$outboundSchema,
} from "./rocketmq.js";
import {
  Rtsp,
  Rtsp$inboundSchema,
  Rtsp$Outbound,
  Rtsp$outboundSchema,
} from "./rtsp.js";
import { S7, S7$inboundSchema, S7$Outbound, S7$outboundSchema } from "./s7.js";
import {
  SapRouter,
  SapRouter$inboundSchema,
  SapRouter$Outbound,
  SapRouter$outboundSchema,
} from "./saprouter.js";
import {
  Scpi,
  Scpi$inboundSchema,
  Scpi$Outbound,
  Scpi$outboundSchema,
} from "./scpi.js";
import {
  Screenshot,
  Screenshot$inboundSchema,
  Screenshot$Outbound,
  Screenshot$outboundSchema,
} from "./screenshot.js";
import {
  Ser2Net,
  Ser2Net$inboundSchema,
  Ser2Net$Outbound,
  Ser2Net$outboundSchema,
} from "./ser2net.js";
import {
  SevenDaysToDie,
  SevenDaysToDie$inboundSchema,
  SevenDaysToDie$Outbound,
  SevenDaysToDie$outboundSchema,
} from "./sevendaystodie.js";
import {
  Sip,
  Sip$inboundSchema,
  Sip$Outbound,
  Sip$outboundSchema,
} from "./sip.js";
import {
  Skinny,
  Skinny$inboundSchema,
  Skinny$Outbound,
  Skinny$outboundSchema,
} from "./skinny.js";
import {
  Smb,
  Smb$inboundSchema,
  Smb$Outbound,
  Smb$outboundSchema,
} from "./smb.js";
import {
  Smtp,
  Smtp$inboundSchema,
  Smtp$Outbound,
  Smtp$outboundSchema,
} from "./smtp.js";
import {
  Snmp,
  Snmp$inboundSchema,
  Snmp$Outbound,
  Snmp$outboundSchema,
} from "./snmp.js";
import {
  Socks,
  Socks$inboundSchema,
  Socks$Outbound,
  Socks$outboundSchema,
} from "./socks.js";
import {
  Spice,
  Spice$inboundSchema,
  Spice$Outbound,
  Spice$outboundSchema,
} from "./spice.js";
import {
  Ssdp,
  Ssdp$inboundSchema,
  Ssdp$Outbound,
  Ssdp$outboundSchema,
} from "./ssdp.js";
import {
  Ssh,
  Ssh$inboundSchema,
  Ssh$Outbound,
  Ssh$outboundSchema,
} from "./ssh.js";
import {
  Steam,
  Steam$inboundSchema,
  Steam$Outbound,
  Steam$outboundSchema,
} from "./steam.js";
import {
  TacacsPlus,
  TacacsPlus$inboundSchema,
  TacacsPlus$Outbound,
  TacacsPlus$outboundSchema,
} from "./tacacsplus.js";
import {
  TeamViewer,
  TeamViewer$inboundSchema,
  TeamViewer$Outbound,
  TeamViewer$outboundSchema,
} from "./teamviewer.js";
import {
  Telnet,
  Telnet$inboundSchema,
  Telnet$Outbound,
  Telnet$outboundSchema,
} from "./telnet.js";
import {
  Tibia,
  Tibia$inboundSchema,
  Tibia$Outbound,
  Tibia$outboundSchema,
} from "./tibia.js";
import {
  Tls,
  Tls$inboundSchema,
  Tls$Outbound,
  Tls$outboundSchema,
} from "./tls.js";
import {
  TplinkKasa,
  TplinkKasa$inboundSchema,
  TplinkKasa$Outbound,
  TplinkKasa$outboundSchema,
} from "./tplinkkasa.js";
import {
  UnitronicsPcom,
  UnitronicsPcom$inboundSchema,
  UnitronicsPcom$Outbound,
  UnitronicsPcom$outboundSchema,
} from "./unitronicspcom.js";
import {
  Upnp,
  Upnp$inboundSchema,
  Upnp$Outbound,
  Upnp$outboundSchema,
} from "./upnp.js";
import {
  Ventrilo,
  Ventrilo$inboundSchema,
  Ventrilo$Outbound,
  Ventrilo$outboundSchema,
} from "./ventrilo.js";
import {
  Vnc,
  Vnc$inboundSchema,
  Vnc$Outbound,
  Vnc$outboundSchema,
} from "./vnc.js";
import {
  WeblogicT3,
  WeblogicT3$inboundSchema,
  WeblogicT3$Outbound,
  WeblogicT3$outboundSchema,
} from "./weblogict3.js";
import {
  Winrm,
  Winrm$inboundSchema,
  Winrm$Outbound,
  Winrm$outboundSchema,
} from "./winrm.js";
import {
  WsDiscovery,
  WsDiscovery$inboundSchema,
  WsDiscovery$Outbound,
  WsDiscovery$outboundSchema,
} from "./wsdiscovery.js";
import {
  X11,
  X11$inboundSchema,
  X11$Outbound,
  X11$outboundSchema,
} from "./x11.js";
import {
  Zeromq,
  Zeromq$inboundSchema,
  Zeromq$Outbound,
  Zeromq$outboundSchema,
} from "./zeromq.js";

export const ServiceScanTransportProtocol = {
  Unknown: "",
  Tcp: "tcp",
  Udp: "udp",
  Icmp: "icmp",
  Quic: "quic",
} as const;
export type ServiceScanTransportProtocol = ClosedEnum<
  typeof ServiceScanTransportProtocol
>;

export type ServiceScan = {
  activemq?: Activemq | undefined;
  amqp?: Amqp | undefined;
  anyConnect?: AnyConnect | undefined;
  asteriskManagerInterface?: AsteriskManagerInterface | undefined;
  bacnet?: Bacnet | undefined;
  banner?: string | undefined;
  bannerHashSha256?: string | undefined;
  checkpointTopology?: CheckpointTopology | undefined;
  chromecast?: Chromecast | undefined;
  ciscoIpsla?: CiscoIpsla | undefined;
  cmore?: Cmore | undefined;
  coap?: Coap | undefined;
  crestronCp3?: CrestronCp3 | undefined;
  crestronDinAp2?: CrestronDinAp2 | undefined;
  cwmp?: Cwmp | undefined;
  darkcomet?: Darkcomet | undefined;
  darkgate?: Darkgate | undefined;
  dcerpc?: Dcerpc | undefined;
  dhcpdiscover?: Dhcpdiscover | undefined;
  dnp3?: Dnp3 | undefined;
  dns?: Dns | undefined;
  dtls?: Dtls | undefined;
  dvrIp?: DvrIp | undefined;
  eip?: Eip | undefined;
  elfFile?: ElfFile | undefined;
  epmd?: Epmd | undefined;
  etcd?: Etcd | undefined;
  ethereum?: Ethereum | undefined;
  fox?: Fox | undefined;
  ftp?: Ftp | undefined;
  gearman?: Gearman | undefined;
  hidVertx?: HidVertx | undefined;
  hikvision?: Hikvision | undefined;
  ibmnje?: Ibmnje | undefined;
  ike?: Ike | undefined;
  imap?: Imap | undefined;
  iota?: Iota | undefined;
  ip?: string | undefined;
  ipmi?: Ipmi | undefined;
  ipp?: Ipp | undefined;
  isSuccess?: boolean | undefined;
  iscsi?: Iscsi | undefined;
  krpc?: Krpc | undefined;
  l2tp?: L2Tp | undefined;
  ldap?: Ldap | undefined;
  lpd?: Lpd | undefined;
  mdns?: Mdns | undefined;
  memcached?: Memcached | undefined;
  minecraft?: Minecraft | undefined;
  mms?: Mms | undefined;
  modbus?: Modbus | undefined;
  moneroP2p?: MoneroP2P | undefined;
  mongodb?: Mongodb | undefined;
  mqtt?: Mqtt | undefined;
  mssql?: Mssql | undefined;
  murmur?: Murmur | undefined;
  mysql?: Mysql | undefined;
  natsIo?: NatsIo | undefined;
  nbd?: Nbd | undefined;
  nfsMountd?: NfsMountd | undefined;
  nmea?: Nmea | undefined;
  ntp?: Ntp | undefined;
  ntrip?: Ntrip | undefined;
  onc?: Onc | undefined;
  onvif?: Onvif | undefined;
  opcUa?: OpcUa | undefined;
  openvpn?: Openvpn | undefined;
  openvpnMgmt?: OpenvpnMgmt | undefined;
  oracle?: Oracle | undefined;
  pcAnywhere?: PcAnywhere | undefined;
  pgbouncer?: Pgbouncer | undefined;
  pop3?: Pop3 | undefined;
  port?: number | undefined;
  portmap?: Portmap | undefined;
  postgres?: Postgres | undefined;
  pptp?: Pptp | undefined;
  profinetCm?: ProfinetCm | undefined;
  protocol?: string | undefined;
  rdate?: Rdate | undefined;
  rdp?: Rdp | undefined;
  realport?: Realport | undefined;
  redis?: Redis | undefined;
  redline?: Redline | undefined;
  redlionCrimson?: RedlionCrimson | undefined;
  representativeInfo?: RepresentativeInfo | undefined;
  rifatron?: Rifatron | undefined;
  ripple?: Ripple | undefined;
  rlogin?: Rlogin | undefined;
  rocketmq?: Rocketmq | undefined;
  rtsp?: Rtsp | undefined;
  s7?: S7 | undefined;
  sapRouter?: SapRouter | undefined;
  scanTime?: string | undefined;
  scpi?: Scpi | undefined;
  screenshots?: Array<Screenshot> | null | undefined;
  ser2net?: Ser2Net | undefined;
  sevenDaysToDie?: SevenDaysToDie | undefined;
  sip?: Sip | undefined;
  skinny?: Skinny | undefined;
  smb?: Smb | undefined;
  smtp?: Smtp | undefined;
  snmp?: Snmp | undefined;
  socks?: Socks | undefined;
  spice?: Spice | undefined;
  ssdp?: Ssdp | undefined;
  ssh?: Ssh | undefined;
  steam?: Steam | undefined;
  tacacsPlus?: TacacsPlus | undefined;
  teamViewer?: TeamViewer | undefined;
  telnet?: Telnet | undefined;
  tibia?: Tibia | undefined;
  tls?: Tls | undefined;
  tplinkKasa?: TplinkKasa | undefined;
  transportProtocol?: ServiceScanTransportProtocol | undefined;
  unitronicsPcom?: UnitronicsPcom | undefined;
  upnp?: Upnp | undefined;
  ventrilo?: Ventrilo | undefined;
  vnc?: Vnc | undefined;
  weblogicT3?: WeblogicT3 | undefined;
  winrm?: Winrm | undefined;
  wsDiscovery?: WsDiscovery | undefined;
  x11?: X11 | undefined;
  zeromq?: Zeromq | undefined;
};

/** @internal */
export const ServiceScanTransportProtocol$inboundSchema: z.ZodNativeEnum<
  typeof ServiceScanTransportProtocol
> = z.nativeEnum(ServiceScanTransportProtocol);

/** @internal */
export const ServiceScanTransportProtocol$outboundSchema: z.ZodNativeEnum<
  typeof ServiceScanTransportProtocol
> = ServiceScanTransportProtocol$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServiceScanTransportProtocol$ {
  /** @deprecated use `ServiceScanTransportProtocol$inboundSchema` instead. */
  export const inboundSchema = ServiceScanTransportProtocol$inboundSchema;
  /** @deprecated use `ServiceScanTransportProtocol$outboundSchema` instead. */
  export const outboundSchema = ServiceScanTransportProtocol$outboundSchema;
}

/** @internal */
export const ServiceScan$inboundSchema: z.ZodType<
  ServiceScan,
  z.ZodTypeDef,
  unknown
> = z.object({
  activemq: Activemq$inboundSchema.optional(),
  amqp: Amqp$inboundSchema.optional(),
  any_connect: AnyConnect$inboundSchema.optional(),
  asterisk_manager_interface: AsteriskManagerInterface$inboundSchema.optional(),
  bacnet: Bacnet$inboundSchema.optional(),
  banner: z.string().optional(),
  banner_hash_sha256: z.string().optional(),
  checkpoint_topology: CheckpointTopology$inboundSchema.optional(),
  chromecast: Chromecast$inboundSchema.optional(),
  cisco_ipsla: CiscoIpsla$inboundSchema.optional(),
  cmore: Cmore$inboundSchema.optional(),
  coap: Coap$inboundSchema.optional(),
  crestron_cp3: CrestronCp3$inboundSchema.optional(),
  crestron_din_ap2: CrestronDinAp2$inboundSchema.optional(),
  cwmp: Cwmp$inboundSchema.optional(),
  darkcomet: Darkcomet$inboundSchema.optional(),
  darkgate: Darkgate$inboundSchema.optional(),
  dcerpc: Dcerpc$inboundSchema.optional(),
  dhcpdiscover: Dhcpdiscover$inboundSchema.optional(),
  dnp3: Dnp3$inboundSchema.optional(),
  dns: Dns$inboundSchema.optional(),
  dtls: Dtls$inboundSchema.optional(),
  dvr_ip: DvrIp$inboundSchema.optional(),
  eip: Eip$inboundSchema.optional(),
  elf_file: ElfFile$inboundSchema.optional(),
  epmd: Epmd$inboundSchema.optional(),
  etcd: Etcd$inboundSchema.optional(),
  ethereum: Ethereum$inboundSchema.optional(),
  fox: Fox$inboundSchema.optional(),
  ftp: Ftp$inboundSchema.optional(),
  gearman: Gearman$inboundSchema.optional(),
  hid_vertx: HidVertx$inboundSchema.optional(),
  hikvision: Hikvision$inboundSchema.optional(),
  ibmnje: Ibmnje$inboundSchema.optional(),
  ike: Ike$inboundSchema.optional(),
  imap: Imap$inboundSchema.optional(),
  iota: Iota$inboundSchema.optional(),
  ip: z.string().optional(),
  ipmi: Ipmi$inboundSchema.optional(),
  ipp: Ipp$inboundSchema.optional(),
  is_success: z.boolean().optional(),
  iscsi: Iscsi$inboundSchema.optional(),
  krpc: Krpc$inboundSchema.optional(),
  l2tp: L2Tp$inboundSchema.optional(),
  ldap: Ldap$inboundSchema.optional(),
  lpd: Lpd$inboundSchema.optional(),
  mdns: Mdns$inboundSchema.optional(),
  memcached: Memcached$inboundSchema.optional(),
  minecraft: Minecraft$inboundSchema.optional(),
  mms: Mms$inboundSchema.optional(),
  modbus: Modbus$inboundSchema.optional(),
  monero_p2p: MoneroP2P$inboundSchema.optional(),
  mongodb: Mongodb$inboundSchema.optional(),
  mqtt: Mqtt$inboundSchema.optional(),
  mssql: Mssql$inboundSchema.optional(),
  murmur: Murmur$inboundSchema.optional(),
  mysql: Mysql$inboundSchema.optional(),
  nats_io: NatsIo$inboundSchema.optional(),
  nbd: Nbd$inboundSchema.optional(),
  nfs_mountd: NfsMountd$inboundSchema.optional(),
  nmea: Nmea$inboundSchema.optional(),
  ntp: Ntp$inboundSchema.optional(),
  ntrip: Ntrip$inboundSchema.optional(),
  onc: Onc$inboundSchema.optional(),
  onvif: Onvif$inboundSchema.optional(),
  opc_ua: OpcUa$inboundSchema.optional(),
  openvpn: Openvpn$inboundSchema.optional(),
  openvpn_mgmt: OpenvpnMgmt$inboundSchema.optional(),
  oracle: Oracle$inboundSchema.optional(),
  pc_anywhere: PcAnywhere$inboundSchema.optional(),
  pgbouncer: Pgbouncer$inboundSchema.optional(),
  pop3: Pop3$inboundSchema.optional(),
  port: z.number().int().optional(),
  portmap: Portmap$inboundSchema.optional(),
  postgres: Postgres$inboundSchema.optional(),
  pptp: Pptp$inboundSchema.optional(),
  profinet_cm: ProfinetCm$inboundSchema.optional(),
  protocol: z.string().optional(),
  rdate: Rdate$inboundSchema.optional(),
  rdp: Rdp$inboundSchema.optional(),
  realport: Realport$inboundSchema.optional(),
  redis: Redis$inboundSchema.optional(),
  redline: Redline$inboundSchema.optional(),
  redlion_crimson: RedlionCrimson$inboundSchema.optional(),
  representative_info: RepresentativeInfo$inboundSchema.optional(),
  rifatron: Rifatron$inboundSchema.optional(),
  ripple: Ripple$inboundSchema.optional(),
  rlogin: Rlogin$inboundSchema.optional(),
  rocketmq: Rocketmq$inboundSchema.optional(),
  rtsp: Rtsp$inboundSchema.optional(),
  s7: S7$inboundSchema.optional(),
  sap_router: SapRouter$inboundSchema.optional(),
  scan_time: z.string().optional(),
  scpi: Scpi$inboundSchema.optional(),
  screenshots: z.nullable(z.array(Screenshot$inboundSchema)).optional(),
  ser2net: Ser2Net$inboundSchema.optional(),
  seven_days_to_die: SevenDaysToDie$inboundSchema.optional(),
  sip: Sip$inboundSchema.optional(),
  skinny: Skinny$inboundSchema.optional(),
  smb: Smb$inboundSchema.optional(),
  smtp: Smtp$inboundSchema.optional(),
  snmp: Snmp$inboundSchema.optional(),
  socks: Socks$inboundSchema.optional(),
  spice: Spice$inboundSchema.optional(),
  ssdp: Ssdp$inboundSchema.optional(),
  ssh: Ssh$inboundSchema.optional(),
  steam: Steam$inboundSchema.optional(),
  tacacs_plus: TacacsPlus$inboundSchema.optional(),
  team_viewer: TeamViewer$inboundSchema.optional(),
  telnet: Telnet$inboundSchema.optional(),
  tibia: Tibia$inboundSchema.optional(),
  tls: Tls$inboundSchema.optional(),
  tplink_kasa: TplinkKasa$inboundSchema.optional(),
  transport_protocol: ServiceScanTransportProtocol$inboundSchema.optional(),
  unitronics_pcom: UnitronicsPcom$inboundSchema.optional(),
  upnp: Upnp$inboundSchema.optional(),
  ventrilo: Ventrilo$inboundSchema.optional(),
  vnc: Vnc$inboundSchema.optional(),
  weblogic_t3: WeblogicT3$inboundSchema.optional(),
  winrm: Winrm$inboundSchema.optional(),
  ws_discovery: WsDiscovery$inboundSchema.optional(),
  x11: X11$inboundSchema.optional(),
  zeromq: Zeromq$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "any_connect": "anyConnect",
    "asterisk_manager_interface": "asteriskManagerInterface",
    "banner_hash_sha256": "bannerHashSha256",
    "checkpoint_topology": "checkpointTopology",
    "cisco_ipsla": "ciscoIpsla",
    "crestron_cp3": "crestronCp3",
    "crestron_din_ap2": "crestronDinAp2",
    "dvr_ip": "dvrIp",
    "elf_file": "elfFile",
    "hid_vertx": "hidVertx",
    "is_success": "isSuccess",
    "monero_p2p": "moneroP2p",
    "nats_io": "natsIo",
    "nfs_mountd": "nfsMountd",
    "opc_ua": "opcUa",
    "openvpn_mgmt": "openvpnMgmt",
    "pc_anywhere": "pcAnywhere",
    "profinet_cm": "profinetCm",
    "redlion_crimson": "redlionCrimson",
    "representative_info": "representativeInfo",
    "sap_router": "sapRouter",
    "scan_time": "scanTime",
    "seven_days_to_die": "sevenDaysToDie",
    "tacacs_plus": "tacacsPlus",
    "team_viewer": "teamViewer",
    "tplink_kasa": "tplinkKasa",
    "transport_protocol": "transportProtocol",
    "unitronics_pcom": "unitronicsPcom",
    "weblogic_t3": "weblogicT3",
    "ws_discovery": "wsDiscovery",
  });
});

/** @internal */
export type ServiceScan$Outbound = {
  activemq?: Activemq$Outbound | undefined;
  amqp?: Amqp$Outbound | undefined;
  any_connect?: AnyConnect$Outbound | undefined;
  asterisk_manager_interface?: AsteriskManagerInterface$Outbound | undefined;
  bacnet?: Bacnet$Outbound | undefined;
  banner?: string | undefined;
  banner_hash_sha256?: string | undefined;
  checkpoint_topology?: CheckpointTopology$Outbound | undefined;
  chromecast?: Chromecast$Outbound | undefined;
  cisco_ipsla?: CiscoIpsla$Outbound | undefined;
  cmore?: Cmore$Outbound | undefined;
  coap?: Coap$Outbound | undefined;
  crestron_cp3?: CrestronCp3$Outbound | undefined;
  crestron_din_ap2?: CrestronDinAp2$Outbound | undefined;
  cwmp?: Cwmp$Outbound | undefined;
  darkcomet?: Darkcomet$Outbound | undefined;
  darkgate?: Darkgate$Outbound | undefined;
  dcerpc?: Dcerpc$Outbound | undefined;
  dhcpdiscover?: Dhcpdiscover$Outbound | undefined;
  dnp3?: Dnp3$Outbound | undefined;
  dns?: Dns$Outbound | undefined;
  dtls?: Dtls$Outbound | undefined;
  dvr_ip?: DvrIp$Outbound | undefined;
  eip?: Eip$Outbound | undefined;
  elf_file?: ElfFile$Outbound | undefined;
  epmd?: Epmd$Outbound | undefined;
  etcd?: Etcd$Outbound | undefined;
  ethereum?: Ethereum$Outbound | undefined;
  fox?: Fox$Outbound | undefined;
  ftp?: Ftp$Outbound | undefined;
  gearman?: Gearman$Outbound | undefined;
  hid_vertx?: HidVertx$Outbound | undefined;
  hikvision?: Hikvision$Outbound | undefined;
  ibmnje?: Ibmnje$Outbound | undefined;
  ike?: Ike$Outbound | undefined;
  imap?: Imap$Outbound | undefined;
  iota?: Iota$Outbound | undefined;
  ip?: string | undefined;
  ipmi?: Ipmi$Outbound | undefined;
  ipp?: Ipp$Outbound | undefined;
  is_success?: boolean | undefined;
  iscsi?: Iscsi$Outbound | undefined;
  krpc?: Krpc$Outbound | undefined;
  l2tp?: L2Tp$Outbound | undefined;
  ldap?: Ldap$Outbound | undefined;
  lpd?: Lpd$Outbound | undefined;
  mdns?: Mdns$Outbound | undefined;
  memcached?: Memcached$Outbound | undefined;
  minecraft?: Minecraft$Outbound | undefined;
  mms?: Mms$Outbound | undefined;
  modbus?: Modbus$Outbound | undefined;
  monero_p2p?: MoneroP2P$Outbound | undefined;
  mongodb?: Mongodb$Outbound | undefined;
  mqtt?: Mqtt$Outbound | undefined;
  mssql?: Mssql$Outbound | undefined;
  murmur?: Murmur$Outbound | undefined;
  mysql?: Mysql$Outbound | undefined;
  nats_io?: NatsIo$Outbound | undefined;
  nbd?: Nbd$Outbound | undefined;
  nfs_mountd?: NfsMountd$Outbound | undefined;
  nmea?: Nmea$Outbound | undefined;
  ntp?: Ntp$Outbound | undefined;
  ntrip?: Ntrip$Outbound | undefined;
  onc?: Onc$Outbound | undefined;
  onvif?: Onvif$Outbound | undefined;
  opc_ua?: OpcUa$Outbound | undefined;
  openvpn?: Openvpn$Outbound | undefined;
  openvpn_mgmt?: OpenvpnMgmt$Outbound | undefined;
  oracle?: Oracle$Outbound | undefined;
  pc_anywhere?: PcAnywhere$Outbound | undefined;
  pgbouncer?: Pgbouncer$Outbound | undefined;
  pop3?: Pop3$Outbound | undefined;
  port?: number | undefined;
  portmap?: Portmap$Outbound | undefined;
  postgres?: Postgres$Outbound | undefined;
  pptp?: Pptp$Outbound | undefined;
  profinet_cm?: ProfinetCm$Outbound | undefined;
  protocol?: string | undefined;
  rdate?: Rdate$Outbound | undefined;
  rdp?: Rdp$Outbound | undefined;
  realport?: Realport$Outbound | undefined;
  redis?: Redis$Outbound | undefined;
  redline?: Redline$Outbound | undefined;
  redlion_crimson?: RedlionCrimson$Outbound | undefined;
  representative_info?: RepresentativeInfo$Outbound | undefined;
  rifatron?: Rifatron$Outbound | undefined;
  ripple?: Ripple$Outbound | undefined;
  rlogin?: Rlogin$Outbound | undefined;
  rocketmq?: Rocketmq$Outbound | undefined;
  rtsp?: Rtsp$Outbound | undefined;
  s7?: S7$Outbound | undefined;
  sap_router?: SapRouter$Outbound | undefined;
  scan_time?: string | undefined;
  scpi?: Scpi$Outbound | undefined;
  screenshots?: Array<Screenshot$Outbound> | null | undefined;
  ser2net?: Ser2Net$Outbound | undefined;
  seven_days_to_die?: SevenDaysToDie$Outbound | undefined;
  sip?: Sip$Outbound | undefined;
  skinny?: Skinny$Outbound | undefined;
  smb?: Smb$Outbound | undefined;
  smtp?: Smtp$Outbound | undefined;
  snmp?: Snmp$Outbound | undefined;
  socks?: Socks$Outbound | undefined;
  spice?: Spice$Outbound | undefined;
  ssdp?: Ssdp$Outbound | undefined;
  ssh?: Ssh$Outbound | undefined;
  steam?: Steam$Outbound | undefined;
  tacacs_plus?: TacacsPlus$Outbound | undefined;
  team_viewer?: TeamViewer$Outbound | undefined;
  telnet?: Telnet$Outbound | undefined;
  tibia?: Tibia$Outbound | undefined;
  tls?: Tls$Outbound | undefined;
  tplink_kasa?: TplinkKasa$Outbound | undefined;
  transport_protocol?: string | undefined;
  unitronics_pcom?: UnitronicsPcom$Outbound | undefined;
  upnp?: Upnp$Outbound | undefined;
  ventrilo?: Ventrilo$Outbound | undefined;
  vnc?: Vnc$Outbound | undefined;
  weblogic_t3?: WeblogicT3$Outbound | undefined;
  winrm?: Winrm$Outbound | undefined;
  ws_discovery?: WsDiscovery$Outbound | undefined;
  x11?: X11$Outbound | undefined;
  zeromq?: Zeromq$Outbound | undefined;
};

/** @internal */
export const ServiceScan$outboundSchema: z.ZodType<
  ServiceScan$Outbound,
  z.ZodTypeDef,
  ServiceScan
> = z.object({
  activemq: Activemq$outboundSchema.optional(),
  amqp: Amqp$outboundSchema.optional(),
  anyConnect: AnyConnect$outboundSchema.optional(),
  asteriskManagerInterface: AsteriskManagerInterface$outboundSchema.optional(),
  bacnet: Bacnet$outboundSchema.optional(),
  banner: z.string().optional(),
  bannerHashSha256: z.string().optional(),
  checkpointTopology: CheckpointTopology$outboundSchema.optional(),
  chromecast: Chromecast$outboundSchema.optional(),
  ciscoIpsla: CiscoIpsla$outboundSchema.optional(),
  cmore: Cmore$outboundSchema.optional(),
  coap: Coap$outboundSchema.optional(),
  crestronCp3: CrestronCp3$outboundSchema.optional(),
  crestronDinAp2: CrestronDinAp2$outboundSchema.optional(),
  cwmp: Cwmp$outboundSchema.optional(),
  darkcomet: Darkcomet$outboundSchema.optional(),
  darkgate: Darkgate$outboundSchema.optional(),
  dcerpc: Dcerpc$outboundSchema.optional(),
  dhcpdiscover: Dhcpdiscover$outboundSchema.optional(),
  dnp3: Dnp3$outboundSchema.optional(),
  dns: Dns$outboundSchema.optional(),
  dtls: Dtls$outboundSchema.optional(),
  dvrIp: DvrIp$outboundSchema.optional(),
  eip: Eip$outboundSchema.optional(),
  elfFile: ElfFile$outboundSchema.optional(),
  epmd: Epmd$outboundSchema.optional(),
  etcd: Etcd$outboundSchema.optional(),
  ethereum: Ethereum$outboundSchema.optional(),
  fox: Fox$outboundSchema.optional(),
  ftp: Ftp$outboundSchema.optional(),
  gearman: Gearman$outboundSchema.optional(),
  hidVertx: HidVertx$outboundSchema.optional(),
  hikvision: Hikvision$outboundSchema.optional(),
  ibmnje: Ibmnje$outboundSchema.optional(),
  ike: Ike$outboundSchema.optional(),
  imap: Imap$outboundSchema.optional(),
  iota: Iota$outboundSchema.optional(),
  ip: z.string().optional(),
  ipmi: Ipmi$outboundSchema.optional(),
  ipp: Ipp$outboundSchema.optional(),
  isSuccess: z.boolean().optional(),
  iscsi: Iscsi$outboundSchema.optional(),
  krpc: Krpc$outboundSchema.optional(),
  l2tp: L2Tp$outboundSchema.optional(),
  ldap: Ldap$outboundSchema.optional(),
  lpd: Lpd$outboundSchema.optional(),
  mdns: Mdns$outboundSchema.optional(),
  memcached: Memcached$outboundSchema.optional(),
  minecraft: Minecraft$outboundSchema.optional(),
  mms: Mms$outboundSchema.optional(),
  modbus: Modbus$outboundSchema.optional(),
  moneroP2p: MoneroP2P$outboundSchema.optional(),
  mongodb: Mongodb$outboundSchema.optional(),
  mqtt: Mqtt$outboundSchema.optional(),
  mssql: Mssql$outboundSchema.optional(),
  murmur: Murmur$outboundSchema.optional(),
  mysql: Mysql$outboundSchema.optional(),
  natsIo: NatsIo$outboundSchema.optional(),
  nbd: Nbd$outboundSchema.optional(),
  nfsMountd: NfsMountd$outboundSchema.optional(),
  nmea: Nmea$outboundSchema.optional(),
  ntp: Ntp$outboundSchema.optional(),
  ntrip: Ntrip$outboundSchema.optional(),
  onc: Onc$outboundSchema.optional(),
  onvif: Onvif$outboundSchema.optional(),
  opcUa: OpcUa$outboundSchema.optional(),
  openvpn: Openvpn$outboundSchema.optional(),
  openvpnMgmt: OpenvpnMgmt$outboundSchema.optional(),
  oracle: Oracle$outboundSchema.optional(),
  pcAnywhere: PcAnywhere$outboundSchema.optional(),
  pgbouncer: Pgbouncer$outboundSchema.optional(),
  pop3: Pop3$outboundSchema.optional(),
  port: z.number().int().optional(),
  portmap: Portmap$outboundSchema.optional(),
  postgres: Postgres$outboundSchema.optional(),
  pptp: Pptp$outboundSchema.optional(),
  profinetCm: ProfinetCm$outboundSchema.optional(),
  protocol: z.string().optional(),
  rdate: Rdate$outboundSchema.optional(),
  rdp: Rdp$outboundSchema.optional(),
  realport: Realport$outboundSchema.optional(),
  redis: Redis$outboundSchema.optional(),
  redline: Redline$outboundSchema.optional(),
  redlionCrimson: RedlionCrimson$outboundSchema.optional(),
  representativeInfo: RepresentativeInfo$outboundSchema.optional(),
  rifatron: Rifatron$outboundSchema.optional(),
  ripple: Ripple$outboundSchema.optional(),
  rlogin: Rlogin$outboundSchema.optional(),
  rocketmq: Rocketmq$outboundSchema.optional(),
  rtsp: Rtsp$outboundSchema.optional(),
  s7: S7$outboundSchema.optional(),
  sapRouter: SapRouter$outboundSchema.optional(),
  scanTime: z.string().optional(),
  scpi: Scpi$outboundSchema.optional(),
  screenshots: z.nullable(z.array(Screenshot$outboundSchema)).optional(),
  ser2net: Ser2Net$outboundSchema.optional(),
  sevenDaysToDie: SevenDaysToDie$outboundSchema.optional(),
  sip: Sip$outboundSchema.optional(),
  skinny: Skinny$outboundSchema.optional(),
  smb: Smb$outboundSchema.optional(),
  smtp: Smtp$outboundSchema.optional(),
  snmp: Snmp$outboundSchema.optional(),
  socks: Socks$outboundSchema.optional(),
  spice: Spice$outboundSchema.optional(),
  ssdp: Ssdp$outboundSchema.optional(),
  ssh: Ssh$outboundSchema.optional(),
  steam: Steam$outboundSchema.optional(),
  tacacsPlus: TacacsPlus$outboundSchema.optional(),
  teamViewer: TeamViewer$outboundSchema.optional(),
  telnet: Telnet$outboundSchema.optional(),
  tibia: Tibia$outboundSchema.optional(),
  tls: Tls$outboundSchema.optional(),
  tplinkKasa: TplinkKasa$outboundSchema.optional(),
  transportProtocol: ServiceScanTransportProtocol$outboundSchema.optional(),
  unitronicsPcom: UnitronicsPcom$outboundSchema.optional(),
  upnp: Upnp$outboundSchema.optional(),
  ventrilo: Ventrilo$outboundSchema.optional(),
  vnc: Vnc$outboundSchema.optional(),
  weblogicT3: WeblogicT3$outboundSchema.optional(),
  winrm: Winrm$outboundSchema.optional(),
  wsDiscovery: WsDiscovery$outboundSchema.optional(),
  x11: X11$outboundSchema.optional(),
  zeromq: Zeromq$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    anyConnect: "any_connect",
    asteriskManagerInterface: "asterisk_manager_interface",
    bannerHashSha256: "banner_hash_sha256",
    checkpointTopology: "checkpoint_topology",
    ciscoIpsla: "cisco_ipsla",
    crestronCp3: "crestron_cp3",
    crestronDinAp2: "crestron_din_ap2",
    dvrIp: "dvr_ip",
    elfFile: "elf_file",
    hidVertx: "hid_vertx",
    isSuccess: "is_success",
    moneroP2p: "monero_p2p",
    natsIo: "nats_io",
    nfsMountd: "nfs_mountd",
    opcUa: "opc_ua",
    openvpnMgmt: "openvpn_mgmt",
    pcAnywhere: "pc_anywhere",
    profinetCm: "profinet_cm",
    redlionCrimson: "redlion_crimson",
    representativeInfo: "representative_info",
    sapRouter: "sap_router",
    scanTime: "scan_time",
    sevenDaysToDie: "seven_days_to_die",
    tacacsPlus: "tacacs_plus",
    teamViewer: "team_viewer",
    tplinkKasa: "tplink_kasa",
    transportProtocol: "transport_protocol",
    unitronicsPcom: "unitronics_pcom",
    weblogicT3: "weblogic_t3",
    wsDiscovery: "ws_discovery",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServiceScan$ {
  /** @deprecated use `ServiceScan$inboundSchema` instead. */
  export const inboundSchema = ServiceScan$inboundSchema;
  /** @deprecated use `ServiceScan$outboundSchema` instead. */
  export const outboundSchema = ServiceScan$outboundSchema;
  /** @deprecated use `ServiceScan$Outbound` instead. */
  export type Outbound = ServiceScan$Outbound;
}

export function serviceScanToJSON(serviceScan: ServiceScan): string {
  return JSON.stringify(ServiceScan$outboundSchema.parse(serviceScan));
}

export function serviceScanFromJSON(
  jsonString: string,
): SafeParseResult<ServiceScan, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ServiceScan$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ServiceScan' from JSON`,
  );
}
