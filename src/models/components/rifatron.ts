/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Rifatron = {
  model?: string | undefined;
};

/** @internal */
export const Rifatron$inboundSchema: z.ZodType<
  Rifatron,
  z.ZodTypeDef,
  unknown
> = z.object({
  model: z.string().optional(),
});

/** @internal */
export type Rifatron$Outbound = {
  model?: string | undefined;
};

/** @internal */
export const Rifatron$outboundSchema: z.ZodType<
  Rifatron$Outbound,
  z.ZodTypeDef,
  Rifatron
> = z.object({
  model: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Rifatron$ {
  /** @deprecated use `Rifatron$inboundSchema` instead. */
  export const inboundSchema = Rifatron$inboundSchema;
  /** @deprecated use `Rifatron$outboundSchema` instead. */
  export const outboundSchema = Rifatron$outboundSchema;
  /** @deprecated use `Rifatron$Outbound` instead. */
  export type Outbound = Rifatron$Outbound;
}

export function rifatronToJSON(rifatron: Rifatron): string {
  return JSON.stringify(Rifatron$outboundSchema.parse(rifatron));
}

export function rifatronFromJSON(
  jsonString: string,
): SafeParseResult<Rifatron, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Rifatron$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Rifatron' from JSON`,
  );
}
