/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Tibia = {
  clientVersion?: string | undefined;
  location?: string | undefined;
  loginIp?: string | undefined;
  loginPort?: string | undefined;
  name?: string | undefined;
  server?: string | undefined;
  url?: string | undefined;
  version?: string | undefined;
};

/** @internal */
export const Tibia$inboundSchema: z.ZodType<Tibia, z.ZodTypeDef, unknown> = z
  .object({
    client_version: z.string().optional(),
    location: z.string().optional(),
    login_ip: z.string().optional(),
    login_port: z.string().optional(),
    name: z.string().optional(),
    server: z.string().optional(),
    url: z.string().optional(),
    version: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "client_version": "clientVersion",
      "login_ip": "loginIp",
      "login_port": "loginPort",
    });
  });

/** @internal */
export type Tibia$Outbound = {
  client_version?: string | undefined;
  location?: string | undefined;
  login_ip?: string | undefined;
  login_port?: string | undefined;
  name?: string | undefined;
  server?: string | undefined;
  url?: string | undefined;
  version?: string | undefined;
};

/** @internal */
export const Tibia$outboundSchema: z.ZodType<
  Tibia$Outbound,
  z.ZodTypeDef,
  Tibia
> = z.object({
  clientVersion: z.string().optional(),
  location: z.string().optional(),
  loginIp: z.string().optional(),
  loginPort: z.string().optional(),
  name: z.string().optional(),
  server: z.string().optional(),
  url: z.string().optional(),
  version: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    clientVersion: "client_version",
    loginIp: "login_ip",
    loginPort: "login_port",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Tibia$ {
  /** @deprecated use `Tibia$inboundSchema` instead. */
  export const inboundSchema = Tibia$inboundSchema;
  /** @deprecated use `Tibia$outboundSchema` instead. */
  export const outboundSchema = Tibia$outboundSchema;
  /** @deprecated use `Tibia$Outbound` instead. */
  export type Outbound = Tibia$Outbound;
}

export function tibiaToJSON(tibia: Tibia): string {
  return JSON.stringify(Tibia$outboundSchema.parse(tibia));
}

export function tibiaFromJSON(
  jsonString: string,
): SafeParseResult<Tibia, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Tibia$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Tibia' from JSON`,
  );
}
