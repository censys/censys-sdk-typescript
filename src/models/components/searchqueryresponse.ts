/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  SearchQueryHit,
  SearchQueryHit$inboundSchema,
  SearchQueryHit$Outbound,
  SearchQueryHit$outboundSchema,
} from "./searchqueryhit.js";

export type SearchQueryResponse = {
  hits: Array<SearchQueryHit> | null;
  nextPageToken: string;
  previousPageToken: string;
  queryDurationMillis: number;
  totalHits: number;
};

/** @internal */
export const SearchQueryResponse$inboundSchema: z.ZodType<
  SearchQueryResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  hits: z.nullable(z.array(SearchQueryHit$inboundSchema)),
  next_page_token: z.string(),
  previous_page_token: z.string(),
  query_duration_millis: z.number().int(),
  total_hits: z.number(),
}).transform((v) => {
  return remap$(v, {
    "next_page_token": "nextPageToken",
    "previous_page_token": "previousPageToken",
    "query_duration_millis": "queryDurationMillis",
    "total_hits": "totalHits",
  });
});

/** @internal */
export type SearchQueryResponse$Outbound = {
  hits: Array<SearchQueryHit$Outbound> | null;
  next_page_token: string;
  previous_page_token: string;
  query_duration_millis: number;
  total_hits: number;
};

/** @internal */
export const SearchQueryResponse$outboundSchema: z.ZodType<
  SearchQueryResponse$Outbound,
  z.ZodTypeDef,
  SearchQueryResponse
> = z.object({
  hits: z.nullable(z.array(SearchQueryHit$outboundSchema)),
  nextPageToken: z.string(),
  previousPageToken: z.string(),
  queryDurationMillis: z.number().int(),
  totalHits: z.number(),
}).transform((v) => {
  return remap$(v, {
    nextPageToken: "next_page_token",
    previousPageToken: "previous_page_token",
    queryDurationMillis: "query_duration_millis",
    totalHits: "total_hits",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchQueryResponse$ {
  /** @deprecated use `SearchQueryResponse$inboundSchema` instead. */
  export const inboundSchema = SearchQueryResponse$inboundSchema;
  /** @deprecated use `SearchQueryResponse$outboundSchema` instead. */
  export const outboundSchema = SearchQueryResponse$outboundSchema;
  /** @deprecated use `SearchQueryResponse$Outbound` instead. */
  export type Outbound = SearchQueryResponse$Outbound;
}

export function searchQueryResponseToJSON(
  searchQueryResponse: SearchQueryResponse,
): string {
  return JSON.stringify(
    SearchQueryResponse$outboundSchema.parse(searchQueryResponse),
  );
}

export function searchQueryResponseFromJSON(
  jsonString: string,
): SafeParseResult<SearchQueryResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchQueryResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchQueryResponse' from JSON`,
  );
}
