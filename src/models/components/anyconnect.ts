/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AnyConnect = {
  /**
   * Version number indicated by the response for config-auth exchange
   */
  aggregateAuthVersion?: number | undefined;
  /**
   * Supported methods for users to enter credentials for this VPN
   */
  authMethods?: Array<string> | null | undefined;
  /**
   * List of groups a user can authenticate with to use this VPN
   */
  groups?: Array<string> | null | undefined;
  /**
   * XML content of the config-auth response
   */
  raw?: string | undefined;
  /**
   * Type of the response packet received after initializing the config-auth exchange
   */
  responseType?: string | undefined;
};

/** @internal */
export const AnyConnect$inboundSchema: z.ZodType<
  AnyConnect,
  z.ZodTypeDef,
  unknown
> = z.object({
  aggregate_auth_version: z.number().int().optional(),
  auth_methods: z.nullable(z.array(z.string())).optional(),
  groups: z.nullable(z.array(z.string())).optional(),
  raw: z.string().optional(),
  response_type: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "aggregate_auth_version": "aggregateAuthVersion",
    "auth_methods": "authMethods",
    "response_type": "responseType",
  });
});

/** @internal */
export type AnyConnect$Outbound = {
  aggregate_auth_version?: number | undefined;
  auth_methods?: Array<string> | null | undefined;
  groups?: Array<string> | null | undefined;
  raw?: string | undefined;
  response_type?: string | undefined;
};

/** @internal */
export const AnyConnect$outboundSchema: z.ZodType<
  AnyConnect$Outbound,
  z.ZodTypeDef,
  AnyConnect
> = z.object({
  aggregateAuthVersion: z.number().int().optional(),
  authMethods: z.nullable(z.array(z.string())).optional(),
  groups: z.nullable(z.array(z.string())).optional(),
  raw: z.string().optional(),
  responseType: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    aggregateAuthVersion: "aggregate_auth_version",
    authMethods: "auth_methods",
    responseType: "response_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AnyConnect$ {
  /** @deprecated use `AnyConnect$inboundSchema` instead. */
  export const inboundSchema = AnyConnect$inboundSchema;
  /** @deprecated use `AnyConnect$outboundSchema` instead. */
  export const outboundSchema = AnyConnect$outboundSchema;
  /** @deprecated use `AnyConnect$Outbound` instead. */
  export type Outbound = AnyConnect$Outbound;
}

export function anyConnectToJSON(anyConnect: AnyConnect): string {
  return JSON.stringify(AnyConnect$outboundSchema.parse(anyConnect));
}

export function anyConnectFromJSON(
  jsonString: string,
): SafeParseResult<AnyConnect, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AnyConnect$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AnyConnect' from JSON`,
  );
}
