/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  CollectionEventsResponse,
  CollectionEventsResponse$inboundSchema,
  CollectionEventsResponse$Outbound,
  CollectionEventsResponse$outboundSchema,
} from "./collectioneventsresponse.js";

export type ResponseEnvelopeCollectionEventsResponse = {
  result?: CollectionEventsResponse | undefined;
};

/** @internal */
export const ResponseEnvelopeCollectionEventsResponse$inboundSchema: z.ZodType<
  ResponseEnvelopeCollectionEventsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  result: CollectionEventsResponse$inboundSchema.optional(),
});

/** @internal */
export type ResponseEnvelopeCollectionEventsResponse$Outbound = {
  result?: CollectionEventsResponse$Outbound | undefined;
};

/** @internal */
export const ResponseEnvelopeCollectionEventsResponse$outboundSchema: z.ZodType<
  ResponseEnvelopeCollectionEventsResponse$Outbound,
  z.ZodTypeDef,
  ResponseEnvelopeCollectionEventsResponse
> = z.object({
  result: CollectionEventsResponse$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseEnvelopeCollectionEventsResponse$ {
  /** @deprecated use `ResponseEnvelopeCollectionEventsResponse$inboundSchema` instead. */
  export const inboundSchema =
    ResponseEnvelopeCollectionEventsResponse$inboundSchema;
  /** @deprecated use `ResponseEnvelopeCollectionEventsResponse$outboundSchema` instead. */
  export const outboundSchema =
    ResponseEnvelopeCollectionEventsResponse$outboundSchema;
  /** @deprecated use `ResponseEnvelopeCollectionEventsResponse$Outbound` instead. */
  export type Outbound = ResponseEnvelopeCollectionEventsResponse$Outbound;
}

export function responseEnvelopeCollectionEventsResponseToJSON(
  responseEnvelopeCollectionEventsResponse:
    ResponseEnvelopeCollectionEventsResponse,
): string {
  return JSON.stringify(
    ResponseEnvelopeCollectionEventsResponse$outboundSchema.parse(
      responseEnvelopeCollectionEventsResponse,
    ),
  );
}

export function responseEnvelopeCollectionEventsResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  ResponseEnvelopeCollectionEventsResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ResponseEnvelopeCollectionEventsResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ResponseEnvelopeCollectionEventsResponse' from JSON`,
  );
}
