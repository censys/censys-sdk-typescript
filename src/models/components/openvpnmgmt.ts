/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type OpenvpnMgmt = {
  buildDate?: string | undefined;
  features?: Array<string> | null | undefined;
  managementVersion?: string | undefined;
  openVpnVersion?: string | undefined;
  targetTriple?: string | undefined;
};

/** @internal */
export const OpenvpnMgmt$inboundSchema: z.ZodType<
  OpenvpnMgmt,
  z.ZodTypeDef,
  unknown
> = z.object({
  build_date: z.string().optional(),
  features: z.nullable(z.array(z.string())).optional(),
  management_version: z.string().optional(),
  open_vpn_version: z.string().optional(),
  target_triple: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "build_date": "buildDate",
    "management_version": "managementVersion",
    "open_vpn_version": "openVpnVersion",
    "target_triple": "targetTriple",
  });
});

/** @internal */
export type OpenvpnMgmt$Outbound = {
  build_date?: string | undefined;
  features?: Array<string> | null | undefined;
  management_version?: string | undefined;
  open_vpn_version?: string | undefined;
  target_triple?: string | undefined;
};

/** @internal */
export const OpenvpnMgmt$outboundSchema: z.ZodType<
  OpenvpnMgmt$Outbound,
  z.ZodTypeDef,
  OpenvpnMgmt
> = z.object({
  buildDate: z.string().optional(),
  features: z.nullable(z.array(z.string())).optional(),
  managementVersion: z.string().optional(),
  openVpnVersion: z.string().optional(),
  targetTriple: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    buildDate: "build_date",
    managementVersion: "management_version",
    openVpnVersion: "open_vpn_version",
    targetTriple: "target_triple",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenvpnMgmt$ {
  /** @deprecated use `OpenvpnMgmt$inboundSchema` instead. */
  export const inboundSchema = OpenvpnMgmt$inboundSchema;
  /** @deprecated use `OpenvpnMgmt$outboundSchema` instead. */
  export const outboundSchema = OpenvpnMgmt$outboundSchema;
  /** @deprecated use `OpenvpnMgmt$Outbound` instead. */
  export type Outbound = OpenvpnMgmt$Outbound;
}

export function openvpnMgmtToJSON(openvpnMgmt: OpenvpnMgmt): string {
  return JSON.stringify(OpenvpnMgmt$outboundSchema.parse(openvpnMgmt));
}

export function openvpnMgmtFromJSON(
  jsonString: string,
): SafeParseResult<OpenvpnMgmt, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpenvpnMgmt$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpenvpnMgmt' from JSON`,
  );
}
