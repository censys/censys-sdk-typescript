/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Indicates conditions beyond the attacker’s control that must exist in order to exploit the vulnerability. The Attack Complexity metric is scored as either Low or High. There are two possible values: Low (L) – There are no specific pre-conditions required for exploitation, High (H) – The attacker must complete some number of preparatory steps in order to get access.
 */
export const CVSSv4ComponentsAttackComplexity = {
  Unspecified: "unspecified",
  Low: "low",
  High: "high",
} as const;
/**
 * Indicates conditions beyond the attacker’s control that must exist in order to exploit the vulnerability. The Attack Complexity metric is scored as either Low or High. There are two possible values: Low (L) – There are no specific pre-conditions required for exploitation, High (H) – The attacker must complete some number of preparatory steps in order to get access.
 */
export type CVSSv4ComponentsAttackComplexity = ClosedEnum<
  typeof CVSSv4ComponentsAttackComplexity
>;

export const AttackRequirements = {
  Unspecified: "unspecified",
  None: "none",
  Present: "present",
} as const;
export type AttackRequirements = ClosedEnum<typeof AttackRequirements>;

/**
 * Indicates the level of access required for an attacker to exploit the vulnerability. The Attack Vector metric is scored in one of four levels: Network (N) – Vulnerabilities with this rating are remotely exploitable, from one or more hops away, up to, and including, remote exploitation over the Internet, Adjacent (A) – A vulnerability with this rating requires network adjacency for exploitation. The attack must be launched from the same physical or logical network, Local (L) – Vulnerabilities with this rating are not exploitable over a network, Physical (P) – An attacker must physically interact with the target system.
 */
export const CVSSv4ComponentsAttackVector = {
  Unspecified: "unspecified",
  Network: "network",
  Adjacent: "adjacent",
  Local: "local",
  Physical: "physical",
} as const;
/**
 * Indicates the level of access required for an attacker to exploit the vulnerability. The Attack Vector metric is scored in one of four levels: Network (N) – Vulnerabilities with this rating are remotely exploitable, from one or more hops away, up to, and including, remote exploitation over the Internet, Adjacent (A) – A vulnerability with this rating requires network adjacency for exploitation. The attack must be launched from the same physical or logical network, Local (L) – Vulnerabilities with this rating are not exploitable over a network, Physical (P) – An attacker must physically interact with the target system.
 */
export type CVSSv4ComponentsAttackVector = ClosedEnum<
  typeof CVSSv4ComponentsAttackVector
>;

export const Automatable = {
  NotDefined: "not_defined",
  No: "no",
  Yes: "yes",
} as const;
export type Automatable = ClosedEnum<typeof Automatable>;

/**
 * If an attack renders information unavailable, such as when a system crashes or through a DDoS attack, availability is negatively impacted. Availability has three possible values: None (N) – There is no loss of availability, Low (L) – Availability might be intermittently limited, or performance might be negatively impacted, as a result of a successful attack, High (H) – There is a complete loss of availability of the impacted system or information.
 */
export const CVSSv4ComponentsAvailability = {
  Unspecified: "unspecified",
  None: "none",
  Low: "low",
  High: "high",
} as const;
/**
 * If an attack renders information unavailable, such as when a system crashes or through a DDoS attack, availability is negatively impacted. Availability has three possible values: None (N) – There is no loss of availability, Low (L) – Availability might be intermittently limited, or performance might be negatively impacted, as a result of a successful attack, High (H) – There is a complete loss of availability of the impacted system or information.
 */
export type CVSSv4ComponentsAvailability = ClosedEnum<
  typeof CVSSv4ComponentsAvailability
>;

/**
 * Refers to the disclosure of sensitive information to authorized and unauthorized users, with the goal being that only authorized users are able to access the target data. Confidentiality has three potential values: High (H) – The attacker has full access to all resources in the impacted system, including highly sensitive information such as encryption keys, Low (L) – The attacker has partial access to information, with no control over what, specifically, they are able to access, None (N) – No data is accessible to unauthorized users as a result of the exploit.
 */
export const CVSSv4ComponentsConfidentiality = {
  Unspecified: "unspecified",
  None: "none",
  Low: "low",
  High: "high",
} as const;
/**
 * Refers to the disclosure of sensitive information to authorized and unauthorized users, with the goal being that only authorized users are able to access the target data. Confidentiality has three potential values: High (H) – The attacker has full access to all resources in the impacted system, including highly sensitive information such as encryption keys, Low (L) – The attacker has partial access to information, with no control over what, specifically, they are able to access, None (N) – No data is accessible to unauthorized users as a result of the exploit.
 */
export type CVSSv4ComponentsConfidentiality = ClosedEnum<
  typeof CVSSv4ComponentsConfidentiality
>;

/**
 * Refers to whether the protected information has been tampered with or changed in any way. If there is no way for an attacker to alter the accuracy or completeness of the information, integrity has been maintained. Integrity has three values: None (N) – There is no loss of the integrity of any information, Low (L) – A limited amount of information might be tampered with or modified, but there is no serious impact on the protected system, High (H) – The attacker can modify any/all information on the target system, resulting in a complete loss of integrity.
 */
export const CVSSv4ComponentsIntegrity = {
  Unspecified: "unspecified",
  None: "none",
  Low: "low",
  High: "high",
} as const;
/**
 * Refers to whether the protected information has been tampered with or changed in any way. If there is no way for an attacker to alter the accuracy or completeness of the information, integrity has been maintained. Integrity has three values: None (N) – There is no loss of the integrity of any information, Low (L) – A limited amount of information might be tampered with or modified, but there is no serious impact on the protected system, High (H) – The attacker can modify any/all information on the target system, resulting in a complete loss of integrity.
 */
export type CVSSv4ComponentsIntegrity = ClosedEnum<
  typeof CVSSv4ComponentsIntegrity
>;

/**
 * Describes the level of privileges or access an attacker must have before successful exploitation. There are three possible values: None (N) – There is no privilege or special access required to conduct the attack, Low (L) – The attacker requires basic, “user” level privileges to leverage the exploit, High (H) – Administrative or similar access privileges are required for successful attack.
 */
export const CVSSv4ComponentsPrivilegesRequired = {
  Unspecified: "unspecified",
  None: "none",
  Low: "low",
  High: "high",
} as const;
/**
 * Describes the level of privileges or access an attacker must have before successful exploitation. There are three possible values: None (N) – There is no privilege or special access required to conduct the attack, Low (L) – The attacker requires basic, “user” level privileges to leverage the exploit, High (H) – Administrative or similar access privileges are required for successful attack.
 */
export type CVSSv4ComponentsPrivilegesRequired = ClosedEnum<
  typeof CVSSv4ComponentsPrivilegesRequired
>;

export const ProviderUrgency = {
  NotDefined: "not_defined",
  Clear: "clear",
  Green: "green",
  Amber: "amber",
  Red: "red",
} as const;
export type ProviderUrgency = ClosedEnum<typeof ProviderUrgency>;

export const Recovery = {
  NotDefined: "not_defined",
  Automatic: "automatic",
  User: "user",
  Irrecoverable: "irrecoverable",
} as const;
export type Recovery = ClosedEnum<typeof Recovery>;

export const Safety = {
  NotDefined: "not_defined",
  Negligible: "negligible",
  Present: "present",
} as const;
export type Safety = ClosedEnum<typeof Safety>;

/**
 * Describes whether a user, other than the attacker, is required to do anything or participate in exploitation of the vulnerability. User interaction has two possible values: None (N) – No user interaction is required, Required (R) – A user must complete some steps for the exploit to succeed. For example, a user might be required to install some software.
 */
export const CVSSv4ComponentsUserInteraction = {
  Unspecified: "unspecified",
  None: "none",
  Required: "required",
} as const;
/**
 * Describes whether a user, other than the attacker, is required to do anything or participate in exploitation of the vulnerability. User interaction has two possible values: None (N) – No user interaction is required, Required (R) – A user must complete some steps for the exploit to succeed. For example, a user might be required to install some software.
 */
export type CVSSv4ComponentsUserInteraction = ClosedEnum<
  typeof CVSSv4ComponentsUserInteraction
>;

export const ValueDensity = {
  NotDefined: "not_defined",
  Diffuse: "diffuse",
  Concentrated: "concentrated",
} as const;
export type ValueDensity = ClosedEnum<typeof ValueDensity>;

export const VulnerabilityResponseEffort = {
  NotDefined: "not_defined",
  Low: "low",
  Moderate: "moderate",
  High: "high",
} as const;
export type VulnerabilityResponseEffort = ClosedEnum<
  typeof VulnerabilityResponseEffort
>;

export type CVSSv4Components = {
  /**
   * Indicates conditions beyond the attacker’s control that must exist in order to exploit the vulnerability. The Attack Complexity metric is scored as either Low or High. There are two possible values: Low (L) – There are no specific pre-conditions required for exploitation, High (H) – The attacker must complete some number of preparatory steps in order to get access.
   */
  attackComplexity?: CVSSv4ComponentsAttackComplexity | undefined;
  attackRequirements?: AttackRequirements | undefined;
  /**
   * Indicates the level of access required for an attacker to exploit the vulnerability. The Attack Vector metric is scored in one of four levels: Network (N) – Vulnerabilities with this rating are remotely exploitable, from one or more hops away, up to, and including, remote exploitation over the Internet, Adjacent (A) – A vulnerability with this rating requires network adjacency for exploitation. The attack must be launched from the same physical or logical network, Local (L) – Vulnerabilities with this rating are not exploitable over a network, Physical (P) – An attacker must physically interact with the target system.
   */
  attackVector?: CVSSv4ComponentsAttackVector | undefined;
  automatable?: Automatable | undefined;
  /**
   * If an attack renders information unavailable, such as when a system crashes or through a DDoS attack, availability is negatively impacted. Availability has three possible values: None (N) – There is no loss of availability, Low (L) – Availability might be intermittently limited, or performance might be negatively impacted, as a result of a successful attack, High (H) – There is a complete loss of availability of the impacted system or information.
   */
  availability?: CVSSv4ComponentsAvailability | undefined;
  /**
   * Refers to the disclosure of sensitive information to authorized and unauthorized users, with the goal being that only authorized users are able to access the target data. Confidentiality has three potential values: High (H) – The attacker has full access to all resources in the impacted system, including highly sensitive information such as encryption keys, Low (L) – The attacker has partial access to information, with no control over what, specifically, they are able to access, None (N) – No data is accessible to unauthorized users as a result of the exploit.
   */
  confidentiality?: CVSSv4ComponentsConfidentiality | undefined;
  /**
   * Refers to whether the protected information has been tampered with or changed in any way. If there is no way for an attacker to alter the accuracy or completeness of the information, integrity has been maintained. Integrity has three values: None (N) – There is no loss of the integrity of any information, Low (L) – A limited amount of information might be tampered with or modified, but there is no serious impact on the protected system, High (H) – The attacker can modify any/all information on the target system, resulting in a complete loss of integrity.
   */
  integrity?: CVSSv4ComponentsIntegrity | undefined;
  /**
   * Describes the level of privileges or access an attacker must have before successful exploitation. There are three possible values: None (N) – There is no privilege or special access required to conduct the attack, Low (L) – The attacker requires basic, “user” level privileges to leverage the exploit, High (H) – Administrative or similar access privileges are required for successful attack.
   */
  privilegesRequired?: CVSSv4ComponentsPrivilegesRequired | undefined;
  providerUrgency?: ProviderUrgency | undefined;
  recovery?: Recovery | undefined;
  safety?: Safety | undefined;
  /**
   * Describes whether a user, other than the attacker, is required to do anything or participate in exploitation of the vulnerability. User interaction has two possible values: None (N) – No user interaction is required, Required (R) – A user must complete some steps for the exploit to succeed. For example, a user might be required to install some software.
   */
  userInteraction?: CVSSv4ComponentsUserInteraction | undefined;
  valueDensity?: ValueDensity | undefined;
  vulnerabilityResponseEffort?: VulnerabilityResponseEffort | undefined;
};

/** @internal */
export const CVSSv4ComponentsAttackComplexity$inboundSchema: z.ZodNativeEnum<
  typeof CVSSv4ComponentsAttackComplexity
> = z.nativeEnum(CVSSv4ComponentsAttackComplexity);

/** @internal */
export const CVSSv4ComponentsAttackComplexity$outboundSchema: z.ZodNativeEnum<
  typeof CVSSv4ComponentsAttackComplexity
> = CVSSv4ComponentsAttackComplexity$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CVSSv4ComponentsAttackComplexity$ {
  /** @deprecated use `CVSSv4ComponentsAttackComplexity$inboundSchema` instead. */
  export const inboundSchema = CVSSv4ComponentsAttackComplexity$inboundSchema;
  /** @deprecated use `CVSSv4ComponentsAttackComplexity$outboundSchema` instead. */
  export const outboundSchema = CVSSv4ComponentsAttackComplexity$outboundSchema;
}

/** @internal */
export const AttackRequirements$inboundSchema: z.ZodNativeEnum<
  typeof AttackRequirements
> = z.nativeEnum(AttackRequirements);

/** @internal */
export const AttackRequirements$outboundSchema: z.ZodNativeEnum<
  typeof AttackRequirements
> = AttackRequirements$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AttackRequirements$ {
  /** @deprecated use `AttackRequirements$inboundSchema` instead. */
  export const inboundSchema = AttackRequirements$inboundSchema;
  /** @deprecated use `AttackRequirements$outboundSchema` instead. */
  export const outboundSchema = AttackRequirements$outboundSchema;
}

/** @internal */
export const CVSSv4ComponentsAttackVector$inboundSchema: z.ZodNativeEnum<
  typeof CVSSv4ComponentsAttackVector
> = z.nativeEnum(CVSSv4ComponentsAttackVector);

/** @internal */
export const CVSSv4ComponentsAttackVector$outboundSchema: z.ZodNativeEnum<
  typeof CVSSv4ComponentsAttackVector
> = CVSSv4ComponentsAttackVector$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CVSSv4ComponentsAttackVector$ {
  /** @deprecated use `CVSSv4ComponentsAttackVector$inboundSchema` instead. */
  export const inboundSchema = CVSSv4ComponentsAttackVector$inboundSchema;
  /** @deprecated use `CVSSv4ComponentsAttackVector$outboundSchema` instead. */
  export const outboundSchema = CVSSv4ComponentsAttackVector$outboundSchema;
}

/** @internal */
export const Automatable$inboundSchema: z.ZodNativeEnum<typeof Automatable> = z
  .nativeEnum(Automatable);

/** @internal */
export const Automatable$outboundSchema: z.ZodNativeEnum<typeof Automatable> =
  Automatable$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Automatable$ {
  /** @deprecated use `Automatable$inboundSchema` instead. */
  export const inboundSchema = Automatable$inboundSchema;
  /** @deprecated use `Automatable$outboundSchema` instead. */
  export const outboundSchema = Automatable$outboundSchema;
}

/** @internal */
export const CVSSv4ComponentsAvailability$inboundSchema: z.ZodNativeEnum<
  typeof CVSSv4ComponentsAvailability
> = z.nativeEnum(CVSSv4ComponentsAvailability);

/** @internal */
export const CVSSv4ComponentsAvailability$outboundSchema: z.ZodNativeEnum<
  typeof CVSSv4ComponentsAvailability
> = CVSSv4ComponentsAvailability$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CVSSv4ComponentsAvailability$ {
  /** @deprecated use `CVSSv4ComponentsAvailability$inboundSchema` instead. */
  export const inboundSchema = CVSSv4ComponentsAvailability$inboundSchema;
  /** @deprecated use `CVSSv4ComponentsAvailability$outboundSchema` instead. */
  export const outboundSchema = CVSSv4ComponentsAvailability$outboundSchema;
}

/** @internal */
export const CVSSv4ComponentsConfidentiality$inboundSchema: z.ZodNativeEnum<
  typeof CVSSv4ComponentsConfidentiality
> = z.nativeEnum(CVSSv4ComponentsConfidentiality);

/** @internal */
export const CVSSv4ComponentsConfidentiality$outboundSchema: z.ZodNativeEnum<
  typeof CVSSv4ComponentsConfidentiality
> = CVSSv4ComponentsConfidentiality$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CVSSv4ComponentsConfidentiality$ {
  /** @deprecated use `CVSSv4ComponentsConfidentiality$inboundSchema` instead. */
  export const inboundSchema = CVSSv4ComponentsConfidentiality$inboundSchema;
  /** @deprecated use `CVSSv4ComponentsConfidentiality$outboundSchema` instead. */
  export const outboundSchema = CVSSv4ComponentsConfidentiality$outboundSchema;
}

/** @internal */
export const CVSSv4ComponentsIntegrity$inboundSchema: z.ZodNativeEnum<
  typeof CVSSv4ComponentsIntegrity
> = z.nativeEnum(CVSSv4ComponentsIntegrity);

/** @internal */
export const CVSSv4ComponentsIntegrity$outboundSchema: z.ZodNativeEnum<
  typeof CVSSv4ComponentsIntegrity
> = CVSSv4ComponentsIntegrity$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CVSSv4ComponentsIntegrity$ {
  /** @deprecated use `CVSSv4ComponentsIntegrity$inboundSchema` instead. */
  export const inboundSchema = CVSSv4ComponentsIntegrity$inboundSchema;
  /** @deprecated use `CVSSv4ComponentsIntegrity$outboundSchema` instead. */
  export const outboundSchema = CVSSv4ComponentsIntegrity$outboundSchema;
}

/** @internal */
export const CVSSv4ComponentsPrivilegesRequired$inboundSchema: z.ZodNativeEnum<
  typeof CVSSv4ComponentsPrivilegesRequired
> = z.nativeEnum(CVSSv4ComponentsPrivilegesRequired);

/** @internal */
export const CVSSv4ComponentsPrivilegesRequired$outboundSchema: z.ZodNativeEnum<
  typeof CVSSv4ComponentsPrivilegesRequired
> = CVSSv4ComponentsPrivilegesRequired$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CVSSv4ComponentsPrivilegesRequired$ {
  /** @deprecated use `CVSSv4ComponentsPrivilegesRequired$inboundSchema` instead. */
  export const inboundSchema = CVSSv4ComponentsPrivilegesRequired$inboundSchema;
  /** @deprecated use `CVSSv4ComponentsPrivilegesRequired$outboundSchema` instead. */
  export const outboundSchema =
    CVSSv4ComponentsPrivilegesRequired$outboundSchema;
}

/** @internal */
export const ProviderUrgency$inboundSchema: z.ZodNativeEnum<
  typeof ProviderUrgency
> = z.nativeEnum(ProviderUrgency);

/** @internal */
export const ProviderUrgency$outboundSchema: z.ZodNativeEnum<
  typeof ProviderUrgency
> = ProviderUrgency$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProviderUrgency$ {
  /** @deprecated use `ProviderUrgency$inboundSchema` instead. */
  export const inboundSchema = ProviderUrgency$inboundSchema;
  /** @deprecated use `ProviderUrgency$outboundSchema` instead. */
  export const outboundSchema = ProviderUrgency$outboundSchema;
}

/** @internal */
export const Recovery$inboundSchema: z.ZodNativeEnum<typeof Recovery> = z
  .nativeEnum(Recovery);

/** @internal */
export const Recovery$outboundSchema: z.ZodNativeEnum<typeof Recovery> =
  Recovery$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Recovery$ {
  /** @deprecated use `Recovery$inboundSchema` instead. */
  export const inboundSchema = Recovery$inboundSchema;
  /** @deprecated use `Recovery$outboundSchema` instead. */
  export const outboundSchema = Recovery$outboundSchema;
}

/** @internal */
export const Safety$inboundSchema: z.ZodNativeEnum<typeof Safety> = z
  .nativeEnum(Safety);

/** @internal */
export const Safety$outboundSchema: z.ZodNativeEnum<typeof Safety> =
  Safety$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Safety$ {
  /** @deprecated use `Safety$inboundSchema` instead. */
  export const inboundSchema = Safety$inboundSchema;
  /** @deprecated use `Safety$outboundSchema` instead. */
  export const outboundSchema = Safety$outboundSchema;
}

/** @internal */
export const CVSSv4ComponentsUserInteraction$inboundSchema: z.ZodNativeEnum<
  typeof CVSSv4ComponentsUserInteraction
> = z.nativeEnum(CVSSv4ComponentsUserInteraction);

/** @internal */
export const CVSSv4ComponentsUserInteraction$outboundSchema: z.ZodNativeEnum<
  typeof CVSSv4ComponentsUserInteraction
> = CVSSv4ComponentsUserInteraction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CVSSv4ComponentsUserInteraction$ {
  /** @deprecated use `CVSSv4ComponentsUserInteraction$inboundSchema` instead. */
  export const inboundSchema = CVSSv4ComponentsUserInteraction$inboundSchema;
  /** @deprecated use `CVSSv4ComponentsUserInteraction$outboundSchema` instead. */
  export const outboundSchema = CVSSv4ComponentsUserInteraction$outboundSchema;
}

/** @internal */
export const ValueDensity$inboundSchema: z.ZodNativeEnum<typeof ValueDensity> =
  z.nativeEnum(ValueDensity);

/** @internal */
export const ValueDensity$outboundSchema: z.ZodNativeEnum<typeof ValueDensity> =
  ValueDensity$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ValueDensity$ {
  /** @deprecated use `ValueDensity$inboundSchema` instead. */
  export const inboundSchema = ValueDensity$inboundSchema;
  /** @deprecated use `ValueDensity$outboundSchema` instead. */
  export const outboundSchema = ValueDensity$outboundSchema;
}

/** @internal */
export const VulnerabilityResponseEffort$inboundSchema: z.ZodNativeEnum<
  typeof VulnerabilityResponseEffort
> = z.nativeEnum(VulnerabilityResponseEffort);

/** @internal */
export const VulnerabilityResponseEffort$outboundSchema: z.ZodNativeEnum<
  typeof VulnerabilityResponseEffort
> = VulnerabilityResponseEffort$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VulnerabilityResponseEffort$ {
  /** @deprecated use `VulnerabilityResponseEffort$inboundSchema` instead. */
  export const inboundSchema = VulnerabilityResponseEffort$inboundSchema;
  /** @deprecated use `VulnerabilityResponseEffort$outboundSchema` instead. */
  export const outboundSchema = VulnerabilityResponseEffort$outboundSchema;
}

/** @internal */
export const CVSSv4Components$inboundSchema: z.ZodType<
  CVSSv4Components,
  z.ZodTypeDef,
  unknown
> = z.object({
  attack_complexity: CVSSv4ComponentsAttackComplexity$inboundSchema.optional(),
  attack_requirements: AttackRequirements$inboundSchema.optional(),
  attack_vector: CVSSv4ComponentsAttackVector$inboundSchema.optional(),
  automatable: Automatable$inboundSchema.optional(),
  availability: CVSSv4ComponentsAvailability$inboundSchema.optional(),
  confidentiality: CVSSv4ComponentsConfidentiality$inboundSchema.optional(),
  integrity: CVSSv4ComponentsIntegrity$inboundSchema.optional(),
  privileges_required: CVSSv4ComponentsPrivilegesRequired$inboundSchema
    .optional(),
  provider_urgency: ProviderUrgency$inboundSchema.optional(),
  recovery: Recovery$inboundSchema.optional(),
  safety: Safety$inboundSchema.optional(),
  user_interaction: CVSSv4ComponentsUserInteraction$inboundSchema.optional(),
  value_density: ValueDensity$inboundSchema.optional(),
  vulnerability_response_effort: VulnerabilityResponseEffort$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "attack_complexity": "attackComplexity",
    "attack_requirements": "attackRequirements",
    "attack_vector": "attackVector",
    "privileges_required": "privilegesRequired",
    "provider_urgency": "providerUrgency",
    "user_interaction": "userInteraction",
    "value_density": "valueDensity",
    "vulnerability_response_effort": "vulnerabilityResponseEffort",
  });
});

/** @internal */
export type CVSSv4Components$Outbound = {
  attack_complexity?: string | undefined;
  attack_requirements?: string | undefined;
  attack_vector?: string | undefined;
  automatable?: string | undefined;
  availability?: string | undefined;
  confidentiality?: string | undefined;
  integrity?: string | undefined;
  privileges_required?: string | undefined;
  provider_urgency?: string | undefined;
  recovery?: string | undefined;
  safety?: string | undefined;
  user_interaction?: string | undefined;
  value_density?: string | undefined;
  vulnerability_response_effort?: string | undefined;
};

/** @internal */
export const CVSSv4Components$outboundSchema: z.ZodType<
  CVSSv4Components$Outbound,
  z.ZodTypeDef,
  CVSSv4Components
> = z.object({
  attackComplexity: CVSSv4ComponentsAttackComplexity$outboundSchema.optional(),
  attackRequirements: AttackRequirements$outboundSchema.optional(),
  attackVector: CVSSv4ComponentsAttackVector$outboundSchema.optional(),
  automatable: Automatable$outboundSchema.optional(),
  availability: CVSSv4ComponentsAvailability$outboundSchema.optional(),
  confidentiality: CVSSv4ComponentsConfidentiality$outboundSchema.optional(),
  integrity: CVSSv4ComponentsIntegrity$outboundSchema.optional(),
  privilegesRequired: CVSSv4ComponentsPrivilegesRequired$outboundSchema
    .optional(),
  providerUrgency: ProviderUrgency$outboundSchema.optional(),
  recovery: Recovery$outboundSchema.optional(),
  safety: Safety$outboundSchema.optional(),
  userInteraction: CVSSv4ComponentsUserInteraction$outboundSchema.optional(),
  valueDensity: ValueDensity$outboundSchema.optional(),
  vulnerabilityResponseEffort: VulnerabilityResponseEffort$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    attackComplexity: "attack_complexity",
    attackRequirements: "attack_requirements",
    attackVector: "attack_vector",
    privilegesRequired: "privileges_required",
    providerUrgency: "provider_urgency",
    userInteraction: "user_interaction",
    valueDensity: "value_density",
    vulnerabilityResponseEffort: "vulnerability_response_effort",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CVSSv4Components$ {
  /** @deprecated use `CVSSv4Components$inboundSchema` instead. */
  export const inboundSchema = CVSSv4Components$inboundSchema;
  /** @deprecated use `CVSSv4Components$outboundSchema` instead. */
  export const outboundSchema = CVSSv4Components$outboundSchema;
  /** @deprecated use `CVSSv4Components$Outbound` instead. */
  export type Outbound = CVSSv4Components$Outbound;
}

export function cvsSv4ComponentsToJSON(
  cvsSv4Components: CVSSv4Components,
): string {
  return JSON.stringify(
    CVSSv4Components$outboundSchema.parse(cvsSv4Components),
  );
}

export function cvsSv4ComponentsFromJSON(
  jsonString: string,
): SafeParseResult<CVSSv4Components, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CVSSv4Components$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CVSSv4Components' from JSON`,
  );
}
