/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Cwe = {
  /**
   * A unique identifier associated with a class of a software or hardware weakness.
   */
  entry?: string | undefined;
};

/** @internal */
export const Cwe$inboundSchema: z.ZodType<Cwe, z.ZodTypeDef, unknown> = z
  .object({
    entry: z.string().optional(),
  });

/** @internal */
export type Cwe$Outbound = {
  entry?: string | undefined;
};

/** @internal */
export const Cwe$outboundSchema: z.ZodType<Cwe$Outbound, z.ZodTypeDef, Cwe> = z
  .object({
    entry: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Cwe$ {
  /** @deprecated use `Cwe$inboundSchema` instead. */
  export const inboundSchema = Cwe$inboundSchema;
  /** @deprecated use `Cwe$outboundSchema` instead. */
  export const outboundSchema = Cwe$outboundSchema;
  /** @deprecated use `Cwe$Outbound` instead. */
  export type Outbound = Cwe$Outbound;
}

export function cweToJSON(cwe: Cwe): string {
  return JSON.stringify(Cwe$outboundSchema.parse(cwe));
}

export function cweFromJSON(
  jsonString: string,
): SafeParseResult<Cwe, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Cwe$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Cwe' from JSON`,
  );
}
