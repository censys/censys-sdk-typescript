/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Coordinates = {
  latitude?: number | undefined;
  longitude?: number | undefined;
};

/** @internal */
export const Coordinates$inboundSchema: z.ZodType<
  Coordinates,
  z.ZodTypeDef,
  unknown
> = z.object({
  latitude: z.number().optional(),
  longitude: z.number().optional(),
});

/** @internal */
export type Coordinates$Outbound = {
  latitude?: number | undefined;
  longitude?: number | undefined;
};

/** @internal */
export const Coordinates$outboundSchema: z.ZodType<
  Coordinates$Outbound,
  z.ZodTypeDef,
  Coordinates
> = z.object({
  latitude: z.number().optional(),
  longitude: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Coordinates$ {
  /** @deprecated use `Coordinates$inboundSchema` instead. */
  export const inboundSchema = Coordinates$inboundSchema;
  /** @deprecated use `Coordinates$outboundSchema` instead. */
  export const outboundSchema = Coordinates$outboundSchema;
  /** @deprecated use `Coordinates$Outbound` instead. */
  export type Outbound = Coordinates$Outbound;
}

export function coordinatesToJSON(coordinates: Coordinates): string {
  return JSON.stringify(Coordinates$outboundSchema.parse(coordinates));
}

export function coordinatesFromJSON(
  jsonString: string,
): SafeParseResult<Coordinates, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Coordinates$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Coordinates' from JSON`,
  );
}
