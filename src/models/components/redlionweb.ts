/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type RedlionWeb = {
  enhancedWebServer?: boolean | undefined;
  logNames?: Array<string> | null | undefined;
  title?: string | undefined;
};

/** @internal */
export const RedlionWeb$inboundSchema: z.ZodType<
  RedlionWeb,
  z.ZodTypeDef,
  unknown
> = z.object({
  enhanced_web_server: z.boolean().optional(),
  log_names: z.nullable(z.array(z.string())).optional(),
  title: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "enhanced_web_server": "enhancedWebServer",
    "log_names": "logNames",
  });
});

/** @internal */
export type RedlionWeb$Outbound = {
  enhanced_web_server?: boolean | undefined;
  log_names?: Array<string> | null | undefined;
  title?: string | undefined;
};

/** @internal */
export const RedlionWeb$outboundSchema: z.ZodType<
  RedlionWeb$Outbound,
  z.ZodTypeDef,
  RedlionWeb
> = z.object({
  enhancedWebServer: z.boolean().optional(),
  logNames: z.nullable(z.array(z.string())).optional(),
  title: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    enhancedWebServer: "enhanced_web_server",
    logNames: "log_names",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedlionWeb$ {
  /** @deprecated use `RedlionWeb$inboundSchema` instead. */
  export const inboundSchema = RedlionWeb$inboundSchema;
  /** @deprecated use `RedlionWeb$outboundSchema` instead. */
  export const outboundSchema = RedlionWeb$outboundSchema;
  /** @deprecated use `RedlionWeb$Outbound` instead. */
  export type Outbound = RedlionWeb$Outbound;
}

export function redlionWebToJSON(redlionWeb: RedlionWeb): string {
  return JSON.stringify(RedlionWeb$outboundSchema.parse(redlionWeb));
}

export function redlionWebFromJSON(
  jsonString: string,
): SafeParseResult<RedlionWeb, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedlionWeb$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedlionWeb' from JSON`,
  );
}
