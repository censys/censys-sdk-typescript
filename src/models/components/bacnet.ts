/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Bacnet = {
  applicationSoftwareRevision?: string | undefined;
  description?: string | undefined;
  firmwareRevision?: string | undefined;
  instanceNumber?: number | undefined;
  location?: string | undefined;
  modelName?: string | undefined;
  objectName?: string | undefined;
  vendorId?: number | undefined;
  vendorName?: string | undefined;
};

/** @internal */
export const Bacnet$inboundSchema: z.ZodType<Bacnet, z.ZodTypeDef, unknown> = z
  .object({
    application_software_revision: z.string().optional(),
    description: z.string().optional(),
    firmware_revision: z.string().optional(),
    instance_number: z.number().int().optional(),
    location: z.string().optional(),
    model_name: z.string().optional(),
    object_name: z.string().optional(),
    vendor_id: z.number().int().optional(),
    vendor_name: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "application_software_revision": "applicationSoftwareRevision",
      "firmware_revision": "firmwareRevision",
      "instance_number": "instanceNumber",
      "model_name": "modelName",
      "object_name": "objectName",
      "vendor_id": "vendorId",
      "vendor_name": "vendorName",
    });
  });

/** @internal */
export type Bacnet$Outbound = {
  application_software_revision?: string | undefined;
  description?: string | undefined;
  firmware_revision?: string | undefined;
  instance_number?: number | undefined;
  location?: string | undefined;
  model_name?: string | undefined;
  object_name?: string | undefined;
  vendor_id?: number | undefined;
  vendor_name?: string | undefined;
};

/** @internal */
export const Bacnet$outboundSchema: z.ZodType<
  Bacnet$Outbound,
  z.ZodTypeDef,
  Bacnet
> = z.object({
  applicationSoftwareRevision: z.string().optional(),
  description: z.string().optional(),
  firmwareRevision: z.string().optional(),
  instanceNumber: z.number().int().optional(),
  location: z.string().optional(),
  modelName: z.string().optional(),
  objectName: z.string().optional(),
  vendorId: z.number().int().optional(),
  vendorName: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    applicationSoftwareRevision: "application_software_revision",
    firmwareRevision: "firmware_revision",
    instanceNumber: "instance_number",
    modelName: "model_name",
    objectName: "object_name",
    vendorId: "vendor_id",
    vendorName: "vendor_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Bacnet$ {
  /** @deprecated use `Bacnet$inboundSchema` instead. */
  export const inboundSchema = Bacnet$inboundSchema;
  /** @deprecated use `Bacnet$outboundSchema` instead. */
  export const outboundSchema = Bacnet$outboundSchema;
  /** @deprecated use `Bacnet$Outbound` instead. */
  export type Outbound = Bacnet$Outbound;
}

export function bacnetToJSON(bacnet: Bacnet): string {
  return JSON.stringify(Bacnet$outboundSchema.parse(bacnet));
}

export function bacnetFromJSON(
  jsonString: string,
): SafeParseResult<Bacnet, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Bacnet$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Bacnet' from JSON`,
  );
}
