/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type WebOrigin = {
  hostname?: string | undefined;
  port?: number | undefined;
};

/** @internal */
export const WebOrigin$inboundSchema: z.ZodType<
  WebOrigin,
  z.ZodTypeDef,
  unknown
> = z.object({
  hostname: z.string().optional(),
  port: z.number().int().optional(),
});

/** @internal */
export type WebOrigin$Outbound = {
  hostname?: string | undefined;
  port?: number | undefined;
};

/** @internal */
export const WebOrigin$outboundSchema: z.ZodType<
  WebOrigin$Outbound,
  z.ZodTypeDef,
  WebOrigin
> = z.object({
  hostname: z.string().optional(),
  port: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WebOrigin$ {
  /** @deprecated use `WebOrigin$inboundSchema` instead. */
  export const inboundSchema = WebOrigin$inboundSchema;
  /** @deprecated use `WebOrigin$outboundSchema` instead. */
  export const outboundSchema = WebOrigin$outboundSchema;
  /** @deprecated use `WebOrigin$Outbound` instead. */
  export type Outbound = WebOrigin$Outbound;
}

export function webOriginToJSON(webOrigin: WebOrigin): string {
  return JSON.stringify(WebOrigin$outboundSchema.parse(webOrigin));
}

export function webOriginFromJSON(
  jsonString: string,
): SafeParseResult<WebOrigin, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WebOrigin$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WebOrigin' from JSON`,
  );
}
