/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  CVSSv4Components,
  CVSSv4Components$inboundSchema,
  CVSSv4Components$Outbound,
  CVSSv4Components$outboundSchema,
} from "./cvssv4components.js";

export type CVSSv4 = {
  components?: CVSSv4Components | undefined;
  /**
   * Score of the vulnerability; 0.1 is the lowest, 10 is the maximum
   */
  score?: number | undefined;
  /**
   * The path, method, or scenario used to exploit the vulnerability. Each section represents components that contribute to the overall CVSS score.
   */
  vector?: string | undefined;
};

/** @internal */
export const CVSSv4$inboundSchema: z.ZodType<CVSSv4, z.ZodTypeDef, unknown> = z
  .object({
    components: CVSSv4Components$inboundSchema.optional(),
    score: z.number().optional(),
    vector: z.string().optional(),
  });

/** @internal */
export type CVSSv4$Outbound = {
  components?: CVSSv4Components$Outbound | undefined;
  score?: number | undefined;
  vector?: string | undefined;
};

/** @internal */
export const CVSSv4$outboundSchema: z.ZodType<
  CVSSv4$Outbound,
  z.ZodTypeDef,
  CVSSv4
> = z.object({
  components: CVSSv4Components$outboundSchema.optional(),
  score: z.number().optional(),
  vector: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CVSSv4$ {
  /** @deprecated use `CVSSv4$inboundSchema` instead. */
  export const inboundSchema = CVSSv4$inboundSchema;
  /** @deprecated use `CVSSv4$outboundSchema` instead. */
  export const outboundSchema = CVSSv4$outboundSchema;
  /** @deprecated use `CVSSv4$Outbound` instead. */
  export type Outbound = CVSSv4$Outbound;
}

export function cvsSv4ToJSON(cvsSv4: CVSSv4): string {
  return JSON.stringify(CVSSv4$outboundSchema.parse(cvsSv4));
}

export function cvsSv4FromJSON(
  jsonString: string,
): SafeParseResult<CVSSv4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CVSSv4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CVSSv4' from JSON`,
  );
}
