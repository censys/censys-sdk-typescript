/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Worker = {
  clientId?: string | undefined;
  fd?: string | undefined;
  functions?: string | undefined;
  ip?: string | undefined;
};

/** @internal */
export const Worker$inboundSchema: z.ZodType<Worker, z.ZodTypeDef, unknown> = z
  .object({
    client_id: z.string().optional(),
    fd: z.string().optional(),
    functions: z.string().optional(),
    ip: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "client_id": "clientId",
    });
  });

/** @internal */
export type Worker$Outbound = {
  client_id?: string | undefined;
  fd?: string | undefined;
  functions?: string | undefined;
  ip?: string | undefined;
};

/** @internal */
export const Worker$outboundSchema: z.ZodType<
  Worker$Outbound,
  z.ZodTypeDef,
  Worker
> = z.object({
  clientId: z.string().optional(),
  fd: z.string().optional(),
  functions: z.string().optional(),
  ip: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    clientId: "client_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Worker$ {
  /** @deprecated use `Worker$inboundSchema` instead. */
  export const inboundSchema = Worker$inboundSchema;
  /** @deprecated use `Worker$outboundSchema` instead. */
  export const outboundSchema = Worker$outboundSchema;
  /** @deprecated use `Worker$Outbound` instead. */
  export type Outbound = Worker$Outbound;
}

export function workerToJSON(worker: Worker): string {
  return JSON.stringify(Worker$outboundSchema.parse(worker));
}

export function workerFromJSON(
  jsonString: string,
): SafeParseResult<Worker, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Worker$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Worker' from JSON`,
  );
}
