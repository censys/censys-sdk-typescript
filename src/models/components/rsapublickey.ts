/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type RsaPublicKey = {
  /**
   * The RSA key's public exponent (e).
   */
  exponent?: number | undefined;
  /**
   * Bit-length of the RSA modulus.
   */
  length?: number | undefined;
  /**
   * The RSA key's modulus (n) in big-endian encoding.
   */
  modulus?: string | undefined;
};

/** @internal */
export const RsaPublicKey$inboundSchema: z.ZodType<
  RsaPublicKey,
  z.ZodTypeDef,
  unknown
> = z.object({
  exponent: z.number().int().optional(),
  length: z.number().int().optional(),
  modulus: z.string().optional(),
});

/** @internal */
export type RsaPublicKey$Outbound = {
  exponent?: number | undefined;
  length?: number | undefined;
  modulus?: string | undefined;
};

/** @internal */
export const RsaPublicKey$outboundSchema: z.ZodType<
  RsaPublicKey$Outbound,
  z.ZodTypeDef,
  RsaPublicKey
> = z.object({
  exponent: z.number().int().optional(),
  length: z.number().int().optional(),
  modulus: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RsaPublicKey$ {
  /** @deprecated use `RsaPublicKey$inboundSchema` instead. */
  export const inboundSchema = RsaPublicKey$inboundSchema;
  /** @deprecated use `RsaPublicKey$outboundSchema` instead. */
  export const outboundSchema = RsaPublicKey$outboundSchema;
  /** @deprecated use `RsaPublicKey$Outbound` instead. */
  export type Outbound = RsaPublicKey$Outbound;
}

export function rsaPublicKeyToJSON(rsaPublicKey: RsaPublicKey): string {
  return JSON.stringify(RsaPublicKey$outboundSchema.parse(rsaPublicKey));
}

export function rsaPublicKeyFromJSON(
  jsonString: string,
): SafeParseResult<RsaPublicKey, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RsaPublicKey$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RsaPublicKey' from JSON`,
  );
}
