/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Epmd = {
  names?: Array<string> | null | undefined;
};

/** @internal */
export const Epmd$inboundSchema: z.ZodType<Epmd, z.ZodTypeDef, unknown> = z
  .object({
    names: z.nullable(z.array(z.string())).optional(),
  });

/** @internal */
export type Epmd$Outbound = {
  names?: Array<string> | null | undefined;
};

/** @internal */
export const Epmd$outboundSchema: z.ZodType<Epmd$Outbound, z.ZodTypeDef, Epmd> =
  z.object({
    names: z.nullable(z.array(z.string())).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Epmd$ {
  /** @deprecated use `Epmd$inboundSchema` instead. */
  export const inboundSchema = Epmd$inboundSchema;
  /** @deprecated use `Epmd$outboundSchema` instead. */
  export const outboundSchema = Epmd$outboundSchema;
  /** @deprecated use `Epmd$Outbound` instead. */
  export type Outbound = Epmd$Outbound;
}

export function epmdToJSON(epmd: Epmd): string {
  return JSON.stringify(Epmd$outboundSchema.parse(epmd));
}

export function epmdFromJSON(
  jsonString: string,
): SafeParseResult<Epmd, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Epmd$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Epmd' from JSON`,
  );
}
