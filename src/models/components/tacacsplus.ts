/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type TacacsPlus = {
  dataLength?: number | undefined;
  flags?: number | undefined;
  obfuscated?: string | undefined;
  seqNum?: number | undefined;
  sessionId?: number | undefined;
  type?: number | undefined;
  version?: number | undefined;
};

/** @internal */
export const TacacsPlus$inboundSchema: z.ZodType<
  TacacsPlus,
  z.ZodTypeDef,
  unknown
> = z.object({
  data_length: z.number().int().optional(),
  flags: z.number().int().optional(),
  obfuscated: z.string().optional(),
  seq_num: z.number().int().optional(),
  session_id: z.number().int().optional(),
  type: z.number().int().optional(),
  version: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "data_length": "dataLength",
    "seq_num": "seqNum",
    "session_id": "sessionId",
  });
});

/** @internal */
export type TacacsPlus$Outbound = {
  data_length?: number | undefined;
  flags?: number | undefined;
  obfuscated?: string | undefined;
  seq_num?: number | undefined;
  session_id?: number | undefined;
  type?: number | undefined;
  version?: number | undefined;
};

/** @internal */
export const TacacsPlus$outboundSchema: z.ZodType<
  TacacsPlus$Outbound,
  z.ZodTypeDef,
  TacacsPlus
> = z.object({
  dataLength: z.number().int().optional(),
  flags: z.number().int().optional(),
  obfuscated: z.string().optional(),
  seqNum: z.number().int().optional(),
  sessionId: z.number().int().optional(),
  type: z.number().int().optional(),
  version: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    dataLength: "data_length",
    seqNum: "seq_num",
    sessionId: "session_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TacacsPlus$ {
  /** @deprecated use `TacacsPlus$inboundSchema` instead. */
  export const inboundSchema = TacacsPlus$inboundSchema;
  /** @deprecated use `TacacsPlus$outboundSchema` instead. */
  export const outboundSchema = TacacsPlus$outboundSchema;
  /** @deprecated use `TacacsPlus$Outbound` instead. */
  export type Outbound = TacacsPlus$Outbound;
}

export function tacacsPlusToJSON(tacacsPlus: TacacsPlus): string {
  return JSON.stringify(TacacsPlus$outboundSchema.parse(tacacsPlus));
}

export function tacacsPlusFromJSON(
  jsonString: string,
): SafeParseResult<TacacsPlus, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TacacsPlus$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TacacsPlus' from JSON`,
  );
}
