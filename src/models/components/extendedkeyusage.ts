/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ExtendedKeyUsage = {
  any?: boolean | undefined;
  appleCodeSigning?: boolean | undefined;
  appleCodeSigningDevelopment?: boolean | undefined;
  appleCodeSigningThirdParty?: boolean | undefined;
  appleCryptoDevelopmentEnv?: boolean | undefined;
  appleCryptoEnv?: boolean | undefined;
  appleCryptoMaintenanceEnv?: boolean | undefined;
  appleCryptoProductionEnv?: boolean | undefined;
  appleCryptoQos?: boolean | undefined;
  appleCryptoTestEnv?: boolean | undefined;
  appleCryptoTier0Qos?: boolean | undefined;
  appleCryptoTier1Qos?: boolean | undefined;
  appleCryptoTier2Qos?: boolean | undefined;
  appleCryptoTier3Qos?: boolean | undefined;
  appleIchatEncryption?: boolean | undefined;
  appleIchatSigning?: boolean | undefined;
  appleResourceSigning?: boolean | undefined;
  appleSoftwareUpdateSigning?: boolean | undefined;
  appleSystemIdentity?: boolean | undefined;
  clientAuth?: boolean | undefined;
  codeSigning?: boolean | undefined;
  dvcs?: boolean | undefined;
  eapOverLan?: boolean | undefined;
  eapOverPpp?: boolean | undefined;
  emailProtection?: boolean | undefined;
  ipsecEndSystem?: boolean | undefined;
  ipsecIntermediateSystemUsage?: boolean | undefined;
  ipsecTunnel?: boolean | undefined;
  ipsecUser?: boolean | undefined;
  microsoftCaExchange?: boolean | undefined;
  microsoftCertTrustListSigning?: boolean | undefined;
  microsoftCspSignature?: boolean | undefined;
  microsoftDocumentSigning?: boolean | undefined;
  microsoftDrm?: boolean | undefined;
  microsoftDrmIndividualization?: boolean | undefined;
  microsoftEfsRecovery?: boolean | undefined;
  microsoftEmbeddedNtCrypto?: boolean | undefined;
  microsoftEncryptedFileSystem?: boolean | undefined;
  microsoftEnrollmentAgent?: boolean | undefined;
  microsoftKernelModeCodeSigning?: boolean | undefined;
  microsoftKeyRecovery21?: boolean | undefined;
  microsoftKeyRecovery3?: boolean | undefined;
  microsoftLicenseServer?: boolean | undefined;
  microsoftLicenses?: boolean | undefined;
  microsoftLifetimeSigning?: boolean | undefined;
  microsoftMobileDeviceSoftware?: boolean | undefined;
  microsoftNt5Crypto?: boolean | undefined;
  microsoftOemWhqlCrypto?: boolean | undefined;
  microsoftQualifiedSubordinate?: boolean | undefined;
  microsoftRootListSigner?: boolean | undefined;
  microsoftServerGatedCrypto?: boolean | undefined;
  microsoftSgcSerialized?: boolean | undefined;
  microsoftSmartDisplay?: boolean | undefined;
  microsoftSmartcardLogon?: boolean | undefined;
  microsoftSystemHealth?: boolean | undefined;
  microsoftSystemHealthLoophole?: boolean | undefined;
  microsoftTimestampSigning?: boolean | undefined;
  microsoftWhqlCrypto?: boolean | undefined;
  netscapeServerGatedCrypto?: boolean | undefined;
  ocspSigning?: boolean | undefined;
  sbgpCertAaServiceAuth?: boolean | undefined;
  serverAuth?: boolean | undefined;
  timeStamping?: boolean | undefined;
  unknown?: Array<string> | null | undefined;
};

/** @internal */
export const ExtendedKeyUsage$inboundSchema: z.ZodType<
  ExtendedKeyUsage,
  z.ZodTypeDef,
  unknown
> = z.object({
  any: z.boolean().optional(),
  apple_code_signing: z.boolean().optional(),
  apple_code_signing_development: z.boolean().optional(),
  apple_code_signing_third_party: z.boolean().optional(),
  apple_crypto_development_env: z.boolean().optional(),
  apple_crypto_env: z.boolean().optional(),
  apple_crypto_maintenance_env: z.boolean().optional(),
  apple_crypto_production_env: z.boolean().optional(),
  apple_crypto_qos: z.boolean().optional(),
  apple_crypto_test_env: z.boolean().optional(),
  apple_crypto_tier0_qos: z.boolean().optional(),
  apple_crypto_tier1_qos: z.boolean().optional(),
  apple_crypto_tier2_qos: z.boolean().optional(),
  apple_crypto_tier3_qos: z.boolean().optional(),
  apple_ichat_encryption: z.boolean().optional(),
  apple_ichat_signing: z.boolean().optional(),
  apple_resource_signing: z.boolean().optional(),
  apple_software_update_signing: z.boolean().optional(),
  apple_system_identity: z.boolean().optional(),
  client_auth: z.boolean().optional(),
  code_signing: z.boolean().optional(),
  dvcs: z.boolean().optional(),
  eap_over_lan: z.boolean().optional(),
  eap_over_ppp: z.boolean().optional(),
  email_protection: z.boolean().optional(),
  ipsec_end_system: z.boolean().optional(),
  ipsec_intermediate_system_usage: z.boolean().optional(),
  ipsec_tunnel: z.boolean().optional(),
  ipsec_user: z.boolean().optional(),
  microsoft_ca_exchange: z.boolean().optional(),
  microsoft_cert_trust_list_signing: z.boolean().optional(),
  microsoft_csp_signature: z.boolean().optional(),
  microsoft_document_signing: z.boolean().optional(),
  microsoft_drm: z.boolean().optional(),
  microsoft_drm_individualization: z.boolean().optional(),
  microsoft_efs_recovery: z.boolean().optional(),
  microsoft_embedded_nt_crypto: z.boolean().optional(),
  microsoft_encrypted_file_system: z.boolean().optional(),
  microsoft_enrollment_agent: z.boolean().optional(),
  microsoft_kernel_mode_code_signing: z.boolean().optional(),
  microsoft_key_recovery_21: z.boolean().optional(),
  microsoft_key_recovery_3: z.boolean().optional(),
  microsoft_license_server: z.boolean().optional(),
  microsoft_licenses: z.boolean().optional(),
  microsoft_lifetime_signing: z.boolean().optional(),
  microsoft_mobile_device_software: z.boolean().optional(),
  microsoft_nt5_crypto: z.boolean().optional(),
  microsoft_oem_whql_crypto: z.boolean().optional(),
  microsoft_qualified_subordinate: z.boolean().optional(),
  microsoft_root_list_signer: z.boolean().optional(),
  microsoft_server_gated_crypto: z.boolean().optional(),
  microsoft_sgc_serialized: z.boolean().optional(),
  microsoft_smart_display: z.boolean().optional(),
  microsoft_smartcard_logon: z.boolean().optional(),
  microsoft_system_health: z.boolean().optional(),
  microsoft_system_health_loophole: z.boolean().optional(),
  microsoft_timestamp_signing: z.boolean().optional(),
  microsoft_whql_crypto: z.boolean().optional(),
  netscape_server_gated_crypto: z.boolean().optional(),
  ocsp_signing: z.boolean().optional(),
  sbgp_cert_aa_service_auth: z.boolean().optional(),
  server_auth: z.boolean().optional(),
  time_stamping: z.boolean().optional(),
  unknown: z.nullable(z.array(z.string())).optional(),
}).transform((v) => {
  return remap$(v, {
    "apple_code_signing": "appleCodeSigning",
    "apple_code_signing_development": "appleCodeSigningDevelopment",
    "apple_code_signing_third_party": "appleCodeSigningThirdParty",
    "apple_crypto_development_env": "appleCryptoDevelopmentEnv",
    "apple_crypto_env": "appleCryptoEnv",
    "apple_crypto_maintenance_env": "appleCryptoMaintenanceEnv",
    "apple_crypto_production_env": "appleCryptoProductionEnv",
    "apple_crypto_qos": "appleCryptoQos",
    "apple_crypto_test_env": "appleCryptoTestEnv",
    "apple_crypto_tier0_qos": "appleCryptoTier0Qos",
    "apple_crypto_tier1_qos": "appleCryptoTier1Qos",
    "apple_crypto_tier2_qos": "appleCryptoTier2Qos",
    "apple_crypto_tier3_qos": "appleCryptoTier3Qos",
    "apple_ichat_encryption": "appleIchatEncryption",
    "apple_ichat_signing": "appleIchatSigning",
    "apple_resource_signing": "appleResourceSigning",
    "apple_software_update_signing": "appleSoftwareUpdateSigning",
    "apple_system_identity": "appleSystemIdentity",
    "client_auth": "clientAuth",
    "code_signing": "codeSigning",
    "eap_over_lan": "eapOverLan",
    "eap_over_ppp": "eapOverPpp",
    "email_protection": "emailProtection",
    "ipsec_end_system": "ipsecEndSystem",
    "ipsec_intermediate_system_usage": "ipsecIntermediateSystemUsage",
    "ipsec_tunnel": "ipsecTunnel",
    "ipsec_user": "ipsecUser",
    "microsoft_ca_exchange": "microsoftCaExchange",
    "microsoft_cert_trust_list_signing": "microsoftCertTrustListSigning",
    "microsoft_csp_signature": "microsoftCspSignature",
    "microsoft_document_signing": "microsoftDocumentSigning",
    "microsoft_drm": "microsoftDrm",
    "microsoft_drm_individualization": "microsoftDrmIndividualization",
    "microsoft_efs_recovery": "microsoftEfsRecovery",
    "microsoft_embedded_nt_crypto": "microsoftEmbeddedNtCrypto",
    "microsoft_encrypted_file_system": "microsoftEncryptedFileSystem",
    "microsoft_enrollment_agent": "microsoftEnrollmentAgent",
    "microsoft_kernel_mode_code_signing": "microsoftKernelModeCodeSigning",
    "microsoft_key_recovery_21": "microsoftKeyRecovery21",
    "microsoft_key_recovery_3": "microsoftKeyRecovery3",
    "microsoft_license_server": "microsoftLicenseServer",
    "microsoft_licenses": "microsoftLicenses",
    "microsoft_lifetime_signing": "microsoftLifetimeSigning",
    "microsoft_mobile_device_software": "microsoftMobileDeviceSoftware",
    "microsoft_nt5_crypto": "microsoftNt5Crypto",
    "microsoft_oem_whql_crypto": "microsoftOemWhqlCrypto",
    "microsoft_qualified_subordinate": "microsoftQualifiedSubordinate",
    "microsoft_root_list_signer": "microsoftRootListSigner",
    "microsoft_server_gated_crypto": "microsoftServerGatedCrypto",
    "microsoft_sgc_serialized": "microsoftSgcSerialized",
    "microsoft_smart_display": "microsoftSmartDisplay",
    "microsoft_smartcard_logon": "microsoftSmartcardLogon",
    "microsoft_system_health": "microsoftSystemHealth",
    "microsoft_system_health_loophole": "microsoftSystemHealthLoophole",
    "microsoft_timestamp_signing": "microsoftTimestampSigning",
    "microsoft_whql_crypto": "microsoftWhqlCrypto",
    "netscape_server_gated_crypto": "netscapeServerGatedCrypto",
    "ocsp_signing": "ocspSigning",
    "sbgp_cert_aa_service_auth": "sbgpCertAaServiceAuth",
    "server_auth": "serverAuth",
    "time_stamping": "timeStamping",
  });
});

/** @internal */
export type ExtendedKeyUsage$Outbound = {
  any?: boolean | undefined;
  apple_code_signing?: boolean | undefined;
  apple_code_signing_development?: boolean | undefined;
  apple_code_signing_third_party?: boolean | undefined;
  apple_crypto_development_env?: boolean | undefined;
  apple_crypto_env?: boolean | undefined;
  apple_crypto_maintenance_env?: boolean | undefined;
  apple_crypto_production_env?: boolean | undefined;
  apple_crypto_qos?: boolean | undefined;
  apple_crypto_test_env?: boolean | undefined;
  apple_crypto_tier0_qos?: boolean | undefined;
  apple_crypto_tier1_qos?: boolean | undefined;
  apple_crypto_tier2_qos?: boolean | undefined;
  apple_crypto_tier3_qos?: boolean | undefined;
  apple_ichat_encryption?: boolean | undefined;
  apple_ichat_signing?: boolean | undefined;
  apple_resource_signing?: boolean | undefined;
  apple_software_update_signing?: boolean | undefined;
  apple_system_identity?: boolean | undefined;
  client_auth?: boolean | undefined;
  code_signing?: boolean | undefined;
  dvcs?: boolean | undefined;
  eap_over_lan?: boolean | undefined;
  eap_over_ppp?: boolean | undefined;
  email_protection?: boolean | undefined;
  ipsec_end_system?: boolean | undefined;
  ipsec_intermediate_system_usage?: boolean | undefined;
  ipsec_tunnel?: boolean | undefined;
  ipsec_user?: boolean | undefined;
  microsoft_ca_exchange?: boolean | undefined;
  microsoft_cert_trust_list_signing?: boolean | undefined;
  microsoft_csp_signature?: boolean | undefined;
  microsoft_document_signing?: boolean | undefined;
  microsoft_drm?: boolean | undefined;
  microsoft_drm_individualization?: boolean | undefined;
  microsoft_efs_recovery?: boolean | undefined;
  microsoft_embedded_nt_crypto?: boolean | undefined;
  microsoft_encrypted_file_system?: boolean | undefined;
  microsoft_enrollment_agent?: boolean | undefined;
  microsoft_kernel_mode_code_signing?: boolean | undefined;
  microsoft_key_recovery_21?: boolean | undefined;
  microsoft_key_recovery_3?: boolean | undefined;
  microsoft_license_server?: boolean | undefined;
  microsoft_licenses?: boolean | undefined;
  microsoft_lifetime_signing?: boolean | undefined;
  microsoft_mobile_device_software?: boolean | undefined;
  microsoft_nt5_crypto?: boolean | undefined;
  microsoft_oem_whql_crypto?: boolean | undefined;
  microsoft_qualified_subordinate?: boolean | undefined;
  microsoft_root_list_signer?: boolean | undefined;
  microsoft_server_gated_crypto?: boolean | undefined;
  microsoft_sgc_serialized?: boolean | undefined;
  microsoft_smart_display?: boolean | undefined;
  microsoft_smartcard_logon?: boolean | undefined;
  microsoft_system_health?: boolean | undefined;
  microsoft_system_health_loophole?: boolean | undefined;
  microsoft_timestamp_signing?: boolean | undefined;
  microsoft_whql_crypto?: boolean | undefined;
  netscape_server_gated_crypto?: boolean | undefined;
  ocsp_signing?: boolean | undefined;
  sbgp_cert_aa_service_auth?: boolean | undefined;
  server_auth?: boolean | undefined;
  time_stamping?: boolean | undefined;
  unknown?: Array<string> | null | undefined;
};

/** @internal */
export const ExtendedKeyUsage$outboundSchema: z.ZodType<
  ExtendedKeyUsage$Outbound,
  z.ZodTypeDef,
  ExtendedKeyUsage
> = z.object({
  any: z.boolean().optional(),
  appleCodeSigning: z.boolean().optional(),
  appleCodeSigningDevelopment: z.boolean().optional(),
  appleCodeSigningThirdParty: z.boolean().optional(),
  appleCryptoDevelopmentEnv: z.boolean().optional(),
  appleCryptoEnv: z.boolean().optional(),
  appleCryptoMaintenanceEnv: z.boolean().optional(),
  appleCryptoProductionEnv: z.boolean().optional(),
  appleCryptoQos: z.boolean().optional(),
  appleCryptoTestEnv: z.boolean().optional(),
  appleCryptoTier0Qos: z.boolean().optional(),
  appleCryptoTier1Qos: z.boolean().optional(),
  appleCryptoTier2Qos: z.boolean().optional(),
  appleCryptoTier3Qos: z.boolean().optional(),
  appleIchatEncryption: z.boolean().optional(),
  appleIchatSigning: z.boolean().optional(),
  appleResourceSigning: z.boolean().optional(),
  appleSoftwareUpdateSigning: z.boolean().optional(),
  appleSystemIdentity: z.boolean().optional(),
  clientAuth: z.boolean().optional(),
  codeSigning: z.boolean().optional(),
  dvcs: z.boolean().optional(),
  eapOverLan: z.boolean().optional(),
  eapOverPpp: z.boolean().optional(),
  emailProtection: z.boolean().optional(),
  ipsecEndSystem: z.boolean().optional(),
  ipsecIntermediateSystemUsage: z.boolean().optional(),
  ipsecTunnel: z.boolean().optional(),
  ipsecUser: z.boolean().optional(),
  microsoftCaExchange: z.boolean().optional(),
  microsoftCertTrustListSigning: z.boolean().optional(),
  microsoftCspSignature: z.boolean().optional(),
  microsoftDocumentSigning: z.boolean().optional(),
  microsoftDrm: z.boolean().optional(),
  microsoftDrmIndividualization: z.boolean().optional(),
  microsoftEfsRecovery: z.boolean().optional(),
  microsoftEmbeddedNtCrypto: z.boolean().optional(),
  microsoftEncryptedFileSystem: z.boolean().optional(),
  microsoftEnrollmentAgent: z.boolean().optional(),
  microsoftKernelModeCodeSigning: z.boolean().optional(),
  microsoftKeyRecovery21: z.boolean().optional(),
  microsoftKeyRecovery3: z.boolean().optional(),
  microsoftLicenseServer: z.boolean().optional(),
  microsoftLicenses: z.boolean().optional(),
  microsoftLifetimeSigning: z.boolean().optional(),
  microsoftMobileDeviceSoftware: z.boolean().optional(),
  microsoftNt5Crypto: z.boolean().optional(),
  microsoftOemWhqlCrypto: z.boolean().optional(),
  microsoftQualifiedSubordinate: z.boolean().optional(),
  microsoftRootListSigner: z.boolean().optional(),
  microsoftServerGatedCrypto: z.boolean().optional(),
  microsoftSgcSerialized: z.boolean().optional(),
  microsoftSmartDisplay: z.boolean().optional(),
  microsoftSmartcardLogon: z.boolean().optional(),
  microsoftSystemHealth: z.boolean().optional(),
  microsoftSystemHealthLoophole: z.boolean().optional(),
  microsoftTimestampSigning: z.boolean().optional(),
  microsoftWhqlCrypto: z.boolean().optional(),
  netscapeServerGatedCrypto: z.boolean().optional(),
  ocspSigning: z.boolean().optional(),
  sbgpCertAaServiceAuth: z.boolean().optional(),
  serverAuth: z.boolean().optional(),
  timeStamping: z.boolean().optional(),
  unknown: z.nullable(z.array(z.string())).optional(),
}).transform((v) => {
  return remap$(v, {
    appleCodeSigning: "apple_code_signing",
    appleCodeSigningDevelopment: "apple_code_signing_development",
    appleCodeSigningThirdParty: "apple_code_signing_third_party",
    appleCryptoDevelopmentEnv: "apple_crypto_development_env",
    appleCryptoEnv: "apple_crypto_env",
    appleCryptoMaintenanceEnv: "apple_crypto_maintenance_env",
    appleCryptoProductionEnv: "apple_crypto_production_env",
    appleCryptoQos: "apple_crypto_qos",
    appleCryptoTestEnv: "apple_crypto_test_env",
    appleCryptoTier0Qos: "apple_crypto_tier0_qos",
    appleCryptoTier1Qos: "apple_crypto_tier1_qos",
    appleCryptoTier2Qos: "apple_crypto_tier2_qos",
    appleCryptoTier3Qos: "apple_crypto_tier3_qos",
    appleIchatEncryption: "apple_ichat_encryption",
    appleIchatSigning: "apple_ichat_signing",
    appleResourceSigning: "apple_resource_signing",
    appleSoftwareUpdateSigning: "apple_software_update_signing",
    appleSystemIdentity: "apple_system_identity",
    clientAuth: "client_auth",
    codeSigning: "code_signing",
    eapOverLan: "eap_over_lan",
    eapOverPpp: "eap_over_ppp",
    emailProtection: "email_protection",
    ipsecEndSystem: "ipsec_end_system",
    ipsecIntermediateSystemUsage: "ipsec_intermediate_system_usage",
    ipsecTunnel: "ipsec_tunnel",
    ipsecUser: "ipsec_user",
    microsoftCaExchange: "microsoft_ca_exchange",
    microsoftCertTrustListSigning: "microsoft_cert_trust_list_signing",
    microsoftCspSignature: "microsoft_csp_signature",
    microsoftDocumentSigning: "microsoft_document_signing",
    microsoftDrm: "microsoft_drm",
    microsoftDrmIndividualization: "microsoft_drm_individualization",
    microsoftEfsRecovery: "microsoft_efs_recovery",
    microsoftEmbeddedNtCrypto: "microsoft_embedded_nt_crypto",
    microsoftEncryptedFileSystem: "microsoft_encrypted_file_system",
    microsoftEnrollmentAgent: "microsoft_enrollment_agent",
    microsoftKernelModeCodeSigning: "microsoft_kernel_mode_code_signing",
    microsoftKeyRecovery21: "microsoft_key_recovery_21",
    microsoftKeyRecovery3: "microsoft_key_recovery_3",
    microsoftLicenseServer: "microsoft_license_server",
    microsoftLicenses: "microsoft_licenses",
    microsoftLifetimeSigning: "microsoft_lifetime_signing",
    microsoftMobileDeviceSoftware: "microsoft_mobile_device_software",
    microsoftNt5Crypto: "microsoft_nt5_crypto",
    microsoftOemWhqlCrypto: "microsoft_oem_whql_crypto",
    microsoftQualifiedSubordinate: "microsoft_qualified_subordinate",
    microsoftRootListSigner: "microsoft_root_list_signer",
    microsoftServerGatedCrypto: "microsoft_server_gated_crypto",
    microsoftSgcSerialized: "microsoft_sgc_serialized",
    microsoftSmartDisplay: "microsoft_smart_display",
    microsoftSmartcardLogon: "microsoft_smartcard_logon",
    microsoftSystemHealth: "microsoft_system_health",
    microsoftSystemHealthLoophole: "microsoft_system_health_loophole",
    microsoftTimestampSigning: "microsoft_timestamp_signing",
    microsoftWhqlCrypto: "microsoft_whql_crypto",
    netscapeServerGatedCrypto: "netscape_server_gated_crypto",
    ocspSigning: "ocsp_signing",
    sbgpCertAaServiceAuth: "sbgp_cert_aa_service_auth",
    serverAuth: "server_auth",
    timeStamping: "time_stamping",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExtendedKeyUsage$ {
  /** @deprecated use `ExtendedKeyUsage$inboundSchema` instead. */
  export const inboundSchema = ExtendedKeyUsage$inboundSchema;
  /** @deprecated use `ExtendedKeyUsage$outboundSchema` instead. */
  export const outboundSchema = ExtendedKeyUsage$outboundSchema;
  /** @deprecated use `ExtendedKeyUsage$Outbound` instead. */
  export type Outbound = ExtendedKeyUsage$Outbound;
}

export function extendedKeyUsageToJSON(
  extendedKeyUsage: ExtendedKeyUsage,
): string {
  return JSON.stringify(
    ExtendedKeyUsage$outboundSchema.parse(extendedKeyUsage),
  );
}

export function extendedKeyUsageFromJSON(
  jsonString: string,
): SafeParseResult<ExtendedKeyUsage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ExtendedKeyUsage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ExtendedKeyUsage' from JSON`,
  );
}
