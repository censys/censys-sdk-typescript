/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Host,
  Host$inboundSchema,
  Host$Outbound,
  Host$outboundSchema,
} from "./host.js";

export type HostAsset = {
  extensions: { [k: string]: any };
  resource: Host;
};

/** @internal */
export const HostAsset$inboundSchema: z.ZodType<
  HostAsset,
  z.ZodTypeDef,
  unknown
> = z.object({
  extensions: z.record(z.any()),
  resource: Host$inboundSchema,
});

/** @internal */
export type HostAsset$Outbound = {
  extensions: { [k: string]: any };
  resource: Host$Outbound;
};

/** @internal */
export const HostAsset$outboundSchema: z.ZodType<
  HostAsset$Outbound,
  z.ZodTypeDef,
  HostAsset
> = z.object({
  extensions: z.record(z.any()),
  resource: Host$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HostAsset$ {
  /** @deprecated use `HostAsset$inboundSchema` instead. */
  export const inboundSchema = HostAsset$inboundSchema;
  /** @deprecated use `HostAsset$outboundSchema` instead. */
  export const outboundSchema = HostAsset$outboundSchema;
  /** @deprecated use `HostAsset$Outbound` instead. */
  export type Outbound = HostAsset$Outbound;
}

export function hostAssetToJSON(hostAsset: HostAsset): string {
  return JSON.stringify(HostAsset$outboundSchema.parse(hostAsset));
}

export function hostAssetFromJSON(
  jsonString: string,
): SafeParseResult<HostAsset, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HostAsset$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HostAsset' from JSON`,
  );
}
