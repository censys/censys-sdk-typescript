/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  IpmiSessionHeaderAuthType,
  IpmiSessionHeaderAuthType$inboundSchema,
  IpmiSessionHeaderAuthType$Outbound,
  IpmiSessionHeaderAuthType$outboundSchema,
} from "./ipmisessionheaderauthtype.js";

export type IpmiSessionHeader = {
  /**
   * The 16-byte authentication code; not present if auth_type is None.
   */
  authCode?: string | undefined;
  authType?: IpmiSessionHeaderAuthType | undefined;
  /**
   * The ID of this sessiod.
   */
  sessionId?: number | undefined;
  /**
   * The session sequence number of this packet in the session
   */
  sessionSequenceNumber?: number | undefined;
};

/** @internal */
export const IpmiSessionHeader$inboundSchema: z.ZodType<
  IpmiSessionHeader,
  z.ZodTypeDef,
  unknown
> = z.object({
  auth_code: z.string().optional(),
  auth_type: IpmiSessionHeaderAuthType$inboundSchema.optional(),
  session_id: z.number().int().optional(),
  session_sequence_number: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "auth_code": "authCode",
    "auth_type": "authType",
    "session_id": "sessionId",
    "session_sequence_number": "sessionSequenceNumber",
  });
});

/** @internal */
export type IpmiSessionHeader$Outbound = {
  auth_code?: string | undefined;
  auth_type?: IpmiSessionHeaderAuthType$Outbound | undefined;
  session_id?: number | undefined;
  session_sequence_number?: number | undefined;
};

/** @internal */
export const IpmiSessionHeader$outboundSchema: z.ZodType<
  IpmiSessionHeader$Outbound,
  z.ZodTypeDef,
  IpmiSessionHeader
> = z.object({
  authCode: z.string().optional(),
  authType: IpmiSessionHeaderAuthType$outboundSchema.optional(),
  sessionId: z.number().int().optional(),
  sessionSequenceNumber: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    authCode: "auth_code",
    authType: "auth_type",
    sessionId: "session_id",
    sessionSequenceNumber: "session_sequence_number",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IpmiSessionHeader$ {
  /** @deprecated use `IpmiSessionHeader$inboundSchema` instead. */
  export const inboundSchema = IpmiSessionHeader$inboundSchema;
  /** @deprecated use `IpmiSessionHeader$outboundSchema` instead. */
  export const outboundSchema = IpmiSessionHeader$outboundSchema;
  /** @deprecated use `IpmiSessionHeader$Outbound` instead. */
  export type Outbound = IpmiSessionHeader$Outbound;
}

export function ipmiSessionHeaderToJSON(
  ipmiSessionHeader: IpmiSessionHeader,
): string {
  return JSON.stringify(
    IpmiSessionHeader$outboundSchema.parse(ipmiSessionHeader),
  );
}

export function ipmiSessionHeaderFromJSON(
  jsonString: string,
): SafeParseResult<IpmiSessionHeader, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => IpmiSessionHeader$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'IpmiSessionHeader' from JSON`,
  );
}
