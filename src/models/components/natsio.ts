/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type NatsIo = {
  authRequired?: boolean | undefined;
  cluster?: string | undefined;
  connectUrls?: Array<string> | null | undefined;
  domain?: string | undefined;
  gitCommit?: string | undefined;
  go?: string | undefined;
  headers?: boolean | undefined;
  jetstream?: boolean | undefined;
  proto?: number | undefined;
  serverId?: string | undefined;
  serverName?: string | undefined;
  tlsAvailable?: boolean | undefined;
  tlsRequired?: boolean | undefined;
  tlsVerify?: boolean | undefined;
  version?: string | undefined;
  wsConnectUrls?: Array<string> | null | undefined;
};

/** @internal */
export const NatsIo$inboundSchema: z.ZodType<NatsIo, z.ZodTypeDef, unknown> = z
  .object({
    auth_required: z.boolean().optional(),
    cluster: z.string().optional(),
    connect_urls: z.nullable(z.array(z.string())).optional(),
    domain: z.string().optional(),
    git_commit: z.string().optional(),
    go: z.string().optional(),
    headers: z.boolean().optional(),
    jetstream: z.boolean().optional(),
    proto: z.number().int().optional(),
    server_id: z.string().optional(),
    server_name: z.string().optional(),
    tls_available: z.boolean().optional(),
    tls_required: z.boolean().optional(),
    tls_verify: z.boolean().optional(),
    version: z.string().optional(),
    ws_connect_urls: z.nullable(z.array(z.string())).optional(),
  }).transform((v) => {
    return remap$(v, {
      "auth_required": "authRequired",
      "connect_urls": "connectUrls",
      "git_commit": "gitCommit",
      "server_id": "serverId",
      "server_name": "serverName",
      "tls_available": "tlsAvailable",
      "tls_required": "tlsRequired",
      "tls_verify": "tlsVerify",
      "ws_connect_urls": "wsConnectUrls",
    });
  });

/** @internal */
export type NatsIo$Outbound = {
  auth_required?: boolean | undefined;
  cluster?: string | undefined;
  connect_urls?: Array<string> | null | undefined;
  domain?: string | undefined;
  git_commit?: string | undefined;
  go?: string | undefined;
  headers?: boolean | undefined;
  jetstream?: boolean | undefined;
  proto?: number | undefined;
  server_id?: string | undefined;
  server_name?: string | undefined;
  tls_available?: boolean | undefined;
  tls_required?: boolean | undefined;
  tls_verify?: boolean | undefined;
  version?: string | undefined;
  ws_connect_urls?: Array<string> | null | undefined;
};

/** @internal */
export const NatsIo$outboundSchema: z.ZodType<
  NatsIo$Outbound,
  z.ZodTypeDef,
  NatsIo
> = z.object({
  authRequired: z.boolean().optional(),
  cluster: z.string().optional(),
  connectUrls: z.nullable(z.array(z.string())).optional(),
  domain: z.string().optional(),
  gitCommit: z.string().optional(),
  go: z.string().optional(),
  headers: z.boolean().optional(),
  jetstream: z.boolean().optional(),
  proto: z.number().int().optional(),
  serverId: z.string().optional(),
  serverName: z.string().optional(),
  tlsAvailable: z.boolean().optional(),
  tlsRequired: z.boolean().optional(),
  tlsVerify: z.boolean().optional(),
  version: z.string().optional(),
  wsConnectUrls: z.nullable(z.array(z.string())).optional(),
}).transform((v) => {
  return remap$(v, {
    authRequired: "auth_required",
    connectUrls: "connect_urls",
    gitCommit: "git_commit",
    serverId: "server_id",
    serverName: "server_name",
    tlsAvailable: "tls_available",
    tlsRequired: "tls_required",
    tlsVerify: "tls_verify",
    wsConnectUrls: "ws_connect_urls",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NatsIo$ {
  /** @deprecated use `NatsIo$inboundSchema` instead. */
  export const inboundSchema = NatsIo$inboundSchema;
  /** @deprecated use `NatsIo$outboundSchema` instead. */
  export const outboundSchema = NatsIo$outboundSchema;
  /** @deprecated use `NatsIo$Outbound` instead. */
  export type Outbound = NatsIo$Outbound;
}

export function natsIoToJSON(natsIo: NatsIo): string {
  return JSON.stringify(NatsIo$outboundSchema.parse(natsIo));
}

export function natsIoFromJSON(
  jsonString: string,
): SafeParseResult<NatsIo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NatsIo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NatsIo' from JSON`,
  );
}
