/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  HttpRepeatedHeaders,
  HttpRepeatedHeaders$inboundSchema,
  HttpRepeatedHeaders$Outbound,
  HttpRepeatedHeaders$outboundSchema,
} from "./httprepeatedheaders.js";

export type Ssdp = {
  headers?: { [k: string]: HttpRepeatedHeaders } | undefined;
  upnpUrl?: string | undefined;
};

/** @internal */
export const Ssdp$inboundSchema: z.ZodType<Ssdp, z.ZodTypeDef, unknown> = z
  .object({
    headers: z.record(HttpRepeatedHeaders$inboundSchema).optional(),
    upnp_url: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "upnp_url": "upnpUrl",
    });
  });

/** @internal */
export type Ssdp$Outbound = {
  headers?: { [k: string]: HttpRepeatedHeaders$Outbound } | undefined;
  upnp_url?: string | undefined;
};

/** @internal */
export const Ssdp$outboundSchema: z.ZodType<Ssdp$Outbound, z.ZodTypeDef, Ssdp> =
  z.object({
    headers: z.record(HttpRepeatedHeaders$outboundSchema).optional(),
    upnpUrl: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      upnpUrl: "upnp_url",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Ssdp$ {
  /** @deprecated use `Ssdp$inboundSchema` instead. */
  export const inboundSchema = Ssdp$inboundSchema;
  /** @deprecated use `Ssdp$outboundSchema` instead. */
  export const outboundSchema = Ssdp$outboundSchema;
  /** @deprecated use `Ssdp$Outbound` instead. */
  export type Outbound = Ssdp$Outbound;
}

export function ssdpToJSON(ssdp: Ssdp): string {
  return JSON.stringify(Ssdp$outboundSchema.parse(ssdp));
}

export function ssdpFromJSON(
  jsonString: string,
): SafeParseResult<Ssdp, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Ssdp$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Ssdp' from JSON`,
  );
}
