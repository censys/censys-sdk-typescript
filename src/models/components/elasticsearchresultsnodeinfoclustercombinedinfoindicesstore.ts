/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ElasticSearchResultsNodeInfoClusterCombinedInfoIndicesStore = {
  reservedInBytes?: number | undefined;
  sizeInBytes?: number | undefined;
};

/** @internal */
export const ElasticSearchResultsNodeInfoClusterCombinedInfoIndicesStore$inboundSchema:
  z.ZodType<
    ElasticSearchResultsNodeInfoClusterCombinedInfoIndicesStore,
    z.ZodTypeDef,
    unknown
  > = z.object({
    reserved_in_bytes: z.number().int().optional(),
    size_in_bytes: z.number().int().optional(),
  }).transform((v) => {
    return remap$(v, {
      "reserved_in_bytes": "reservedInBytes",
      "size_in_bytes": "sizeInBytes",
    });
  });

/** @internal */
export type ElasticSearchResultsNodeInfoClusterCombinedInfoIndicesStore$Outbound =
  {
    reserved_in_bytes?: number | undefined;
    size_in_bytes?: number | undefined;
  };

/** @internal */
export const ElasticSearchResultsNodeInfoClusterCombinedInfoIndicesStore$outboundSchema:
  z.ZodType<
    ElasticSearchResultsNodeInfoClusterCombinedInfoIndicesStore$Outbound,
    z.ZodTypeDef,
    ElasticSearchResultsNodeInfoClusterCombinedInfoIndicesStore
  > = z.object({
    reservedInBytes: z.number().int().optional(),
    sizeInBytes: z.number().int().optional(),
  }).transform((v) => {
    return remap$(v, {
      reservedInBytes: "reserved_in_bytes",
      sizeInBytes: "size_in_bytes",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ElasticSearchResultsNodeInfoClusterCombinedInfoIndicesStore$ {
  /** @deprecated use `ElasticSearchResultsNodeInfoClusterCombinedInfoIndicesStore$inboundSchema` instead. */
  export const inboundSchema =
    ElasticSearchResultsNodeInfoClusterCombinedInfoIndicesStore$inboundSchema;
  /** @deprecated use `ElasticSearchResultsNodeInfoClusterCombinedInfoIndicesStore$outboundSchema` instead. */
  export const outboundSchema =
    ElasticSearchResultsNodeInfoClusterCombinedInfoIndicesStore$outboundSchema;
  /** @deprecated use `ElasticSearchResultsNodeInfoClusterCombinedInfoIndicesStore$Outbound` instead. */
  export type Outbound =
    ElasticSearchResultsNodeInfoClusterCombinedInfoIndicesStore$Outbound;
}

export function elasticSearchResultsNodeInfoClusterCombinedInfoIndicesStoreToJSON(
  elasticSearchResultsNodeInfoClusterCombinedInfoIndicesStore:
    ElasticSearchResultsNodeInfoClusterCombinedInfoIndicesStore,
): string {
  return JSON.stringify(
    ElasticSearchResultsNodeInfoClusterCombinedInfoIndicesStore$outboundSchema
      .parse(elasticSearchResultsNodeInfoClusterCombinedInfoIndicesStore),
  );
}

export function elasticSearchResultsNodeInfoClusterCombinedInfoIndicesStoreFromJSON(
  jsonString: string,
): SafeParseResult<
  ElasticSearchResultsNodeInfoClusterCombinedInfoIndicesStore,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ElasticSearchResultsNodeInfoClusterCombinedInfoIndicesStore$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'ElasticSearchResultsNodeInfoClusterCombinedInfoIndicesStore' from JSON`,
  );
}
