/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  KubernetesRoleRule,
  KubernetesRoleRule$inboundSchema,
  KubernetesRoleRule$Outbound,
  KubernetesRoleRule$outboundSchema,
} from "./kubernetesrolerule.js";

export type KubernetesRole = {
  name?: string | undefined;
  /**
   * Rules set for this role.
   */
  rules?: Array<KubernetesRoleRule> | null | undefined;
};

/** @internal */
export const KubernetesRole$inboundSchema: z.ZodType<
  KubernetesRole,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  rules: z.nullable(z.array(KubernetesRoleRule$inboundSchema)).optional(),
});

/** @internal */
export type KubernetesRole$Outbound = {
  name?: string | undefined;
  rules?: Array<KubernetesRoleRule$Outbound> | null | undefined;
};

/** @internal */
export const KubernetesRole$outboundSchema: z.ZodType<
  KubernetesRole$Outbound,
  z.ZodTypeDef,
  KubernetesRole
> = z.object({
  name: z.string().optional(),
  rules: z.nullable(z.array(KubernetesRoleRule$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace KubernetesRole$ {
  /** @deprecated use `KubernetesRole$inboundSchema` instead. */
  export const inboundSchema = KubernetesRole$inboundSchema;
  /** @deprecated use `KubernetesRole$outboundSchema` instead. */
  export const outboundSchema = KubernetesRole$outboundSchema;
  /** @deprecated use `KubernetesRole$Outbound` instead. */
  export type Outbound = KubernetesRole$Outbound;
}

export function kubernetesRoleToJSON(kubernetesRole: KubernetesRole): string {
  return JSON.stringify(KubernetesRole$outboundSchema.parse(kubernetesRole));
}

export function kubernetesRoleFromJSON(
  jsonString: string,
): SafeParseResult<KubernetesRole, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => KubernetesRole$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'KubernetesRole' from JSON`,
  );
}
