/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Krpc = {
  pingResponseId?: string | undefined;
};

/** @internal */
export const Krpc$inboundSchema: z.ZodType<Krpc, z.ZodTypeDef, unknown> = z
  .object({
    ping_response_id: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "ping_response_id": "pingResponseId",
    });
  });

/** @internal */
export type Krpc$Outbound = {
  ping_response_id?: string | undefined;
};

/** @internal */
export const Krpc$outboundSchema: z.ZodType<Krpc$Outbound, z.ZodTypeDef, Krpc> =
  z.object({
    pingResponseId: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      pingResponseId: "ping_response_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Krpc$ {
  /** @deprecated use `Krpc$inboundSchema` instead. */
  export const inboundSchema = Krpc$inboundSchema;
  /** @deprecated use `Krpc$outboundSchema` instead. */
  export const outboundSchema = Krpc$outboundSchema;
  /** @deprecated use `Krpc$Outbound` instead. */
  export type Outbound = Krpc$Outbound;
}

export function krpcToJSON(krpc: Krpc): string {
  return JSON.stringify(Krpc$outboundSchema.parse(krpc));
}

export function krpcFromJSON(
  jsonString: string,
): SafeParseResult<Krpc, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Krpc$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Krpc' from JSON`,
  );
}
