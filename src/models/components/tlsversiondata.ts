/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const Version = {
  Unknown: "unknown",
  SsLv2: "ss_lv_2",
  SsLv3: "ss_lv_3",
  Tlsv10: "tlsv1_0",
  Tlsv11: "tlsv1_1",
  Tlsv12: "tlsv1_2",
  Tlsv13: "tlsv1_3",
  Dtlsv10: "dtlsv1_0",
  Dtlsv12: "dtlsv1_2",
  Dtlsv13: "dtlsv1_3",
} as const;
export type Version = ClosedEnum<typeof Version>;

export type TlsVersionData = {
  ja3s?: string | undefined;
  ja4s?: string | undefined;
  version?: Version | undefined;
};

/** @internal */
export const Version$inboundSchema: z.ZodNativeEnum<typeof Version> = z
  .nativeEnum(Version);

/** @internal */
export const Version$outboundSchema: z.ZodNativeEnum<typeof Version> =
  Version$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Version$ {
  /** @deprecated use `Version$inboundSchema` instead. */
  export const inboundSchema = Version$inboundSchema;
  /** @deprecated use `Version$outboundSchema` instead. */
  export const outboundSchema = Version$outboundSchema;
}

/** @internal */
export const TlsVersionData$inboundSchema: z.ZodType<
  TlsVersionData,
  z.ZodTypeDef,
  unknown
> = z.object({
  ja3s: z.string().optional(),
  ja4s: z.string().optional(),
  version: Version$inboundSchema.optional(),
});

/** @internal */
export type TlsVersionData$Outbound = {
  ja3s?: string | undefined;
  ja4s?: string | undefined;
  version?: string | undefined;
};

/** @internal */
export const TlsVersionData$outboundSchema: z.ZodType<
  TlsVersionData$Outbound,
  z.ZodTypeDef,
  TlsVersionData
> = z.object({
  ja3s: z.string().optional(),
  ja4s: z.string().optional(),
  version: Version$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TlsVersionData$ {
  /** @deprecated use `TlsVersionData$inboundSchema` instead. */
  export const inboundSchema = TlsVersionData$inboundSchema;
  /** @deprecated use `TlsVersionData$outboundSchema` instead. */
  export const outboundSchema = TlsVersionData$outboundSchema;
  /** @deprecated use `TlsVersionData$Outbound` instead. */
  export type Outbound = TlsVersionData$Outbound;
}

export function tlsVersionDataToJSON(tlsVersionData: TlsVersionData): string {
  return JSON.stringify(TlsVersionData$outboundSchema.parse(tlsVersionData));
}

export function tlsVersionDataFromJSON(
  jsonString: string,
): SafeParseResult<TlsVersionData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TlsVersionData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TlsVersionData' from JSON`,
  );
}
