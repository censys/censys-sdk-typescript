/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type VncKeyValue = {
  name?: string | undefined;
  value?: number | undefined;
};

/** @internal */
export const VncKeyValue$inboundSchema: z.ZodType<
  VncKeyValue,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  value: z.number().int().optional(),
});

/** @internal */
export type VncKeyValue$Outbound = {
  name?: string | undefined;
  value?: number | undefined;
};

/** @internal */
export const VncKeyValue$outboundSchema: z.ZodType<
  VncKeyValue$Outbound,
  z.ZodTypeDef,
  VncKeyValue
> = z.object({
  name: z.string().optional(),
  value: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VncKeyValue$ {
  /** @deprecated use `VncKeyValue$inboundSchema` instead. */
  export const inboundSchema = VncKeyValue$inboundSchema;
  /** @deprecated use `VncKeyValue$outboundSchema` instead. */
  export const outboundSchema = VncKeyValue$outboundSchema;
  /** @deprecated use `VncKeyValue$Outbound` instead. */
  export type Outbound = VncKeyValue$Outbound;
}

export function vncKeyValueToJSON(vncKeyValue: VncKeyValue): string {
  return JSON.stringify(VncKeyValue$outboundSchema.parse(vncKeyValue));
}

export function vncKeyValueFromJSON(
  jsonString: string,
): SafeParseResult<VncKeyValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VncKeyValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VncKeyValue' from JSON`,
  );
}
