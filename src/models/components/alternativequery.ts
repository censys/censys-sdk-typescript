/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const Targets = {
  Host: "host",
  Web: "web",
  Cert: "cert",
  Unknown: "unknown",
} as const;
export type Targets = ClosedEnum<typeof Targets>;

export type AlternativeQuery = {
  /**
   * An alternative query that may be used.
   */
  query: string;
  /**
   * The types of Platform data records (host, cert, and web) that can be targeted by the alternative query.
   */
  targets: Array<Targets> | null;
};

/** @internal */
export const Targets$inboundSchema: z.ZodNativeEnum<typeof Targets> = z
  .nativeEnum(Targets);

/** @internal */
export const Targets$outboundSchema: z.ZodNativeEnum<typeof Targets> =
  Targets$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Targets$ {
  /** @deprecated use `Targets$inboundSchema` instead. */
  export const inboundSchema = Targets$inboundSchema;
  /** @deprecated use `Targets$outboundSchema` instead. */
  export const outboundSchema = Targets$outboundSchema;
}

/** @internal */
export const AlternativeQuery$inboundSchema: z.ZodType<
  AlternativeQuery,
  z.ZodTypeDef,
  unknown
> = z.object({
  query: z.string(),
  targets: z.nullable(z.array(Targets$inboundSchema)),
});

/** @internal */
export type AlternativeQuery$Outbound = {
  query: string;
  targets: Array<string> | null;
};

/** @internal */
export const AlternativeQuery$outboundSchema: z.ZodType<
  AlternativeQuery$Outbound,
  z.ZodTypeDef,
  AlternativeQuery
> = z.object({
  query: z.string(),
  targets: z.nullable(z.array(Targets$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AlternativeQuery$ {
  /** @deprecated use `AlternativeQuery$inboundSchema` instead. */
  export const inboundSchema = AlternativeQuery$inboundSchema;
  /** @deprecated use `AlternativeQuery$outboundSchema` instead. */
  export const outboundSchema = AlternativeQuery$outboundSchema;
  /** @deprecated use `AlternativeQuery$Outbound` instead. */
  export type Outbound = AlternativeQuery$Outbound;
}

export function alternativeQueryToJSON(
  alternativeQuery: AlternativeQuery,
): string {
  return JSON.stringify(
    AlternativeQuery$outboundSchema.parse(alternativeQuery),
  );
}

export function alternativeQueryFromJSON(
  jsonString: string,
): SafeParseResult<AlternativeQuery, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AlternativeQuery$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AlternativeQuery' from JSON`,
  );
}
