/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ElasticSearchResultsNodeInfoClusterCombinedInfoIndicesDocs = {
  count?: number | undefined;
  deleted?: number | undefined;
};

/** @internal */
export const ElasticSearchResultsNodeInfoClusterCombinedInfoIndicesDocs$inboundSchema:
  z.ZodType<
    ElasticSearchResultsNodeInfoClusterCombinedInfoIndicesDocs,
    z.ZodTypeDef,
    unknown
  > = z.object({
    count: z.number().int().optional(),
    deleted: z.number().int().optional(),
  });

/** @internal */
export type ElasticSearchResultsNodeInfoClusterCombinedInfoIndicesDocs$Outbound =
  {
    count?: number | undefined;
    deleted?: number | undefined;
  };

/** @internal */
export const ElasticSearchResultsNodeInfoClusterCombinedInfoIndicesDocs$outboundSchema:
  z.ZodType<
    ElasticSearchResultsNodeInfoClusterCombinedInfoIndicesDocs$Outbound,
    z.ZodTypeDef,
    ElasticSearchResultsNodeInfoClusterCombinedInfoIndicesDocs
  > = z.object({
    count: z.number().int().optional(),
    deleted: z.number().int().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ElasticSearchResultsNodeInfoClusterCombinedInfoIndicesDocs$ {
  /** @deprecated use `ElasticSearchResultsNodeInfoClusterCombinedInfoIndicesDocs$inboundSchema` instead. */
  export const inboundSchema =
    ElasticSearchResultsNodeInfoClusterCombinedInfoIndicesDocs$inboundSchema;
  /** @deprecated use `ElasticSearchResultsNodeInfoClusterCombinedInfoIndicesDocs$outboundSchema` instead. */
  export const outboundSchema =
    ElasticSearchResultsNodeInfoClusterCombinedInfoIndicesDocs$outboundSchema;
  /** @deprecated use `ElasticSearchResultsNodeInfoClusterCombinedInfoIndicesDocs$Outbound` instead. */
  export type Outbound =
    ElasticSearchResultsNodeInfoClusterCombinedInfoIndicesDocs$Outbound;
}

export function elasticSearchResultsNodeInfoClusterCombinedInfoIndicesDocsToJSON(
  elasticSearchResultsNodeInfoClusterCombinedInfoIndicesDocs:
    ElasticSearchResultsNodeInfoClusterCombinedInfoIndicesDocs,
): string {
  return JSON.stringify(
    ElasticSearchResultsNodeInfoClusterCombinedInfoIndicesDocs$outboundSchema
      .parse(elasticSearchResultsNodeInfoClusterCombinedInfoIndicesDocs),
  );
}

export function elasticSearchResultsNodeInfoClusterCombinedInfoIndicesDocsFromJSON(
  jsonString: string,
): SafeParseResult<
  ElasticSearchResultsNodeInfoClusterCombinedInfoIndicesDocs,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ElasticSearchResultsNodeInfoClusterCombinedInfoIndicesDocs$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'ElasticSearchResultsNodeInfoClusterCombinedInfoIndicesDocs' from JSON`,
  );
}
