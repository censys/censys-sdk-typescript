/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  FieldValuePair,
  FieldValuePair$inboundSchema,
  FieldValuePair$Outbound,
  FieldValuePair$outboundSchema,
} from "./fieldvaluepair.js";

export type CountCondition = {
  /**
   * Field-value pairs to count matches for. Must target fields from the same nested object.
   */
  fieldValuePairs: Array<FieldValuePair> | null;
};

/** @internal */
export const CountCondition$inboundSchema: z.ZodType<
  CountCondition,
  z.ZodTypeDef,
  unknown
> = z.object({
  field_value_pairs: z.nullable(z.array(FieldValuePair$inboundSchema)),
}).transform((v) => {
  return remap$(v, {
    "field_value_pairs": "fieldValuePairs",
  });
});

/** @internal */
export type CountCondition$Outbound = {
  field_value_pairs: Array<FieldValuePair$Outbound> | null;
};

/** @internal */
export const CountCondition$outboundSchema: z.ZodType<
  CountCondition$Outbound,
  z.ZodTypeDef,
  CountCondition
> = z.object({
  fieldValuePairs: z.nullable(z.array(FieldValuePair$outboundSchema)),
}).transform((v) => {
  return remap$(v, {
    fieldValuePairs: "field_value_pairs",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CountCondition$ {
  /** @deprecated use `CountCondition$inboundSchema` instead. */
  export const inboundSchema = CountCondition$inboundSchema;
  /** @deprecated use `CountCondition$outboundSchema` instead. */
  export const outboundSchema = CountCondition$outboundSchema;
  /** @deprecated use `CountCondition$Outbound` instead. */
  export type Outbound = CountCondition$Outbound;
}

export function countConditionToJSON(countCondition: CountCondition): string {
  return JSON.stringify(CountCondition$outboundSchema.parse(countCondition));
}

export function countConditionFromJSON(
  jsonString: string,
): SafeParseResult<CountCondition, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CountCondition$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CountCondition' from JSON`,
  );
}
