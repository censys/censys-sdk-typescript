/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  FieldDiff,
  FieldDiff$inboundSchema,
  FieldDiff$Outbound,
  FieldDiff$outboundSchema,
} from "./fielddiff.js";
import {
  ServiceScan,
  ServiceScan$inboundSchema,
  ServiceScan$Outbound,
  ServiceScan$outboundSchema,
} from "./servicescan.js";

export type ServiceScanned = {
  diff?: { [k: string]: FieldDiff } | undefined;
  scan?: ServiceScan | undefined;
};

/** @internal */
export const ServiceScanned$inboundSchema: z.ZodType<
  ServiceScanned,
  z.ZodTypeDef,
  unknown
> = z.object({
  diff: z.record(FieldDiff$inboundSchema).optional(),
  scan: ServiceScan$inboundSchema.optional(),
});

/** @internal */
export type ServiceScanned$Outbound = {
  diff?: { [k: string]: FieldDiff$Outbound } | undefined;
  scan?: ServiceScan$Outbound | undefined;
};

/** @internal */
export const ServiceScanned$outboundSchema: z.ZodType<
  ServiceScanned$Outbound,
  z.ZodTypeDef,
  ServiceScanned
> = z.object({
  diff: z.record(FieldDiff$outboundSchema).optional(),
  scan: ServiceScan$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServiceScanned$ {
  /** @deprecated use `ServiceScanned$inboundSchema` instead. */
  export const inboundSchema = ServiceScanned$inboundSchema;
  /** @deprecated use `ServiceScanned$outboundSchema` instead. */
  export const outboundSchema = ServiceScanned$outboundSchema;
  /** @deprecated use `ServiceScanned$Outbound` instead. */
  export type Outbound = ServiceScanned$Outbound;
}

export function serviceScannedToJSON(serviceScanned: ServiceScanned): string {
  return JSON.stringify(ServiceScanned$outboundSchema.parse(serviceScanned));
}

export function serviceScannedFromJSON(
  jsonString: string,
): SafeParseResult<ServiceScanned, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ServiceScanned$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ServiceScanned' from JSON`,
  );
}
