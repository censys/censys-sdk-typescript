/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PanTiltZoomCapabilities = {
  eflip?: boolean | undefined;
  getCompatibleConfigurations?: boolean | undefined;
  moveStatus?: boolean | undefined;
  reverse?: boolean | undefined;
  statusPosition?: boolean | undefined;
};

/** @internal */
export const PanTiltZoomCapabilities$inboundSchema: z.ZodType<
  PanTiltZoomCapabilities,
  z.ZodTypeDef,
  unknown
> = z.object({
  eflip: z.boolean().optional(),
  get_compatible_configurations: z.boolean().optional(),
  move_status: z.boolean().optional(),
  reverse: z.boolean().optional(),
  status_position: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    "get_compatible_configurations": "getCompatibleConfigurations",
    "move_status": "moveStatus",
    "status_position": "statusPosition",
  });
});

/** @internal */
export type PanTiltZoomCapabilities$Outbound = {
  eflip?: boolean | undefined;
  get_compatible_configurations?: boolean | undefined;
  move_status?: boolean | undefined;
  reverse?: boolean | undefined;
  status_position?: boolean | undefined;
};

/** @internal */
export const PanTiltZoomCapabilities$outboundSchema: z.ZodType<
  PanTiltZoomCapabilities$Outbound,
  z.ZodTypeDef,
  PanTiltZoomCapabilities
> = z.object({
  eflip: z.boolean().optional(),
  getCompatibleConfigurations: z.boolean().optional(),
  moveStatus: z.boolean().optional(),
  reverse: z.boolean().optional(),
  statusPosition: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    getCompatibleConfigurations: "get_compatible_configurations",
    moveStatus: "move_status",
    statusPosition: "status_position",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PanTiltZoomCapabilities$ {
  /** @deprecated use `PanTiltZoomCapabilities$inboundSchema` instead. */
  export const inboundSchema = PanTiltZoomCapabilities$inboundSchema;
  /** @deprecated use `PanTiltZoomCapabilities$outboundSchema` instead. */
  export const outboundSchema = PanTiltZoomCapabilities$outboundSchema;
  /** @deprecated use `PanTiltZoomCapabilities$Outbound` instead. */
  export type Outbound = PanTiltZoomCapabilities$Outbound;
}

export function panTiltZoomCapabilitiesToJSON(
  panTiltZoomCapabilities: PanTiltZoomCapabilities,
): string {
  return JSON.stringify(
    PanTiltZoomCapabilities$outboundSchema.parse(panTiltZoomCapabilities),
  );
}

export function panTiltZoomCapabilitiesFromJSON(
  jsonString: string,
): SafeParseResult<PanTiltZoomCapabilities, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PanTiltZoomCapabilities$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PanTiltZoomCapabilities' from JSON`,
  );
}
