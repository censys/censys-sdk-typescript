/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ReverseDnsResolved = {
  names?: Array<string> | null | undefined;
  resolveTime?: string | undefined;
};

/** @internal */
export const ReverseDnsResolved$inboundSchema: z.ZodType<
  ReverseDnsResolved,
  z.ZodTypeDef,
  unknown
> = z.object({
  names: z.nullable(z.array(z.string())).optional(),
  resolve_time: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "resolve_time": "resolveTime",
  });
});

/** @internal */
export type ReverseDnsResolved$Outbound = {
  names?: Array<string> | null | undefined;
  resolve_time?: string | undefined;
};

/** @internal */
export const ReverseDnsResolved$outboundSchema: z.ZodType<
  ReverseDnsResolved$Outbound,
  z.ZodTypeDef,
  ReverseDnsResolved
> = z.object({
  names: z.nullable(z.array(z.string())).optional(),
  resolveTime: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    resolveTime: "resolve_time",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReverseDnsResolved$ {
  /** @deprecated use `ReverseDnsResolved$inboundSchema` instead. */
  export const inboundSchema = ReverseDnsResolved$inboundSchema;
  /** @deprecated use `ReverseDnsResolved$outboundSchema` instead. */
  export const outboundSchema = ReverseDnsResolved$outboundSchema;
  /** @deprecated use `ReverseDnsResolved$Outbound` instead. */
  export type Outbound = ReverseDnsResolved$Outbound;
}

export function reverseDnsResolvedToJSON(
  reverseDnsResolved: ReverseDnsResolved,
): string {
  return JSON.stringify(
    ReverseDnsResolved$outboundSchema.parse(reverseDnsResolved),
  );
}

export function reverseDnsResolvedFromJSON(
  jsonString: string,
): SafeParseResult<ReverseDnsResolved, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReverseDnsResolved$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReverseDnsResolved' from JSON`,
  );
}
