/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UnitronicsPcom = {
  bufferSize?: string | undefined;
  hardwareVersion?: string | undefined;
  model?: string | undefined;
  modelExecutor?: string | undefined;
  modelOpExecutor?: string | undefined;
  name?: string | undefined;
  osBuild?: string | undefined;
  osVersion?: string | undefined;
  uniqueId?: number | undefined;
  unitId?: string | undefined;
};

/** @internal */
export const UnitronicsPcom$inboundSchema: z.ZodType<
  UnitronicsPcom,
  z.ZodTypeDef,
  unknown
> = z.object({
  buffer_size: z.string().optional(),
  hardware_version: z.string().optional(),
  model: z.string().optional(),
  model_executor: z.string().optional(),
  model_op_executor: z.string().optional(),
  name: z.string().optional(),
  os_build: z.string().optional(),
  os_version: z.string().optional(),
  unique_id: z.number().int().optional(),
  unit_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "buffer_size": "bufferSize",
    "hardware_version": "hardwareVersion",
    "model_executor": "modelExecutor",
    "model_op_executor": "modelOpExecutor",
    "os_build": "osBuild",
    "os_version": "osVersion",
    "unique_id": "uniqueId",
    "unit_id": "unitId",
  });
});

/** @internal */
export type UnitronicsPcom$Outbound = {
  buffer_size?: string | undefined;
  hardware_version?: string | undefined;
  model?: string | undefined;
  model_executor?: string | undefined;
  model_op_executor?: string | undefined;
  name?: string | undefined;
  os_build?: string | undefined;
  os_version?: string | undefined;
  unique_id?: number | undefined;
  unit_id?: string | undefined;
};

/** @internal */
export const UnitronicsPcom$outboundSchema: z.ZodType<
  UnitronicsPcom$Outbound,
  z.ZodTypeDef,
  UnitronicsPcom
> = z.object({
  bufferSize: z.string().optional(),
  hardwareVersion: z.string().optional(),
  model: z.string().optional(),
  modelExecutor: z.string().optional(),
  modelOpExecutor: z.string().optional(),
  name: z.string().optional(),
  osBuild: z.string().optional(),
  osVersion: z.string().optional(),
  uniqueId: z.number().int().optional(),
  unitId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    bufferSize: "buffer_size",
    hardwareVersion: "hardware_version",
    modelExecutor: "model_executor",
    modelOpExecutor: "model_op_executor",
    osBuild: "os_build",
    osVersion: "os_version",
    uniqueId: "unique_id",
    unitId: "unit_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnitronicsPcom$ {
  /** @deprecated use `UnitronicsPcom$inboundSchema` instead. */
  export const inboundSchema = UnitronicsPcom$inboundSchema;
  /** @deprecated use `UnitronicsPcom$outboundSchema` instead. */
  export const outboundSchema = UnitronicsPcom$outboundSchema;
  /** @deprecated use `UnitronicsPcom$Outbound` instead. */
  export type Outbound = UnitronicsPcom$Outbound;
}

export function unitronicsPcomToJSON(unitronicsPcom: UnitronicsPcom): string {
  return JSON.stringify(UnitronicsPcom$outboundSchema.parse(unitronicsPcom));
}

export function unitronicsPcomFromJSON(
  jsonString: string,
): SafeParseResult<UnitronicsPcom, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UnitronicsPcom$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UnitronicsPcom' from JSON`,
  );
}
