/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SshKexInitMessage = {
  /**
   * A list of ssh cipher algorithm identifiers, named according to section 6 of https://www.ietf.org/rfc/rfc4251.txt; see https://www.iana.org/assignments/ssh-parameters/ssh-parameters.xhtml#ssh-parameters-16 for standard values.
   */
  clientToServerCiphers?: Array<string> | null | undefined;
  /**
   * A list of ssh compression algorithm identifiers, named according to section 6 of https://www.ietf.org/rfc/rfc4251.txt; see https://www.iana.org/assignments/ssh-parameters/ssh-parameters.xhtml#ssh-parameters-20 for standard values.
   */
  clientToServerCompression?: Array<string> | null | undefined;
  /**
   * A name-list of language tags in order of preference. As Defined in https://www.ietf.org/rfc/rfc3066.txt.
   */
  clientToServerLanguages?: Array<string> | null | undefined;
  /**
   * A list of ssh MAC algorithm identifiers, named according to section 6 of https://www.ietf.org/rfc/rfc4251.txt; see https://www.iana.org/assignments/ssh-parameters/ssh-parameters.xhtml#ssh-parameters-18 for standard values.
   */
  clientToServerMacs?: Array<string> | null | undefined;
  firstKexFollows?: boolean | undefined;
  /**
   * Asymmetric key algorithms for the host key supported by the client.
   */
  hostKeyAlgorithms?: Array<string> | null | undefined;
  /**
   * Key exchange algorithms used in the handshake.
   */
  kexAlgorithms?: Array<string> | null | undefined;
  /**
   * A list of ssh cipher algorithm identifiers, named according to section 6 of https://www.ietf.org/rfc/rfc4251.txt; see https://www.iana.org/assignments/ssh-parameters/ssh-parameters.xhtml#ssh-parameters-16 for standard values.
   */
  serverToClientCiphers?: Array<string> | null | undefined;
  /**
   * A list of ssh compression algorithm identifiers, named according to section 6 of https://www.ietf.org/rfc/rfc4251.txt; see https://www.iana.org/assignments/ssh-parameters/ssh-parameters.xhtml#ssh-parameters-20 for standard values.
   */
  serverToClientCompression?: Array<string> | null | undefined;
  /**
   * A name-list of language tags in order of preference. As Defined in https://www.ietf.org/rfc/rfc3066.txt.
   */
  serverToClientLanguages?: Array<string> | null | undefined;
  /**
   * A list of ssh MAC algorithm identifiers, named according to section 6 of https://www.ietf.org/rfc/rfc4251.txt; see https://www.iana.org/assignments/ssh-parameters/ssh-parameters.xhtml#ssh-parameters-18 for standard values.
   */
  serverToClientMacs?: Array<string> | null | undefined;
};

/** @internal */
export const SshKexInitMessage$inboundSchema: z.ZodType<
  SshKexInitMessage,
  z.ZodTypeDef,
  unknown
> = z.object({
  client_to_server_ciphers: z.nullable(z.array(z.string())).optional(),
  client_to_server_compression: z.nullable(z.array(z.string())).optional(),
  client_to_server_languages: z.nullable(z.array(z.string())).optional(),
  client_to_server_macs: z.nullable(z.array(z.string())).optional(),
  first_kex_follows: z.boolean().optional(),
  host_key_algorithms: z.nullable(z.array(z.string())).optional(),
  kex_algorithms: z.nullable(z.array(z.string())).optional(),
  server_to_client_ciphers: z.nullable(z.array(z.string())).optional(),
  server_to_client_compression: z.nullable(z.array(z.string())).optional(),
  server_to_client_languages: z.nullable(z.array(z.string())).optional(),
  server_to_client_macs: z.nullable(z.array(z.string())).optional(),
}).transform((v) => {
  return remap$(v, {
    "client_to_server_ciphers": "clientToServerCiphers",
    "client_to_server_compression": "clientToServerCompression",
    "client_to_server_languages": "clientToServerLanguages",
    "client_to_server_macs": "clientToServerMacs",
    "first_kex_follows": "firstKexFollows",
    "host_key_algorithms": "hostKeyAlgorithms",
    "kex_algorithms": "kexAlgorithms",
    "server_to_client_ciphers": "serverToClientCiphers",
    "server_to_client_compression": "serverToClientCompression",
    "server_to_client_languages": "serverToClientLanguages",
    "server_to_client_macs": "serverToClientMacs",
  });
});

/** @internal */
export type SshKexInitMessage$Outbound = {
  client_to_server_ciphers?: Array<string> | null | undefined;
  client_to_server_compression?: Array<string> | null | undefined;
  client_to_server_languages?: Array<string> | null | undefined;
  client_to_server_macs?: Array<string> | null | undefined;
  first_kex_follows?: boolean | undefined;
  host_key_algorithms?: Array<string> | null | undefined;
  kex_algorithms?: Array<string> | null | undefined;
  server_to_client_ciphers?: Array<string> | null | undefined;
  server_to_client_compression?: Array<string> | null | undefined;
  server_to_client_languages?: Array<string> | null | undefined;
  server_to_client_macs?: Array<string> | null | undefined;
};

/** @internal */
export const SshKexInitMessage$outboundSchema: z.ZodType<
  SshKexInitMessage$Outbound,
  z.ZodTypeDef,
  SshKexInitMessage
> = z.object({
  clientToServerCiphers: z.nullable(z.array(z.string())).optional(),
  clientToServerCompression: z.nullable(z.array(z.string())).optional(),
  clientToServerLanguages: z.nullable(z.array(z.string())).optional(),
  clientToServerMacs: z.nullable(z.array(z.string())).optional(),
  firstKexFollows: z.boolean().optional(),
  hostKeyAlgorithms: z.nullable(z.array(z.string())).optional(),
  kexAlgorithms: z.nullable(z.array(z.string())).optional(),
  serverToClientCiphers: z.nullable(z.array(z.string())).optional(),
  serverToClientCompression: z.nullable(z.array(z.string())).optional(),
  serverToClientLanguages: z.nullable(z.array(z.string())).optional(),
  serverToClientMacs: z.nullable(z.array(z.string())).optional(),
}).transform((v) => {
  return remap$(v, {
    clientToServerCiphers: "client_to_server_ciphers",
    clientToServerCompression: "client_to_server_compression",
    clientToServerLanguages: "client_to_server_languages",
    clientToServerMacs: "client_to_server_macs",
    firstKexFollows: "first_kex_follows",
    hostKeyAlgorithms: "host_key_algorithms",
    kexAlgorithms: "kex_algorithms",
    serverToClientCiphers: "server_to_client_ciphers",
    serverToClientCompression: "server_to_client_compression",
    serverToClientLanguages: "server_to_client_languages",
    serverToClientMacs: "server_to_client_macs",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SshKexInitMessage$ {
  /** @deprecated use `SshKexInitMessage$inboundSchema` instead. */
  export const inboundSchema = SshKexInitMessage$inboundSchema;
  /** @deprecated use `SshKexInitMessage$outboundSchema` instead. */
  export const outboundSchema = SshKexInitMessage$outboundSchema;
  /** @deprecated use `SshKexInitMessage$Outbound` instead. */
  export type Outbound = SshKexInitMessage$Outbound;
}

export function sshKexInitMessageToJSON(
  sshKexInitMessage: SshKexInitMessage,
): string {
  return JSON.stringify(
    SshKexInitMessage$outboundSchema.parse(sshKexInitMessage),
  );
}

export function sshKexInitMessageFromJSON(
  jsonString: string,
): SafeParseResult<SshKexInitMessage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SshKexInitMessage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SshKexInitMessage' from JSON`,
  );
}
