/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CabfOrganizationId = {
  country?: string | undefined;
  reference?: string | undefined;
  scheme?: string | undefined;
  state?: string | undefined;
};

/** @internal */
export const CabfOrganizationId$inboundSchema: z.ZodType<
  CabfOrganizationId,
  z.ZodTypeDef,
  unknown
> = z.object({
  country: z.string().optional(),
  reference: z.string().optional(),
  scheme: z.string().optional(),
  state: z.string().optional(),
});

/** @internal */
export type CabfOrganizationId$Outbound = {
  country?: string | undefined;
  reference?: string | undefined;
  scheme?: string | undefined;
  state?: string | undefined;
};

/** @internal */
export const CabfOrganizationId$outboundSchema: z.ZodType<
  CabfOrganizationId$Outbound,
  z.ZodTypeDef,
  CabfOrganizationId
> = z.object({
  country: z.string().optional(),
  reference: z.string().optional(),
  scheme: z.string().optional(),
  state: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CabfOrganizationId$ {
  /** @deprecated use `CabfOrganizationId$inboundSchema` instead. */
  export const inboundSchema = CabfOrganizationId$inboundSchema;
  /** @deprecated use `CabfOrganizationId$outboundSchema` instead. */
  export const outboundSchema = CabfOrganizationId$outboundSchema;
  /** @deprecated use `CabfOrganizationId$Outbound` instead. */
  export type Outbound = CabfOrganizationId$Outbound;
}

export function cabfOrganizationIdToJSON(
  cabfOrganizationId: CabfOrganizationId,
): string {
  return JSON.stringify(
    CabfOrganizationId$outboundSchema.parse(cabfOrganizationId),
  );
}

export function cabfOrganizationIdFromJSON(
  jsonString: string,
): SafeParseResult<CabfOrganizationId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CabfOrganizationId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CabfOrganizationId' from JSON`,
  );
}
