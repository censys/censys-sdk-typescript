/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Fortigate = {
  apiVersion?: string | undefined;
  build?: number | undefined;
  serial?: string | undefined;
  statusCode?: number | undefined;
  statusMsg?: string | undefined;
  version?: string | undefined;
};

/** @internal */
export const Fortigate$inboundSchema: z.ZodType<
  Fortigate,
  z.ZodTypeDef,
  unknown
> = z.object({
  api_version: z.string().optional(),
  build: z.number().int().optional(),
  serial: z.string().optional(),
  status_code: z.number().int().optional(),
  status_msg: z.string().optional(),
  version: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "api_version": "apiVersion",
    "status_code": "statusCode",
    "status_msg": "statusMsg",
  });
});

/** @internal */
export type Fortigate$Outbound = {
  api_version?: string | undefined;
  build?: number | undefined;
  serial?: string | undefined;
  status_code?: number | undefined;
  status_msg?: string | undefined;
  version?: string | undefined;
};

/** @internal */
export const Fortigate$outboundSchema: z.ZodType<
  Fortigate$Outbound,
  z.ZodTypeDef,
  Fortigate
> = z.object({
  apiVersion: z.string().optional(),
  build: z.number().int().optional(),
  serial: z.string().optional(),
  statusCode: z.number().int().optional(),
  statusMsg: z.string().optional(),
  version: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    apiVersion: "api_version",
    statusCode: "status_code",
    statusMsg: "status_msg",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Fortigate$ {
  /** @deprecated use `Fortigate$inboundSchema` instead. */
  export const inboundSchema = Fortigate$inboundSchema;
  /** @deprecated use `Fortigate$outboundSchema` instead. */
  export const outboundSchema = Fortigate$outboundSchema;
  /** @deprecated use `Fortigate$Outbound` instead. */
  export type Outbound = Fortigate$Outbound;
}

export function fortigateToJSON(fortigate: Fortigate): string {
  return JSON.stringify(Fortigate$outboundSchema.parse(fortigate));
}

export function fortigateFromJSON(
  jsonString: string,
): SafeParseResult<Fortigate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Fortigate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Fortigate' from JSON`,
  );
}
