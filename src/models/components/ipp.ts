/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  IppAttribute,
  IppAttribute$inboundSchema,
  IppAttribute$Outbound,
  IppAttribute$outboundSchema,
} from "./ippattribute.js";

export type Ipp = {
  /**
   * The CUPS version, if any, specified in the list of attributes returned in a get-printer-attributes response or CUPS-get-printers response. Generally in the form 'x.y.z'.
   */
  attributeCupsVersion?: string | undefined;
  /**
   * Each IPP version, if any, specified in the list of attributes returned in a get-printer-attributes response or CUPS-get-printers response. Always in the form 'x.y'.
   */
  attributeIppVersions?: Array<string> | null | undefined;
  /**
   * Each printer URI, if any, specified in the list of attributes returned in a get-printer-attributes response or CUPS-get-printers response. Uses ipp(s) or http(s) scheme, followed by a hostname or IP, and then the path to a particular printer.
   */
  attributePrinterUris?: Array<string> | null | undefined;
  /**
   * All IPP attributes included in any contentful responses obtained. Each has a name, list of values (potentially only one), and a tag denoting how the value should be interpreted.
   */
  attributes?: Array<IppAttribute> | null | undefined;
  /**
   * The CUPS version, if any, specified in the Server header of an IPP get-attributes response.
   */
  cupsVersion?: string | undefined;
  /**
   * Major component of IPP version listed in the Server header of a response to an IPP get-printer-attributes request.
   */
  majorVersion?: number | undefined;
  /**
   * Minor component of IPP version listed in the Server header of a response to an IPP get-printer-attributes request.
   */
  minorVersion?: number | undefined;
  /**
   * The specific IPP version returned in response to an IPP get-printer-attributes request. Always in the form 'IPP/x.y'
   */
  versionString?: string | undefined;
};

/** @internal */
export const Ipp$inboundSchema: z.ZodType<Ipp, z.ZodTypeDef, unknown> = z
  .object({
    attribute_cups_version: z.string().optional(),
    attribute_ipp_versions: z.nullable(z.array(z.string())).optional(),
    attribute_printer_uris: z.nullable(z.array(z.string())).optional(),
    attributes: z.nullable(z.array(IppAttribute$inboundSchema)).optional(),
    cups_version: z.string().optional(),
    major_version: z.number().int().optional(),
    minor_version: z.number().int().optional(),
    version_string: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "attribute_cups_version": "attributeCupsVersion",
      "attribute_ipp_versions": "attributeIppVersions",
      "attribute_printer_uris": "attributePrinterUris",
      "cups_version": "cupsVersion",
      "major_version": "majorVersion",
      "minor_version": "minorVersion",
      "version_string": "versionString",
    });
  });

/** @internal */
export type Ipp$Outbound = {
  attribute_cups_version?: string | undefined;
  attribute_ipp_versions?: Array<string> | null | undefined;
  attribute_printer_uris?: Array<string> | null | undefined;
  attributes?: Array<IppAttribute$Outbound> | null | undefined;
  cups_version?: string | undefined;
  major_version?: number | undefined;
  minor_version?: number | undefined;
  version_string?: string | undefined;
};

/** @internal */
export const Ipp$outboundSchema: z.ZodType<Ipp$Outbound, z.ZodTypeDef, Ipp> = z
  .object({
    attributeCupsVersion: z.string().optional(),
    attributeIppVersions: z.nullable(z.array(z.string())).optional(),
    attributePrinterUris: z.nullable(z.array(z.string())).optional(),
    attributes: z.nullable(z.array(IppAttribute$outboundSchema)).optional(),
    cupsVersion: z.string().optional(),
    majorVersion: z.number().int().optional(),
    minorVersion: z.number().int().optional(),
    versionString: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      attributeCupsVersion: "attribute_cups_version",
      attributeIppVersions: "attribute_ipp_versions",
      attributePrinterUris: "attribute_printer_uris",
      cupsVersion: "cups_version",
      majorVersion: "major_version",
      minorVersion: "minor_version",
      versionString: "version_string",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Ipp$ {
  /** @deprecated use `Ipp$inboundSchema` instead. */
  export const inboundSchema = Ipp$inboundSchema;
  /** @deprecated use `Ipp$outboundSchema` instead. */
  export const outboundSchema = Ipp$outboundSchema;
  /** @deprecated use `Ipp$Outbound` instead. */
  export type Outbound = Ipp$Outbound;
}

export function ippToJSON(ipp: Ipp): string {
  return JSON.stringify(Ipp$outboundSchema.parse(ipp));
}

export function ippFromJSON(
  jsonString: string,
): SafeParseResult<Ipp, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Ipp$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Ipp' from JSON`,
  );
}
