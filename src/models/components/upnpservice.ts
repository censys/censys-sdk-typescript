/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpnpService = {
  controlUrl?: string | undefined;
  eventSubUrl?: string | undefined;
  scpdUrl?: string | undefined;
  serviceId?: string | undefined;
  serviceType?: string | undefined;
};

/** @internal */
export const UpnpService$inboundSchema: z.ZodType<
  UpnpService,
  z.ZodTypeDef,
  unknown
> = z.object({
  control_url: z.string().optional(),
  event_sub_url: z.string().optional(),
  scpd_url: z.string().optional(),
  service_id: z.string().optional(),
  service_type: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "control_url": "controlUrl",
    "event_sub_url": "eventSubUrl",
    "scpd_url": "scpdUrl",
    "service_id": "serviceId",
    "service_type": "serviceType",
  });
});

/** @internal */
export type UpnpService$Outbound = {
  control_url?: string | undefined;
  event_sub_url?: string | undefined;
  scpd_url?: string | undefined;
  service_id?: string | undefined;
  service_type?: string | undefined;
};

/** @internal */
export const UpnpService$outboundSchema: z.ZodType<
  UpnpService$Outbound,
  z.ZodTypeDef,
  UpnpService
> = z.object({
  controlUrl: z.string().optional(),
  eventSubUrl: z.string().optional(),
  scpdUrl: z.string().optional(),
  serviceId: z.string().optional(),
  serviceType: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    controlUrl: "control_url",
    eventSubUrl: "event_sub_url",
    scpdUrl: "scpd_url",
    serviceId: "service_id",
    serviceType: "service_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpnpService$ {
  /** @deprecated use `UpnpService$inboundSchema` instead. */
  export const inboundSchema = UpnpService$inboundSchema;
  /** @deprecated use `UpnpService$outboundSchema` instead. */
  export const outboundSchema = UpnpService$outboundSchema;
  /** @deprecated use `UpnpService$Outbound` instead. */
  export type Outbound = UpnpService$Outbound;
}

export function upnpServiceToJSON(upnpService: UpnpService): string {
  return JSON.stringify(UpnpService$outboundSchema.parse(upnpService));
}

export function upnpServiceFromJSON(
  jsonString: string,
): SafeParseResult<UpnpService, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpnpService$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpnpService' from JSON`,
  );
}
