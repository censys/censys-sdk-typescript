/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  SearchAggregateResponseBucket,
  SearchAggregateResponseBucket$inboundSchema,
  SearchAggregateResponseBucket$Outbound,
  SearchAggregateResponseBucket$outboundSchema,
} from "./searchaggregateresponsebucket.js";

export type SearchAggregateResponse = {
  buckets: Array<SearchAggregateResponseBucket> | null;
  isMoreThanTotalHits: boolean;
  otherCount: number;
  queryDurationMillis: number;
  totalCount: number;
};

/** @internal */
export const SearchAggregateResponse$inboundSchema: z.ZodType<
  SearchAggregateResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  buckets: z.nullable(z.array(SearchAggregateResponseBucket$inboundSchema)),
  is_more_than_total_hits: z.boolean(),
  other_count: z.number().int(),
  query_duration_millis: z.number().int(),
  total_count: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    "is_more_than_total_hits": "isMoreThanTotalHits",
    "other_count": "otherCount",
    "query_duration_millis": "queryDurationMillis",
    "total_count": "totalCount",
  });
});

/** @internal */
export type SearchAggregateResponse$Outbound = {
  buckets: Array<SearchAggregateResponseBucket$Outbound> | null;
  is_more_than_total_hits: boolean;
  other_count: number;
  query_duration_millis: number;
  total_count: number;
};

/** @internal */
export const SearchAggregateResponse$outboundSchema: z.ZodType<
  SearchAggregateResponse$Outbound,
  z.ZodTypeDef,
  SearchAggregateResponse
> = z.object({
  buckets: z.nullable(z.array(SearchAggregateResponseBucket$outboundSchema)),
  isMoreThanTotalHits: z.boolean(),
  otherCount: z.number().int(),
  queryDurationMillis: z.number().int(),
  totalCount: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    isMoreThanTotalHits: "is_more_than_total_hits",
    otherCount: "other_count",
    queryDurationMillis: "query_duration_millis",
    totalCount: "total_count",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchAggregateResponse$ {
  /** @deprecated use `SearchAggregateResponse$inboundSchema` instead. */
  export const inboundSchema = SearchAggregateResponse$inboundSchema;
  /** @deprecated use `SearchAggregateResponse$outboundSchema` instead. */
  export const outboundSchema = SearchAggregateResponse$outboundSchema;
  /** @deprecated use `SearchAggregateResponse$Outbound` instead. */
  export type Outbound = SearchAggregateResponse$Outbound;
}

export function searchAggregateResponseToJSON(
  searchAggregateResponse: SearchAggregateResponse,
): string {
  return JSON.stringify(
    SearchAggregateResponse$outboundSchema.parse(searchAggregateResponse),
  );
}

export function searchAggregateResponseFromJSON(
  jsonString: string,
): SafeParseResult<SearchAggregateResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchAggregateResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchAggregateResponse' from JSON`,
  );
}
