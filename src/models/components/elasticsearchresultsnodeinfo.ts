/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ElasticSearchResultsNodeInfoClusterCombinedInfo,
  ElasticSearchResultsNodeInfoClusterCombinedInfo$inboundSchema,
  ElasticSearchResultsNodeInfoClusterCombinedInfo$Outbound,
  ElasticSearchResultsNodeInfoClusterCombinedInfo$outboundSchema,
} from "./elasticsearchresultsnodeinfoclustercombinedinfo.js";
import {
  ElasticSearchResultsNodeInfoNodes,
  ElasticSearchResultsNodeInfoNodes$inboundSchema,
  ElasticSearchResultsNodeInfoNodes$Outbound,
  ElasticSearchResultsNodeInfoNodes$outboundSchema,
} from "./elasticsearchresultsnodeinfonodes.js";

export type ElasticSearchResultsNodeInfo = {
  clusterCombinedInfo?:
    | ElasticSearchResultsNodeInfoClusterCombinedInfo
    | undefined;
  nodeInfo?: Array<ElasticSearchResultsNodeInfoNodes> | null | undefined;
};

/** @internal */
export const ElasticSearchResultsNodeInfo$inboundSchema: z.ZodType<
  ElasticSearchResultsNodeInfo,
  z.ZodTypeDef,
  unknown
> = z.object({
  cluster_combined_info:
    ElasticSearchResultsNodeInfoClusterCombinedInfo$inboundSchema.optional(),
  node_info: z.nullable(
    z.array(ElasticSearchResultsNodeInfoNodes$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "cluster_combined_info": "clusterCombinedInfo",
    "node_info": "nodeInfo",
  });
});

/** @internal */
export type ElasticSearchResultsNodeInfo$Outbound = {
  cluster_combined_info?:
    | ElasticSearchResultsNodeInfoClusterCombinedInfo$Outbound
    | undefined;
  node_info?:
    | Array<ElasticSearchResultsNodeInfoNodes$Outbound>
    | null
    | undefined;
};

/** @internal */
export const ElasticSearchResultsNodeInfo$outboundSchema: z.ZodType<
  ElasticSearchResultsNodeInfo$Outbound,
  z.ZodTypeDef,
  ElasticSearchResultsNodeInfo
> = z.object({
  clusterCombinedInfo:
    ElasticSearchResultsNodeInfoClusterCombinedInfo$outboundSchema.optional(),
  nodeInfo: z.nullable(
    z.array(ElasticSearchResultsNodeInfoNodes$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    clusterCombinedInfo: "cluster_combined_info",
    nodeInfo: "node_info",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ElasticSearchResultsNodeInfo$ {
  /** @deprecated use `ElasticSearchResultsNodeInfo$inboundSchema` instead. */
  export const inboundSchema = ElasticSearchResultsNodeInfo$inboundSchema;
  /** @deprecated use `ElasticSearchResultsNodeInfo$outboundSchema` instead. */
  export const outboundSchema = ElasticSearchResultsNodeInfo$outboundSchema;
  /** @deprecated use `ElasticSearchResultsNodeInfo$Outbound` instead. */
  export type Outbound = ElasticSearchResultsNodeInfo$Outbound;
}

export function elasticSearchResultsNodeInfoToJSON(
  elasticSearchResultsNodeInfo: ElasticSearchResultsNodeInfo,
): string {
  return JSON.stringify(
    ElasticSearchResultsNodeInfo$outboundSchema.parse(
      elasticSearchResultsNodeInfo,
    ),
  );
}

export function elasticSearchResultsNodeInfoFromJSON(
  jsonString: string,
): SafeParseResult<ElasticSearchResultsNodeInfo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ElasticSearchResultsNodeInfo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ElasticSearchResultsNodeInfo' from JSON`,
  );
}
