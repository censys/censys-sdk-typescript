/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type EdiPartyName = {
  nameAssigner?: string | undefined;
  partyName?: string | undefined;
};

/** @internal */
export const EdiPartyName$inboundSchema: z.ZodType<
  EdiPartyName,
  z.ZodTypeDef,
  unknown
> = z.object({
  name_assigner: z.string().optional(),
  party_name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "name_assigner": "nameAssigner",
    "party_name": "partyName",
  });
});

/** @internal */
export type EdiPartyName$Outbound = {
  name_assigner?: string | undefined;
  party_name?: string | undefined;
};

/** @internal */
export const EdiPartyName$outboundSchema: z.ZodType<
  EdiPartyName$Outbound,
  z.ZodTypeDef,
  EdiPartyName
> = z.object({
  nameAssigner: z.string().optional(),
  partyName: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    nameAssigner: "name_assigner",
    partyName: "party_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EdiPartyName$ {
  /** @deprecated use `EdiPartyName$inboundSchema` instead. */
  export const inboundSchema = EdiPartyName$inboundSchema;
  /** @deprecated use `EdiPartyName$outboundSchema` instead. */
  export const outboundSchema = EdiPartyName$outboundSchema;
  /** @deprecated use `EdiPartyName$Outbound` instead. */
  export type Outbound = EdiPartyName$Outbound;
}

export function ediPartyNameToJSON(ediPartyName: EdiPartyName): string {
  return JSON.stringify(EdiPartyName$outboundSchema.parse(ediPartyName));
}

export function ediPartyNameFromJSON(
  jsonString: string,
): SafeParseResult<EdiPartyName, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EdiPartyName$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EdiPartyName' from JSON`,
  );
}
