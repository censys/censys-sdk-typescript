/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  RdpDomainParameters,
  RdpDomainParameters$inboundSchema,
  RdpDomainParameters$Outbound,
  RdpDomainParameters$outboundSchema,
} from "./rdpdomainparameters.js";

export type RdpConnectResponse = {
  connectId?: number | undefined;
  domainParameters?: RdpDomainParameters | undefined;
};

/** @internal */
export const RdpConnectResponse$inboundSchema: z.ZodType<
  RdpConnectResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  connect_id: z.number().int().optional(),
  domain_parameters: RdpDomainParameters$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "connect_id": "connectId",
    "domain_parameters": "domainParameters",
  });
});

/** @internal */
export type RdpConnectResponse$Outbound = {
  connect_id?: number | undefined;
  domain_parameters?: RdpDomainParameters$Outbound | undefined;
};

/** @internal */
export const RdpConnectResponse$outboundSchema: z.ZodType<
  RdpConnectResponse$Outbound,
  z.ZodTypeDef,
  RdpConnectResponse
> = z.object({
  connectId: z.number().int().optional(),
  domainParameters: RdpDomainParameters$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    connectId: "connect_id",
    domainParameters: "domain_parameters",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RdpConnectResponse$ {
  /** @deprecated use `RdpConnectResponse$inboundSchema` instead. */
  export const inboundSchema = RdpConnectResponse$inboundSchema;
  /** @deprecated use `RdpConnectResponse$outboundSchema` instead. */
  export const outboundSchema = RdpConnectResponse$outboundSchema;
  /** @deprecated use `RdpConnectResponse$Outbound` instead. */
  export type Outbound = RdpConnectResponse$Outbound;
}

export function rdpConnectResponseToJSON(
  rdpConnectResponse: RdpConnectResponse,
): string {
  return JSON.stringify(
    RdpConnectResponse$outboundSchema.parse(rdpConnectResponse),
  );
}

export function rdpConnectResponseFromJSON(
  jsonString: string,
): SafeParseResult<RdpConnectResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RdpConnectResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RdpConnectResponse' from JSON`,
  );
}
