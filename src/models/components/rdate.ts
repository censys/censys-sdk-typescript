/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Rdate = {
  date?: string | undefined;
};

/** @internal */
export const Rdate$inboundSchema: z.ZodType<Rdate, z.ZodTypeDef, unknown> = z
  .object({
    date: z.string().optional(),
  });

/** @internal */
export type Rdate$Outbound = {
  date?: string | undefined;
};

/** @internal */
export const Rdate$outboundSchema: z.ZodType<
  Rdate$Outbound,
  z.ZodTypeDef,
  Rdate
> = z.object({
  date: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Rdate$ {
  /** @deprecated use `Rdate$inboundSchema` instead. */
  export const inboundSchema = Rdate$inboundSchema;
  /** @deprecated use `Rdate$outboundSchema` instead. */
  export const outboundSchema = Rdate$outboundSchema;
  /** @deprecated use `Rdate$Outbound` instead. */
  export type Outbound = Rdate$Outbound;
}

export function rdateToJSON(rdate: Rdate): string {
  return JSON.stringify(Rdate$outboundSchema.parse(rdate));
}

export function rdateFromJSON(
  jsonString: string,
): SafeParseResult<Rdate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Rdate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Rdate' from JSON`,
  );
}
