/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type TrackedScanScanTargetHostnamePort = {
  hostname?: string | undefined;
  port?: number | undefined;
};

/** @internal */
export const TrackedScanScanTargetHostnamePort$inboundSchema: z.ZodType<
  TrackedScanScanTargetHostnamePort,
  z.ZodTypeDef,
  unknown
> = z.object({
  hostname: z.string().optional(),
  port: z.number().int().optional(),
});

/** @internal */
export type TrackedScanScanTargetHostnamePort$Outbound = {
  hostname?: string | undefined;
  port?: number | undefined;
};

/** @internal */
export const TrackedScanScanTargetHostnamePort$outboundSchema: z.ZodType<
  TrackedScanScanTargetHostnamePort$Outbound,
  z.ZodTypeDef,
  TrackedScanScanTargetHostnamePort
> = z.object({
  hostname: z.string().optional(),
  port: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TrackedScanScanTargetHostnamePort$ {
  /** @deprecated use `TrackedScanScanTargetHostnamePort$inboundSchema` instead. */
  export const inboundSchema = TrackedScanScanTargetHostnamePort$inboundSchema;
  /** @deprecated use `TrackedScanScanTargetHostnamePort$outboundSchema` instead. */
  export const outboundSchema =
    TrackedScanScanTargetHostnamePort$outboundSchema;
  /** @deprecated use `TrackedScanScanTargetHostnamePort$Outbound` instead. */
  export type Outbound = TrackedScanScanTargetHostnamePort$Outbound;
}

export function trackedScanScanTargetHostnamePortToJSON(
  trackedScanScanTargetHostnamePort: TrackedScanScanTargetHostnamePort,
): string {
  return JSON.stringify(
    TrackedScanScanTargetHostnamePort$outboundSchema.parse(
      trackedScanScanTargetHostnamePort,
    ),
  );
}

export function trackedScanScanTargetHostnamePortFromJSON(
  jsonString: string,
): SafeParseResult<TrackedScanScanTargetHostnamePort, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TrackedScanScanTargetHostnamePort$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TrackedScanScanTargetHostnamePort' from JSON`,
  );
}
