/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  TrackedScanScanTarget,
  TrackedScanScanTarget$inboundSchema,
  TrackedScanScanTarget$Outbound,
  TrackedScanScanTarget$outboundSchema,
} from "./trackedscanscantarget.js";
import {
  TrackedScanTask,
  TrackedScanTask$inboundSchema,
  TrackedScanTask$Outbound,
  TrackedScanTask$outboundSchema,
} from "./trackedscantask.js";

export type TrackedScan = {
  completed?: boolean | undefined;
  createTime?: string | undefined;
  target?: TrackedScanScanTarget | undefined;
  tasks?: Array<TrackedScanTask> | null | undefined;
  trackedScanId?: string | undefined;
};

/** @internal */
export const TrackedScan$inboundSchema: z.ZodType<
  TrackedScan,
  z.ZodTypeDef,
  unknown
> = z.object({
  completed: z.boolean().optional(),
  create_time: z.string().optional(),
  target: TrackedScanScanTarget$inboundSchema.optional(),
  tasks: z.nullable(z.array(TrackedScanTask$inboundSchema)).optional(),
  tracked_scan_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "create_time": "createTime",
    "tracked_scan_id": "trackedScanId",
  });
});

/** @internal */
export type TrackedScan$Outbound = {
  completed?: boolean | undefined;
  create_time?: string | undefined;
  target?: TrackedScanScanTarget$Outbound | undefined;
  tasks?: Array<TrackedScanTask$Outbound> | null | undefined;
  tracked_scan_id?: string | undefined;
};

/** @internal */
export const TrackedScan$outboundSchema: z.ZodType<
  TrackedScan$Outbound,
  z.ZodTypeDef,
  TrackedScan
> = z.object({
  completed: z.boolean().optional(),
  createTime: z.string().optional(),
  target: TrackedScanScanTarget$outboundSchema.optional(),
  tasks: z.nullable(z.array(TrackedScanTask$outboundSchema)).optional(),
  trackedScanId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    createTime: "create_time",
    trackedScanId: "tracked_scan_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TrackedScan$ {
  /** @deprecated use `TrackedScan$inboundSchema` instead. */
  export const inboundSchema = TrackedScan$inboundSchema;
  /** @deprecated use `TrackedScan$outboundSchema` instead. */
  export const outboundSchema = TrackedScan$outboundSchema;
  /** @deprecated use `TrackedScan$Outbound` instead. */
  export type Outbound = TrackedScan$Outbound;
}

export function trackedScanToJSON(trackedScan: TrackedScan): string {
  return JSON.stringify(TrackedScan$outboundSchema.parse(trackedScan));
}

export function trackedScanFromJSON(
  jsonString: string,
): SafeParseResult<TrackedScan, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TrackedScan$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TrackedScan' from JSON`,
  );
}
