/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeviceIOCapabilities = {
  audioOutputs?: number | undefined;
  audioSources?: number | undefined;
  digitalInputs?: number | undefined;
  relayOutputs?: number | undefined;
  serialPorts?: number | undefined;
  videoOutputs?: number | undefined;
  videoSource?: number | undefined;
};

/** @internal */
export const DeviceIOCapabilities$inboundSchema: z.ZodType<
  DeviceIOCapabilities,
  z.ZodTypeDef,
  unknown
> = z.object({
  audio_outputs: z.number().int().optional(),
  audio_sources: z.number().int().optional(),
  digital_inputs: z.number().int().optional(),
  relay_outputs: z.number().int().optional(),
  serial_ports: z.number().int().optional(),
  video_outputs: z.number().int().optional(),
  video_source: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "audio_outputs": "audioOutputs",
    "audio_sources": "audioSources",
    "digital_inputs": "digitalInputs",
    "relay_outputs": "relayOutputs",
    "serial_ports": "serialPorts",
    "video_outputs": "videoOutputs",
    "video_source": "videoSource",
  });
});

/** @internal */
export type DeviceIOCapabilities$Outbound = {
  audio_outputs?: number | undefined;
  audio_sources?: number | undefined;
  digital_inputs?: number | undefined;
  relay_outputs?: number | undefined;
  serial_ports?: number | undefined;
  video_outputs?: number | undefined;
  video_source?: number | undefined;
};

/** @internal */
export const DeviceIOCapabilities$outboundSchema: z.ZodType<
  DeviceIOCapabilities$Outbound,
  z.ZodTypeDef,
  DeviceIOCapabilities
> = z.object({
  audioOutputs: z.number().int().optional(),
  audioSources: z.number().int().optional(),
  digitalInputs: z.number().int().optional(),
  relayOutputs: z.number().int().optional(),
  serialPorts: z.number().int().optional(),
  videoOutputs: z.number().int().optional(),
  videoSource: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    audioOutputs: "audio_outputs",
    audioSources: "audio_sources",
    digitalInputs: "digital_inputs",
    relayOutputs: "relay_outputs",
    serialPorts: "serial_ports",
    videoOutputs: "video_outputs",
    videoSource: "video_source",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeviceIOCapabilities$ {
  /** @deprecated use `DeviceIOCapabilities$inboundSchema` instead. */
  export const inboundSchema = DeviceIOCapabilities$inboundSchema;
  /** @deprecated use `DeviceIOCapabilities$outboundSchema` instead. */
  export const outboundSchema = DeviceIOCapabilities$outboundSchema;
  /** @deprecated use `DeviceIOCapabilities$Outbound` instead. */
  export type Outbound = DeviceIOCapabilities$Outbound;
}

export function deviceIOCapabilitiesToJSON(
  deviceIOCapabilities: DeviceIOCapabilities,
): string {
  return JSON.stringify(
    DeviceIOCapabilities$outboundSchema.parse(deviceIOCapabilities),
  );
}

export function deviceIOCapabilitiesFromJSON(
  jsonString: string,
): SafeParseResult<DeviceIOCapabilities, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeviceIOCapabilities$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeviceIOCapabilities' from JSON`,
  );
}
