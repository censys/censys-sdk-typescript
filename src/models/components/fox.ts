/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Fox = {
  appName?: string | undefined;
  appVersion?: string | undefined;
  authAgentType?: string | undefined;
  brandId?: string | undefined;
  hostAddress?: string | undefined;
  hostId?: string | undefined;
  hostname?: string | undefined;
  id?: number | undefined;
  language?: string | undefined;
  osName?: string | undefined;
  osVersion?: string | undefined;
  stationName?: string | undefined;
  sysInfo?: string | undefined;
  timeZone?: string | undefined;
  version?: string | undefined;
  vmName?: string | undefined;
  vmUuid?: string | undefined;
  vmVersion?: string | undefined;
};

/** @internal */
export const Fox$inboundSchema: z.ZodType<Fox, z.ZodTypeDef, unknown> = z
  .object({
    app_name: z.string().optional(),
    app_version: z.string().optional(),
    auth_agent_type: z.string().optional(),
    brand_id: z.string().optional(),
    host_address: z.string().optional(),
    host_id: z.string().optional(),
    hostname: z.string().optional(),
    id: z.number().int().optional(),
    language: z.string().optional(),
    os_name: z.string().optional(),
    os_version: z.string().optional(),
    station_name: z.string().optional(),
    sys_info: z.string().optional(),
    time_zone: z.string().optional(),
    version: z.string().optional(),
    vm_name: z.string().optional(),
    vm_uuid: z.string().optional(),
    vm_version: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "app_name": "appName",
      "app_version": "appVersion",
      "auth_agent_type": "authAgentType",
      "brand_id": "brandId",
      "host_address": "hostAddress",
      "host_id": "hostId",
      "os_name": "osName",
      "os_version": "osVersion",
      "station_name": "stationName",
      "sys_info": "sysInfo",
      "time_zone": "timeZone",
      "vm_name": "vmName",
      "vm_uuid": "vmUuid",
      "vm_version": "vmVersion",
    });
  });

/** @internal */
export type Fox$Outbound = {
  app_name?: string | undefined;
  app_version?: string | undefined;
  auth_agent_type?: string | undefined;
  brand_id?: string | undefined;
  host_address?: string | undefined;
  host_id?: string | undefined;
  hostname?: string | undefined;
  id?: number | undefined;
  language?: string | undefined;
  os_name?: string | undefined;
  os_version?: string | undefined;
  station_name?: string | undefined;
  sys_info?: string | undefined;
  time_zone?: string | undefined;
  version?: string | undefined;
  vm_name?: string | undefined;
  vm_uuid?: string | undefined;
  vm_version?: string | undefined;
};

/** @internal */
export const Fox$outboundSchema: z.ZodType<Fox$Outbound, z.ZodTypeDef, Fox> = z
  .object({
    appName: z.string().optional(),
    appVersion: z.string().optional(),
    authAgentType: z.string().optional(),
    brandId: z.string().optional(),
    hostAddress: z.string().optional(),
    hostId: z.string().optional(),
    hostname: z.string().optional(),
    id: z.number().int().optional(),
    language: z.string().optional(),
    osName: z.string().optional(),
    osVersion: z.string().optional(),
    stationName: z.string().optional(),
    sysInfo: z.string().optional(),
    timeZone: z.string().optional(),
    version: z.string().optional(),
    vmName: z.string().optional(),
    vmUuid: z.string().optional(),
    vmVersion: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      appName: "app_name",
      appVersion: "app_version",
      authAgentType: "auth_agent_type",
      brandId: "brand_id",
      hostAddress: "host_address",
      hostId: "host_id",
      osName: "os_name",
      osVersion: "os_version",
      stationName: "station_name",
      sysInfo: "sys_info",
      timeZone: "time_zone",
      vmName: "vm_name",
      vmUuid: "vm_uuid",
      vmVersion: "vm_version",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Fox$ {
  /** @deprecated use `Fox$inboundSchema` instead. */
  export const inboundSchema = Fox$inboundSchema;
  /** @deprecated use `Fox$outboundSchema` instead. */
  export const outboundSchema = Fox$outboundSchema;
  /** @deprecated use `Fox$Outbound` instead. */
  export type Outbound = Fox$Outbound;
}

export function foxToJSON(fox: Fox): string {
  return JSON.stringify(Fox$outboundSchema.parse(fox));
}

export function foxFromJSON(
  jsonString: string,
): SafeParseResult<Fox, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Fox$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Fox' from JSON`,
  );
}
