/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  RootStore,
  RootStore$inboundSchema,
  RootStore$Outbound,
  RootStore$outboundSchema,
} from "./rootstore.js";

export type Validation = {
  apple?: RootStore | undefined;
  chrome?: RootStore | undefined;
  microsoft?: RootStore | undefined;
  nss?: RootStore | undefined;
};

/** @internal */
export const Validation$inboundSchema: z.ZodType<
  Validation,
  z.ZodTypeDef,
  unknown
> = z.object({
  apple: RootStore$inboundSchema.optional(),
  chrome: RootStore$inboundSchema.optional(),
  microsoft: RootStore$inboundSchema.optional(),
  nss: RootStore$inboundSchema.optional(),
});

/** @internal */
export type Validation$Outbound = {
  apple?: RootStore$Outbound | undefined;
  chrome?: RootStore$Outbound | undefined;
  microsoft?: RootStore$Outbound | undefined;
  nss?: RootStore$Outbound | undefined;
};

/** @internal */
export const Validation$outboundSchema: z.ZodType<
  Validation$Outbound,
  z.ZodTypeDef,
  Validation
> = z.object({
  apple: RootStore$outboundSchema.optional(),
  chrome: RootStore$outboundSchema.optional(),
  microsoft: RootStore$outboundSchema.optional(),
  nss: RootStore$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Validation$ {
  /** @deprecated use `Validation$inboundSchema` instead. */
  export const inboundSchema = Validation$inboundSchema;
  /** @deprecated use `Validation$outboundSchema` instead. */
  export const outboundSchema = Validation$outboundSchema;
  /** @deprecated use `Validation$Outbound` instead. */
  export type Outbound = Validation$Outbound;
}

export function validationToJSON(validation: Validation): string {
  return JSON.stringify(Validation$outboundSchema.parse(validation));
}

export function validationFromJSON(
  jsonString: string,
): SafeParseResult<Validation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Validation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Validation' from JSON`,
  );
}
