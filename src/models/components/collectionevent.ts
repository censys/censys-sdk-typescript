/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  EventAssetChange,
  EventAssetChange$inboundSchema,
  EventAssetChange$Outbound,
  EventAssetChange$outboundSchema,
} from "./eventassetchange.js";
import {
  EventStatusChange,
  EventStatusChange$inboundSchema,
  EventStatusChange$Outbound,
  EventStatusChange$outboundSchema,
} from "./eventstatuschange.js";

export type CollectionEvent = {
  assetChange?: EventAssetChange | undefined;
  statusChange?: EventStatusChange | undefined;
};

/** @internal */
export const CollectionEvent$inboundSchema: z.ZodType<
  CollectionEvent,
  z.ZodTypeDef,
  unknown
> = z.object({
  asset_change: EventAssetChange$inboundSchema.optional(),
  status_change: EventStatusChange$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "asset_change": "assetChange",
    "status_change": "statusChange",
  });
});

/** @internal */
export type CollectionEvent$Outbound = {
  asset_change?: EventAssetChange$Outbound | undefined;
  status_change?: EventStatusChange$Outbound | undefined;
};

/** @internal */
export const CollectionEvent$outboundSchema: z.ZodType<
  CollectionEvent$Outbound,
  z.ZodTypeDef,
  CollectionEvent
> = z.object({
  assetChange: EventAssetChange$outboundSchema.optional(),
  statusChange: EventStatusChange$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    assetChange: "asset_change",
    statusChange: "status_change",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CollectionEvent$ {
  /** @deprecated use `CollectionEvent$inboundSchema` instead. */
  export const inboundSchema = CollectionEvent$inboundSchema;
  /** @deprecated use `CollectionEvent$outboundSchema` instead. */
  export const outboundSchema = CollectionEvent$outboundSchema;
  /** @deprecated use `CollectionEvent$Outbound` instead. */
  export type Outbound = CollectionEvent$Outbound;
}

export function collectionEventToJSON(
  collectionEvent: CollectionEvent,
): string {
  return JSON.stringify(CollectionEvent$outboundSchema.parse(collectionEvent));
}

export function collectionEventFromJSON(
  jsonString: string,
): SafeParseResult<CollectionEvent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CollectionEvent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CollectionEvent' from JSON`,
  );
}
