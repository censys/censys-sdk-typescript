/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  IpmiCapabilities,
  IpmiCapabilities$inboundSchema,
  IpmiCapabilities$Outbound,
  IpmiCapabilities$outboundSchema,
} from "./ipmicapabilities.js";
import {
  IpmiCommandPayload,
  IpmiCommandPayload$inboundSchema,
  IpmiCommandPayload$Outbound,
  IpmiCommandPayload$outboundSchema,
} from "./ipmicommandpayload.js";
import {
  IpmiRMCPHeader,
  IpmiRMCPHeader$inboundSchema,
  IpmiRMCPHeader$Outbound,
  IpmiRMCPHeader$outboundSchema,
} from "./ipmirmcpheader.js";
import {
  IpmiSessionHeader,
  IpmiSessionHeader$inboundSchema,
  IpmiSessionHeader$Outbound,
  IpmiSessionHeader$outboundSchema,
} from "./ipmisessionheader.js";

export type Ipmi = {
  capabilities?: IpmiCapabilities | undefined;
  commandPayload?: IpmiCommandPayload | undefined;
  /**
   * The raw data returned by the server
   */
  raw?: string | undefined;
  rmcpHeader?: IpmiRMCPHeader | undefined;
  sessionHeader?: IpmiSessionHeader | undefined;
};

/** @internal */
export const Ipmi$inboundSchema: z.ZodType<Ipmi, z.ZodTypeDef, unknown> = z
  .object({
    capabilities: IpmiCapabilities$inboundSchema.optional(),
    command_payload: IpmiCommandPayload$inboundSchema.optional(),
    raw: z.string().optional(),
    rmcp_header: IpmiRMCPHeader$inboundSchema.optional(),
    session_header: IpmiSessionHeader$inboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      "command_payload": "commandPayload",
      "rmcp_header": "rmcpHeader",
      "session_header": "sessionHeader",
    });
  });

/** @internal */
export type Ipmi$Outbound = {
  capabilities?: IpmiCapabilities$Outbound | undefined;
  command_payload?: IpmiCommandPayload$Outbound | undefined;
  raw?: string | undefined;
  rmcp_header?: IpmiRMCPHeader$Outbound | undefined;
  session_header?: IpmiSessionHeader$Outbound | undefined;
};

/** @internal */
export const Ipmi$outboundSchema: z.ZodType<Ipmi$Outbound, z.ZodTypeDef, Ipmi> =
  z.object({
    capabilities: IpmiCapabilities$outboundSchema.optional(),
    commandPayload: IpmiCommandPayload$outboundSchema.optional(),
    raw: z.string().optional(),
    rmcpHeader: IpmiRMCPHeader$outboundSchema.optional(),
    sessionHeader: IpmiSessionHeader$outboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      commandPayload: "command_payload",
      rmcpHeader: "rmcp_header",
      sessionHeader: "session_header",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Ipmi$ {
  /** @deprecated use `Ipmi$inboundSchema` instead. */
  export const inboundSchema = Ipmi$inboundSchema;
  /** @deprecated use `Ipmi$outboundSchema` instead. */
  export const outboundSchema = Ipmi$outboundSchema;
  /** @deprecated use `Ipmi$Outbound` instead. */
  export type Outbound = Ipmi$Outbound;
}

export function ipmiToJSON(ipmi: Ipmi): string {
  return JSON.stringify(Ipmi$outboundSchema.parse(ipmi));
}

export function ipmiFromJSON(
  jsonString: string,
): SafeParseResult<Ipmi, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Ipmi$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Ipmi' from JSON`,
  );
}
