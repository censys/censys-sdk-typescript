/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type NTPNTPHeader = {
  /**
   * An enumerated value from 0 to 3 signifying whether a leap second will occur at the end of the current month. 0 signifies no leap second, 1 signifies an additive leap second, 2 signifies a subtractive leap second, and 3 signifies the state is unknown.
   */
  leapIndicator?: number | undefined;
  /**
   * An enumerated value from 0 to 7 signifying the operational mode of the server.
   */
  mode?: number | undefined;
  /**
   * The interval within which the server will expect a subsequent synchronization message, in log2 seconds.
   */
  poll?: number | undefined;
  /**
   * The precision of the system's clock, in log2 seconds.
   */
  precision?: number | undefined;
  /**
   * The identifier of the reference clock. For servers in stratum 1, one of an IANA-maintained list of sources. For servers in stratum 2, the ID of the stratum 1 server from which the time was retrieved (usually, its IP address), etc.
   */
  referenceId?: string | undefined;
  /**
   * The number of servers between a client and a non-NTP time source. 1 signifies that the server is authoritative, having direct access to a sensor. 2 signifies that the server got its time from a "stratum 1" server, etc. 16 means the clock is unsynchronized.
   */
  stratum?: number | undefined;
  /**
   * The NTP version indicated in the server's response.
   */
  version?: number | undefined;
};

/** @internal */
export const NTPNTPHeader$inboundSchema: z.ZodType<
  NTPNTPHeader,
  z.ZodTypeDef,
  unknown
> = z.object({
  leap_indicator: z.number().int().optional(),
  mode: z.number().int().optional(),
  poll: z.number().int().optional(),
  precision: z.number().int().optional(),
  reference_id: z.string().optional(),
  stratum: z.number().int().optional(),
  version: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "leap_indicator": "leapIndicator",
    "reference_id": "referenceId",
  });
});

/** @internal */
export type NTPNTPHeader$Outbound = {
  leap_indicator?: number | undefined;
  mode?: number | undefined;
  poll?: number | undefined;
  precision?: number | undefined;
  reference_id?: string | undefined;
  stratum?: number | undefined;
  version?: number | undefined;
};

/** @internal */
export const NTPNTPHeader$outboundSchema: z.ZodType<
  NTPNTPHeader$Outbound,
  z.ZodTypeDef,
  NTPNTPHeader
> = z.object({
  leapIndicator: z.number().int().optional(),
  mode: z.number().int().optional(),
  poll: z.number().int().optional(),
  precision: z.number().int().optional(),
  referenceId: z.string().optional(),
  stratum: z.number().int().optional(),
  version: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    leapIndicator: "leap_indicator",
    referenceId: "reference_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NTPNTPHeader$ {
  /** @deprecated use `NTPNTPHeader$inboundSchema` instead. */
  export const inboundSchema = NTPNTPHeader$inboundSchema;
  /** @deprecated use `NTPNTPHeader$outboundSchema` instead. */
  export const outboundSchema = NTPNTPHeader$outboundSchema;
  /** @deprecated use `NTPNTPHeader$Outbound` instead. */
  export type Outbound = NTPNTPHeader$Outbound;
}

export function ntpNTPHeaderToJSON(ntpntpHeader: NTPNTPHeader): string {
  return JSON.stringify(NTPNTPHeader$outboundSchema.parse(ntpntpHeader));
}

export function ntpNTPHeaderFromJSON(
  jsonString: string,
): SafeParseResult<NTPNTPHeader, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NTPNTPHeader$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NTPNTPHeader' from JSON`,
  );
}
