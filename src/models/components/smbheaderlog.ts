/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SmbHeaderLog = {
  command?: number | undefined;
  credits?: number | undefined;
  flags?: number | undefined;
  protocolId?: string | undefined;
  status?: number | undefined;
};

/** @internal */
export const SmbHeaderLog$inboundSchema: z.ZodType<
  SmbHeaderLog,
  z.ZodTypeDef,
  unknown
> = z.object({
  command: z.number().int().optional(),
  credits: z.number().int().optional(),
  flags: z.number().int().optional(),
  protocol_id: z.string().optional(),
  status: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "protocol_id": "protocolId",
  });
});

/** @internal */
export type SmbHeaderLog$Outbound = {
  command?: number | undefined;
  credits?: number | undefined;
  flags?: number | undefined;
  protocol_id?: string | undefined;
  status?: number | undefined;
};

/** @internal */
export const SmbHeaderLog$outboundSchema: z.ZodType<
  SmbHeaderLog$Outbound,
  z.ZodTypeDef,
  SmbHeaderLog
> = z.object({
  command: z.number().int().optional(),
  credits: z.number().int().optional(),
  flags: z.number().int().optional(),
  protocolId: z.string().optional(),
  status: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    protocolId: "protocol_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SmbHeaderLog$ {
  /** @deprecated use `SmbHeaderLog$inboundSchema` instead. */
  export const inboundSchema = SmbHeaderLog$inboundSchema;
  /** @deprecated use `SmbHeaderLog$outboundSchema` instead. */
  export const outboundSchema = SmbHeaderLog$outboundSchema;
  /** @deprecated use `SmbHeaderLog$Outbound` instead. */
  export type Outbound = SmbHeaderLog$Outbound;
}

export function smbHeaderLogToJSON(smbHeaderLog: SmbHeaderLog): string {
  return JSON.stringify(SmbHeaderLog$outboundSchema.parse(smbHeaderLog));
}

export function smbHeaderLogFromJSON(
  jsonString: string,
): SafeParseResult<SmbHeaderLog, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SmbHeaderLog$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SmbHeaderLog' from JSON`,
  );
}
