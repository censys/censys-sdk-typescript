/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  EthereumVersion,
  EthereumVersion$inboundSchema,
  EthereumVersion$Outbound,
  EthereumVersion$outboundSchema,
} from "./ethereumversion.js";

export type Ethereum = {
  accounts?: Array<string> | null | undefined;
  hashrate?: string | undefined;
  version?: EthereumVersion | undefined;
};

/** @internal */
export const Ethereum$inboundSchema: z.ZodType<
  Ethereum,
  z.ZodTypeDef,
  unknown
> = z.object({
  accounts: z.nullable(z.array(z.string())).optional(),
  hashrate: z.string().optional(),
  version: EthereumVersion$inboundSchema.optional(),
});

/** @internal */
export type Ethereum$Outbound = {
  accounts?: Array<string> | null | undefined;
  hashrate?: string | undefined;
  version?: EthereumVersion$Outbound | undefined;
};

/** @internal */
export const Ethereum$outboundSchema: z.ZodType<
  Ethereum$Outbound,
  z.ZodTypeDef,
  Ethereum
> = z.object({
  accounts: z.nullable(z.array(z.string())).optional(),
  hashrate: z.string().optional(),
  version: EthereumVersion$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Ethereum$ {
  /** @deprecated use `Ethereum$inboundSchema` instead. */
  export const inboundSchema = Ethereum$inboundSchema;
  /** @deprecated use `Ethereum$outboundSchema` instead. */
  export const outboundSchema = Ethereum$outboundSchema;
  /** @deprecated use `Ethereum$Outbound` instead. */
  export type Outbound = Ethereum$Outbound;
}

export function ethereumToJSON(ethereum: Ethereum): string {
  return JSON.stringify(Ethereum$outboundSchema.parse(ethereum));
}

export function ethereumFromJSON(
  jsonString: string,
): SafeParseResult<Ethereum, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Ethereum$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Ethereum' from JSON`,
  );
}
