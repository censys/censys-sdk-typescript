/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AutonomousSystem = {
  /**
   * The ASN (autonomous system number) of the host's autonomous system.
   */
  asn?: number | undefined;
  /**
   * The autonomous system's CIDR.
   */
  bgpPrefix?: string | undefined;
  /**
   * The autonomous system's two-letter ISO 3166-1 alpha-2 country code (US, CN, GB, RU, ...).
   */
  countryCode?: string | undefined;
  /**
   * Brief description of the autonomous system.
   */
  description?: string | undefined;
  /**
   * The friendly name of the autonomous system.
   */
  name?: string | undefined;
  /**
   * The name of the organization managning the autonomous system.
   */
  organization?: string | undefined;
};

/** @internal */
export const AutonomousSystem$inboundSchema: z.ZodType<
  AutonomousSystem,
  z.ZodTypeDef,
  unknown
> = z.object({
  asn: z.number().int().optional(),
  bgp_prefix: z.string().optional(),
  country_code: z.string().optional(),
  description: z.string().optional(),
  name: z.string().optional(),
  organization: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "bgp_prefix": "bgpPrefix",
    "country_code": "countryCode",
  });
});

/** @internal */
export type AutonomousSystem$Outbound = {
  asn?: number | undefined;
  bgp_prefix?: string | undefined;
  country_code?: string | undefined;
  description?: string | undefined;
  name?: string | undefined;
  organization?: string | undefined;
};

/** @internal */
export const AutonomousSystem$outboundSchema: z.ZodType<
  AutonomousSystem$Outbound,
  z.ZodTypeDef,
  AutonomousSystem
> = z.object({
  asn: z.number().int().optional(),
  bgpPrefix: z.string().optional(),
  countryCode: z.string().optional(),
  description: z.string().optional(),
  name: z.string().optional(),
  organization: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    bgpPrefix: "bgp_prefix",
    countryCode: "country_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AutonomousSystem$ {
  /** @deprecated use `AutonomousSystem$inboundSchema` instead. */
  export const inboundSchema = AutonomousSystem$inboundSchema;
  /** @deprecated use `AutonomousSystem$outboundSchema` instead. */
  export const outboundSchema = AutonomousSystem$outboundSchema;
  /** @deprecated use `AutonomousSystem$Outbound` instead. */
  export type Outbound = AutonomousSystem$Outbound;
}

export function autonomousSystemToJSON(
  autonomousSystem: AutonomousSystem,
): string {
  return JSON.stringify(
    AutonomousSystem$outboundSchema.parse(autonomousSystem),
  );
}

export function autonomousSystemFromJSON(
  jsonString: string,
): SafeParseResult<AutonomousSystem, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AutonomousSystem$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AutonomousSystem' from JSON`,
  );
}
