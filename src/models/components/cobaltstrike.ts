/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  CobaltStrikeConfig,
  CobaltStrikeConfig$inboundSchema,
  CobaltStrikeConfig$Outbound,
  CobaltStrikeConfig$outboundSchema,
} from "./cobaltstrikeconfig.js";

export type CobaltStrike = {
  x64?: CobaltStrikeConfig | undefined;
  x86?: CobaltStrikeConfig | undefined;
};

/** @internal */
export const CobaltStrike$inboundSchema: z.ZodType<
  CobaltStrike,
  z.ZodTypeDef,
  unknown
> = z.object({
  x64: CobaltStrikeConfig$inboundSchema.optional(),
  x86: CobaltStrikeConfig$inboundSchema.optional(),
});

/** @internal */
export type CobaltStrike$Outbound = {
  x64?: CobaltStrikeConfig$Outbound | undefined;
  x86?: CobaltStrikeConfig$Outbound | undefined;
};

/** @internal */
export const CobaltStrike$outboundSchema: z.ZodType<
  CobaltStrike$Outbound,
  z.ZodTypeDef,
  CobaltStrike
> = z.object({
  x64: CobaltStrikeConfig$outboundSchema.optional(),
  x86: CobaltStrikeConfig$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CobaltStrike$ {
  /** @deprecated use `CobaltStrike$inboundSchema` instead. */
  export const inboundSchema = CobaltStrike$inboundSchema;
  /** @deprecated use `CobaltStrike$outboundSchema` instead. */
  export const outboundSchema = CobaltStrike$outboundSchema;
  /** @deprecated use `CobaltStrike$Outbound` instead. */
  export type Outbound = CobaltStrike$Outbound;
}

export function cobaltStrikeToJSON(cobaltStrike: CobaltStrike): string {
  return JSON.stringify(CobaltStrike$outboundSchema.parse(cobaltStrike));
}

export function cobaltStrikeFromJSON(
  jsonString: string,
): SafeParseResult<CobaltStrike, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CobaltStrike$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CobaltStrike' from JSON`,
  );
}
