/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Auth = {
  enabled?: boolean | undefined;
};

/** @internal */
export const Auth$inboundSchema: z.ZodType<Auth, z.ZodTypeDef, unknown> = z
  .object({
    enabled: z.boolean().optional(),
  });

/** @internal */
export type Auth$Outbound = {
  enabled?: boolean | undefined;
};

/** @internal */
export const Auth$outboundSchema: z.ZodType<Auth$Outbound, z.ZodTypeDef, Auth> =
  z.object({
    enabled: z.boolean().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Auth$ {
  /** @deprecated use `Auth$inboundSchema` instead. */
  export const inboundSchema = Auth$inboundSchema;
  /** @deprecated use `Auth$outboundSchema` instead. */
  export const outboundSchema = Auth$outboundSchema;
  /** @deprecated use `Auth$Outbound` instead. */
  export type Outbound = Auth$Outbound;
}

export function authToJSON(auth: Auth): string {
  return JSON.stringify(Auth$outboundSchema.parse(auth));
}

export function authFromJSON(
  jsonString: string,
): SafeParseResult<Auth, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Auth$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Auth' from JSON`,
  );
}
