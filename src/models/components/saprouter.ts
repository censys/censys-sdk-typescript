/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  SapRouterRouterInfo,
  SapRouterRouterInfo$inboundSchema,
  SapRouterRouterInfo$Outbound,
  SapRouterRouterInfo$outboundSchema,
} from "./saprouterrouterinfo.js";
import {
  SapRouterRouterVersionInfo,
  SapRouterRouterVersionInfo$inboundSchema,
  SapRouterRouterVersionInfo$Outbound,
  SapRouterRouterVersionInfo$outboundSchema,
} from "./saprouterrouterversioninfo.js";

export type SapRouter = {
  routerInfo?: SapRouterRouterInfo | undefined;
  routerVersionInfo?: SapRouterRouterVersionInfo | undefined;
};

/** @internal */
export const SapRouter$inboundSchema: z.ZodType<
  SapRouter,
  z.ZodTypeDef,
  unknown
> = z.object({
  router_info: SapRouterRouterInfo$inboundSchema.optional(),
  router_version_info: SapRouterRouterVersionInfo$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "router_info": "routerInfo",
    "router_version_info": "routerVersionInfo",
  });
});

/** @internal */
export type SapRouter$Outbound = {
  router_info?: SapRouterRouterInfo$Outbound | undefined;
  router_version_info?: SapRouterRouterVersionInfo$Outbound | undefined;
};

/** @internal */
export const SapRouter$outboundSchema: z.ZodType<
  SapRouter$Outbound,
  z.ZodTypeDef,
  SapRouter
> = z.object({
  routerInfo: SapRouterRouterInfo$outboundSchema.optional(),
  routerVersionInfo: SapRouterRouterVersionInfo$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    routerInfo: "router_info",
    routerVersionInfo: "router_version_info",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SapRouter$ {
  /** @deprecated use `SapRouter$inboundSchema` instead. */
  export const inboundSchema = SapRouter$inboundSchema;
  /** @deprecated use `SapRouter$outboundSchema` instead. */
  export const outboundSchema = SapRouter$outboundSchema;
  /** @deprecated use `SapRouter$Outbound` instead. */
  export type Outbound = SapRouter$Outbound;
}

export function sapRouterToJSON(sapRouter: SapRouter): string {
  return JSON.stringify(SapRouter$outboundSchema.parse(sapRouter));
}

export function sapRouterFromJSON(
  jsonString: string,
): SafeParseResult<SapRouter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SapRouter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SapRouter' from JSON`,
  );
}
