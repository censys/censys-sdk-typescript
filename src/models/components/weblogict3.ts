/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type WeblogicT3 = {
  error?: string | undefined;
  errorMessage?: string | undefined;
  weblogicVersion?: string | undefined;
};

/** @internal */
export const WeblogicT3$inboundSchema: z.ZodType<
  WeblogicT3,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.string().optional(),
  error_message: z.string().optional(),
  weblogic_version: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "error_message": "errorMessage",
    "weblogic_version": "weblogicVersion",
  });
});

/** @internal */
export type WeblogicT3$Outbound = {
  error?: string | undefined;
  error_message?: string | undefined;
  weblogic_version?: string | undefined;
};

/** @internal */
export const WeblogicT3$outboundSchema: z.ZodType<
  WeblogicT3$Outbound,
  z.ZodTypeDef,
  WeblogicT3
> = z.object({
  error: z.string().optional(),
  errorMessage: z.string().optional(),
  weblogicVersion: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    errorMessage: "error_message",
    weblogicVersion: "weblogic_version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WeblogicT3$ {
  /** @deprecated use `WeblogicT3$inboundSchema` instead. */
  export const inboundSchema = WeblogicT3$inboundSchema;
  /** @deprecated use `WeblogicT3$outboundSchema` instead. */
  export const outboundSchema = WeblogicT3$outboundSchema;
  /** @deprecated use `WeblogicT3$Outbound` instead. */
  export type Outbound = WeblogicT3$Outbound;
}

export function weblogicT3ToJSON(weblogicT3: WeblogicT3): string {
  return JSON.stringify(WeblogicT3$outboundSchema.parse(weblogicT3));
}

export function weblogicT3FromJSON(
  jsonString: string,
): SafeParseResult<WeblogicT3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WeblogicT3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WeblogicT3' from JSON`,
  );
}
