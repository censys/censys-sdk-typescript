/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  SearchAggregateResponse,
  SearchAggregateResponse$inboundSchema,
  SearchAggregateResponse$Outbound,
  SearchAggregateResponse$outboundSchema,
} from "./searchaggregateresponse.js";

export type ResponseEnvelopeSearchAggregateResponse = {
  result?: SearchAggregateResponse | undefined;
};

/** @internal */
export const ResponseEnvelopeSearchAggregateResponse$inboundSchema: z.ZodType<
  ResponseEnvelopeSearchAggregateResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  result: SearchAggregateResponse$inboundSchema.optional(),
});

/** @internal */
export type ResponseEnvelopeSearchAggregateResponse$Outbound = {
  result?: SearchAggregateResponse$Outbound | undefined;
};

/** @internal */
export const ResponseEnvelopeSearchAggregateResponse$outboundSchema: z.ZodType<
  ResponseEnvelopeSearchAggregateResponse$Outbound,
  z.ZodTypeDef,
  ResponseEnvelopeSearchAggregateResponse
> = z.object({
  result: SearchAggregateResponse$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseEnvelopeSearchAggregateResponse$ {
  /** @deprecated use `ResponseEnvelopeSearchAggregateResponse$inboundSchema` instead. */
  export const inboundSchema =
    ResponseEnvelopeSearchAggregateResponse$inboundSchema;
  /** @deprecated use `ResponseEnvelopeSearchAggregateResponse$outboundSchema` instead. */
  export const outboundSchema =
    ResponseEnvelopeSearchAggregateResponse$outboundSchema;
  /** @deprecated use `ResponseEnvelopeSearchAggregateResponse$Outbound` instead. */
  export type Outbound = ResponseEnvelopeSearchAggregateResponse$Outbound;
}

export function responseEnvelopeSearchAggregateResponseToJSON(
  responseEnvelopeSearchAggregateResponse:
    ResponseEnvelopeSearchAggregateResponse,
): string {
  return JSON.stringify(
    ResponseEnvelopeSearchAggregateResponse$outboundSchema.parse(
      responseEnvelopeSearchAggregateResponse,
    ),
  );
}

export function responseEnvelopeSearchAggregateResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  ResponseEnvelopeSearchAggregateResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ResponseEnvelopeSearchAggregateResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ResponseEnvelopeSearchAggregateResponse' from JSON`,
  );
}
