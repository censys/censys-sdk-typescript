/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  CountCondition,
  CountCondition$inboundSchema,
  CountCondition$Outbound,
  CountCondition$outboundSchema,
} from "./countcondition.js";

export type SearchValueCountsInputBody = {
  /**
   * Groups of field-value pairs to count matches for.
   */
  andCountConditions: Array<CountCondition> | null;
};

/** @internal */
export const SearchValueCountsInputBody$inboundSchema: z.ZodType<
  SearchValueCountsInputBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  and_count_conditions: z.nullable(z.array(CountCondition$inboundSchema)),
}).transform((v) => {
  return remap$(v, {
    "and_count_conditions": "andCountConditions",
  });
});

/** @internal */
export type SearchValueCountsInputBody$Outbound = {
  and_count_conditions: Array<CountCondition$Outbound> | null;
};

/** @internal */
export const SearchValueCountsInputBody$outboundSchema: z.ZodType<
  SearchValueCountsInputBody$Outbound,
  z.ZodTypeDef,
  SearchValueCountsInputBody
> = z.object({
  andCountConditions: z.nullable(z.array(CountCondition$outboundSchema)),
}).transform((v) => {
  return remap$(v, {
    andCountConditions: "and_count_conditions",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchValueCountsInputBody$ {
  /** @deprecated use `SearchValueCountsInputBody$inboundSchema` instead. */
  export const inboundSchema = SearchValueCountsInputBody$inboundSchema;
  /** @deprecated use `SearchValueCountsInputBody$outboundSchema` instead. */
  export const outboundSchema = SearchValueCountsInputBody$outboundSchema;
  /** @deprecated use `SearchValueCountsInputBody$Outbound` instead. */
  export type Outbound = SearchValueCountsInputBody$Outbound;
}

export function searchValueCountsInputBodyToJSON(
  searchValueCountsInputBody: SearchValueCountsInputBody,
): string {
  return JSON.stringify(
    SearchValueCountsInputBody$outboundSchema.parse(searchValueCountsInputBody),
  );
}

export function searchValueCountsInputBodyFromJSON(
  jsonString: string,
): SafeParseResult<SearchValueCountsInputBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchValueCountsInputBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchValueCountsInputBody' from JSON`,
  );
}
