/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ElasticSearchSystemInfoVer,
  ElasticSearchSystemInfoVer$inboundSchema,
  ElasticSearchSystemInfoVer$Outbound,
  ElasticSearchSystemInfoVer$outboundSchema,
} from "./elasticsearchsysteminfover.js";

export type ElasticSearchSystemInfo = {
  clusterUuid?: string | undefined;
  name?: string | undefined;
  tagline?: string | undefined;
  version?: ElasticSearchSystemInfoVer | undefined;
};

/** @internal */
export const ElasticSearchSystemInfo$inboundSchema: z.ZodType<
  ElasticSearchSystemInfo,
  z.ZodTypeDef,
  unknown
> = z.object({
  cluster_uuid: z.string().optional(),
  name: z.string().optional(),
  tagline: z.string().optional(),
  version: ElasticSearchSystemInfoVer$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "cluster_uuid": "clusterUuid",
  });
});

/** @internal */
export type ElasticSearchSystemInfo$Outbound = {
  cluster_uuid?: string | undefined;
  name?: string | undefined;
  tagline?: string | undefined;
  version?: ElasticSearchSystemInfoVer$Outbound | undefined;
};

/** @internal */
export const ElasticSearchSystemInfo$outboundSchema: z.ZodType<
  ElasticSearchSystemInfo$Outbound,
  z.ZodTypeDef,
  ElasticSearchSystemInfo
> = z.object({
  clusterUuid: z.string().optional(),
  name: z.string().optional(),
  tagline: z.string().optional(),
  version: ElasticSearchSystemInfoVer$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    clusterUuid: "cluster_uuid",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ElasticSearchSystemInfo$ {
  /** @deprecated use `ElasticSearchSystemInfo$inboundSchema` instead. */
  export const inboundSchema = ElasticSearchSystemInfo$inboundSchema;
  /** @deprecated use `ElasticSearchSystemInfo$outboundSchema` instead. */
  export const outboundSchema = ElasticSearchSystemInfo$outboundSchema;
  /** @deprecated use `ElasticSearchSystemInfo$Outbound` instead. */
  export type Outbound = ElasticSearchSystemInfo$Outbound;
}

export function elasticSearchSystemInfoToJSON(
  elasticSearchSystemInfo: ElasticSearchSystemInfo,
): string {
  return JSON.stringify(
    ElasticSearchSystemInfo$outboundSchema.parse(elasticSearchSystemInfo),
  );
}

export function elasticSearchSystemInfoFromJSON(
  jsonString: string,
): SafeParseResult<ElasticSearchSystemInfo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ElasticSearchSystemInfo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ElasticSearchSystemInfo' from JSON`,
  );
}
