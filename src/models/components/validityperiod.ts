/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ValidityPeriod = {
  /**
   * The duration of the certificate's validity period, in seconds.
   */
  lengthSeconds?: number | undefined;
  /**
   * An RFC-3339-formatted timestamp after which the certificate is no longer valid.
   */
  notAfter?: string | undefined;
  /**
   * An RFC-3339-formatted timestamp before which the certificate is not valid.
   */
  notBefore?: string | undefined;
};

/** @internal */
export const ValidityPeriod$inboundSchema: z.ZodType<
  ValidityPeriod,
  z.ZodTypeDef,
  unknown
> = z.object({
  length_seconds: z.number().int().optional(),
  not_after: z.string().optional(),
  not_before: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "length_seconds": "lengthSeconds",
    "not_after": "notAfter",
    "not_before": "notBefore",
  });
});

/** @internal */
export type ValidityPeriod$Outbound = {
  length_seconds?: number | undefined;
  not_after?: string | undefined;
  not_before?: string | undefined;
};

/** @internal */
export const ValidityPeriod$outboundSchema: z.ZodType<
  ValidityPeriod$Outbound,
  z.ZodTypeDef,
  ValidityPeriod
> = z.object({
  lengthSeconds: z.number().int().optional(),
  notAfter: z.string().optional(),
  notBefore: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    lengthSeconds: "length_seconds",
    notAfter: "not_after",
    notBefore: "not_before",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ValidityPeriod$ {
  /** @deprecated use `ValidityPeriod$inboundSchema` instead. */
  export const inboundSchema = ValidityPeriod$inboundSchema;
  /** @deprecated use `ValidityPeriod$outboundSchema` instead. */
  export const outboundSchema = ValidityPeriod$outboundSchema;
  /** @deprecated use `ValidityPeriod$Outbound` instead. */
  export type Outbound = ValidityPeriod$Outbound;
}

export function validityPeriodToJSON(validityPeriod: ValidityPeriod): string {
  return JSON.stringify(ValidityPeriod$outboundSchema.parse(validityPeriod));
}

export function validityPeriodFromJSON(
  jsonString: string,
): SafeParseResult<ValidityPeriod, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ValidityPeriod$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ValidityPeriod' from JSON`,
  );
}
