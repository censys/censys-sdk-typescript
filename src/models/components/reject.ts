/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const RejectType = {
  Unrecognized: "unrecognized",
  WrongVersion: "wrong_version",
  InvalidUsername: "invalid_username",
  WrongUserPw: "wrong_user_pw",
  WrongServerPw: "wrong_server_pw",
  UsernameInUse: "username_in_use",
  ServerFull: "server_full",
  NoCertificate: "no_certificate",
  AuthenticatorFail: "authenticator_fail",
} as const;
export type RejectType = ClosedEnum<typeof RejectType>;

export type Reject = {
  reason?: string | undefined;
  type?: RejectType | undefined;
};

/** @internal */
export const RejectType$inboundSchema: z.ZodNativeEnum<typeof RejectType> = z
  .nativeEnum(RejectType);

/** @internal */
export const RejectType$outboundSchema: z.ZodNativeEnum<typeof RejectType> =
  RejectType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RejectType$ {
  /** @deprecated use `RejectType$inboundSchema` instead. */
  export const inboundSchema = RejectType$inboundSchema;
  /** @deprecated use `RejectType$outboundSchema` instead. */
  export const outboundSchema = RejectType$outboundSchema;
}

/** @internal */
export const Reject$inboundSchema: z.ZodType<Reject, z.ZodTypeDef, unknown> = z
  .object({
    reason: z.string().optional(),
    type: RejectType$inboundSchema.optional(),
  });

/** @internal */
export type Reject$Outbound = {
  reason?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const Reject$outboundSchema: z.ZodType<
  Reject$Outbound,
  z.ZodTypeDef,
  Reject
> = z.object({
  reason: z.string().optional(),
  type: RejectType$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Reject$ {
  /** @deprecated use `Reject$inboundSchema` instead. */
  export const inboundSchema = Reject$inboundSchema;
  /** @deprecated use `Reject$outboundSchema` instead. */
  export const outboundSchema = Reject$outboundSchema;
  /** @deprecated use `Reject$Outbound` instead. */
  export type Outbound = Reject$Outbound;
}

export function rejectToJSON(reject: Reject): string {
  return JSON.stringify(Reject$outboundSchema.parse(reject));
}

export function rejectFromJSON(
  jsonString: string,
): SafeParseResult<Reject, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Reject$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Reject' from JSON`,
  );
}
