/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type IpmiCapabilitiesSupportedAuthTypes = {
  /**
   * If true, the extended capabilities are present.
   */
  extended?: boolean | undefined;
  /**
   * True if the MD2 AuthType is supported.
   */
  md2?: boolean | undefined;
  /**
   * True if the MD5 AuthType is supported.
   */
  md5?: boolean | undefined;
  /**
   * True if the None AuthType is supported.
   */
  none?: boolean | undefined;
  /**
   * True if the OEM Proprietary AuthType is supported
   */
  oemProprietary?: boolean | undefined;
  /**
   * True if the Password AuthType is supported.
   */
  password?: boolean | undefined;
  /**
   * The raw byte, with the bit mask etc
   */
  raw?: number | undefined;
};

/** @internal */
export const IpmiCapabilitiesSupportedAuthTypes$inboundSchema: z.ZodType<
  IpmiCapabilitiesSupportedAuthTypes,
  z.ZodTypeDef,
  unknown
> = z.object({
  extended: z.boolean().optional(),
  md2: z.boolean().optional(),
  md5: z.boolean().optional(),
  none: z.boolean().optional(),
  oem_proprietary: z.boolean().optional(),
  password: z.boolean().optional(),
  raw: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "oem_proprietary": "oemProprietary",
  });
});

/** @internal */
export type IpmiCapabilitiesSupportedAuthTypes$Outbound = {
  extended?: boolean | undefined;
  md2?: boolean | undefined;
  md5?: boolean | undefined;
  none?: boolean | undefined;
  oem_proprietary?: boolean | undefined;
  password?: boolean | undefined;
  raw?: number | undefined;
};

/** @internal */
export const IpmiCapabilitiesSupportedAuthTypes$outboundSchema: z.ZodType<
  IpmiCapabilitiesSupportedAuthTypes$Outbound,
  z.ZodTypeDef,
  IpmiCapabilitiesSupportedAuthTypes
> = z.object({
  extended: z.boolean().optional(),
  md2: z.boolean().optional(),
  md5: z.boolean().optional(),
  none: z.boolean().optional(),
  oemProprietary: z.boolean().optional(),
  password: z.boolean().optional(),
  raw: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    oemProprietary: "oem_proprietary",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IpmiCapabilitiesSupportedAuthTypes$ {
  /** @deprecated use `IpmiCapabilitiesSupportedAuthTypes$inboundSchema` instead. */
  export const inboundSchema = IpmiCapabilitiesSupportedAuthTypes$inboundSchema;
  /** @deprecated use `IpmiCapabilitiesSupportedAuthTypes$outboundSchema` instead. */
  export const outboundSchema =
    IpmiCapabilitiesSupportedAuthTypes$outboundSchema;
  /** @deprecated use `IpmiCapabilitiesSupportedAuthTypes$Outbound` instead. */
  export type Outbound = IpmiCapabilitiesSupportedAuthTypes$Outbound;
}

export function ipmiCapabilitiesSupportedAuthTypesToJSON(
  ipmiCapabilitiesSupportedAuthTypes: IpmiCapabilitiesSupportedAuthTypes,
): string {
  return JSON.stringify(
    IpmiCapabilitiesSupportedAuthTypes$outboundSchema.parse(
      ipmiCapabilitiesSupportedAuthTypes,
    ),
  );
}

export function ipmiCapabilitiesSupportedAuthTypesFromJSON(
  jsonString: string,
): SafeParseResult<IpmiCapabilitiesSupportedAuthTypes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      IpmiCapabilitiesSupportedAuthTypes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'IpmiCapabilitiesSupportedAuthTypes' from JSON`,
  );
}
