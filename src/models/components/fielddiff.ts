/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type FieldDiff = {
  new?: string | undefined;
  old?: string | undefined;
};

/** @internal */
export const FieldDiff$inboundSchema: z.ZodType<
  FieldDiff,
  z.ZodTypeDef,
  unknown
> = z.object({
  new: z.string().optional(),
  old: z.string().optional(),
});

/** @internal */
export type FieldDiff$Outbound = {
  new?: string | undefined;
  old?: string | undefined;
};

/** @internal */
export const FieldDiff$outboundSchema: z.ZodType<
  FieldDiff$Outbound,
  z.ZodTypeDef,
  FieldDiff
> = z.object({
  new: z.string().optional(),
  old: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldDiff$ {
  /** @deprecated use `FieldDiff$inboundSchema` instead. */
  export const inboundSchema = FieldDiff$inboundSchema;
  /** @deprecated use `FieldDiff$outboundSchema` instead. */
  export const outboundSchema = FieldDiff$outboundSchema;
  /** @deprecated use `FieldDiff$Outbound` instead. */
  export type Outbound = FieldDiff$Outbound;
}

export function fieldDiffToJSON(fieldDiff: FieldDiff): string {
  return JSON.stringify(FieldDiff$outboundSchema.parse(fieldDiff));
}

export function fieldDiffFromJSON(
  jsonString: string,
): SafeParseResult<FieldDiff, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldDiff$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldDiff' from JSON`,
  );
}
