/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  DSACryptographicKey,
  DSACryptographicKey$inboundSchema,
  DSACryptographicKey$Outbound,
  DSACryptographicKey$outboundSchema,
} from "./dsacryptographickey.js";
import {
  ECDSACryptographicKey,
  ECDSACryptographicKey$inboundSchema,
  ECDSACryptographicKey$Outbound,
  ECDSACryptographicKey$outboundSchema,
} from "./ecdsacryptographickey.js";
import {
  Ed25519CryptographicKey,
  Ed25519CryptographicKey$inboundSchema,
  Ed25519CryptographicKey$Outbound,
  Ed25519CryptographicKey$outboundSchema,
} from "./ed25519cryptographickey.js";
import {
  RSACryptographicKey,
  RSACryptographicKey$inboundSchema,
  RSACryptographicKey$Outbound,
  RSACryptographicKey$outboundSchema,
} from "./rsacryptographickey.js";

export type SshServerHostKey = {
  certkeyPublicKey?: string | undefined;
  dsaPublicKey?: DSACryptographicKey | undefined;
  ecdsaPublicKey?: ECDSACryptographicKey | undefined;
  ed25519PublicKey?: Ed25519CryptographicKey | undefined;
  fingerprintSha256?: string | undefined;
  rsaPublicKey?: RSACryptographicKey | undefined;
};

/** @internal */
export const SshServerHostKey$inboundSchema: z.ZodType<
  SshServerHostKey,
  z.ZodTypeDef,
  unknown
> = z.object({
  certkey_public_key: z.string().optional(),
  dsa_public_key: DSACryptographicKey$inboundSchema.optional(),
  ecdsa_public_key: ECDSACryptographicKey$inboundSchema.optional(),
  ed25519_public_key: Ed25519CryptographicKey$inboundSchema.optional(),
  fingerprint_sha256: z.string().optional(),
  rsa_public_key: RSACryptographicKey$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "certkey_public_key": "certkeyPublicKey",
    "dsa_public_key": "dsaPublicKey",
    "ecdsa_public_key": "ecdsaPublicKey",
    "ed25519_public_key": "ed25519PublicKey",
    "fingerprint_sha256": "fingerprintSha256",
    "rsa_public_key": "rsaPublicKey",
  });
});

/** @internal */
export type SshServerHostKey$Outbound = {
  certkey_public_key?: string | undefined;
  dsa_public_key?: DSACryptographicKey$Outbound | undefined;
  ecdsa_public_key?: ECDSACryptographicKey$Outbound | undefined;
  ed25519_public_key?: Ed25519CryptographicKey$Outbound | undefined;
  fingerprint_sha256?: string | undefined;
  rsa_public_key?: RSACryptographicKey$Outbound | undefined;
};

/** @internal */
export const SshServerHostKey$outboundSchema: z.ZodType<
  SshServerHostKey$Outbound,
  z.ZodTypeDef,
  SshServerHostKey
> = z.object({
  certkeyPublicKey: z.string().optional(),
  dsaPublicKey: DSACryptographicKey$outboundSchema.optional(),
  ecdsaPublicKey: ECDSACryptographicKey$outboundSchema.optional(),
  ed25519PublicKey: Ed25519CryptographicKey$outboundSchema.optional(),
  fingerprintSha256: z.string().optional(),
  rsaPublicKey: RSACryptographicKey$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    certkeyPublicKey: "certkey_public_key",
    dsaPublicKey: "dsa_public_key",
    ecdsaPublicKey: "ecdsa_public_key",
    ed25519PublicKey: "ed25519_public_key",
    fingerprintSha256: "fingerprint_sha256",
    rsaPublicKey: "rsa_public_key",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SshServerHostKey$ {
  /** @deprecated use `SshServerHostKey$inboundSchema` instead. */
  export const inboundSchema = SshServerHostKey$inboundSchema;
  /** @deprecated use `SshServerHostKey$outboundSchema` instead. */
  export const outboundSchema = SshServerHostKey$outboundSchema;
  /** @deprecated use `SshServerHostKey$Outbound` instead. */
  export type Outbound = SshServerHostKey$Outbound;
}

export function sshServerHostKeyToJSON(
  sshServerHostKey: SshServerHostKey,
): string {
  return JSON.stringify(
    SshServerHostKey$outboundSchema.parse(sshServerHostKey),
  );
}

export function sshServerHostKeyFromJSON(
  jsonString: string,
): SafeParseResult<SshServerHostKey, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SshServerHostKey$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SshServerHostKey' from JSON`,
  );
}
