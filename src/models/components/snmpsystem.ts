/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  SnmpSystemServices,
  SnmpSystemServices$inboundSchema,
  SnmpSystemServices$Outbound,
  SnmpSystemServices$outboundSchema,
} from "./snmpsystemservices.js";

export type SnmpSystem = {
  /**
   * 1.3.6.1.2.1.1.4 - Contact info
   */
  contact?: string | undefined;
  /**
   * 1.3.6.1.2.1.1.1 - Description of entity
   */
  desc?: string | undefined;
  /**
   * 1.3.6.1.2.1.1.3 - 1/100ths of sec
   */
  initTime?: number | undefined;
  /**
   * 1.3.6.1.2.1.1.6 - Physical location
   */
  location?: string | undefined;
  /**
   * 1.3.6.1.2.1.1.5 - Name, usually FQDN
   */
  name?: string | undefined;
  /**
   * 1.3.6.1.2.1.1.2 - Vendor ID
   */
  objectId?: string | undefined;
  services?: SnmpSystemServices | undefined;
};

/** @internal */
export const SnmpSystem$inboundSchema: z.ZodType<
  SnmpSystem,
  z.ZodTypeDef,
  unknown
> = z.object({
  contact: z.string().optional(),
  desc: z.string().optional(),
  init_time: z.number().int().optional(),
  location: z.string().optional(),
  name: z.string().optional(),
  object_id: z.string().optional(),
  services: SnmpSystemServices$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "init_time": "initTime",
    "object_id": "objectId",
  });
});

/** @internal */
export type SnmpSystem$Outbound = {
  contact?: string | undefined;
  desc?: string | undefined;
  init_time?: number | undefined;
  location?: string | undefined;
  name?: string | undefined;
  object_id?: string | undefined;
  services?: SnmpSystemServices$Outbound | undefined;
};

/** @internal */
export const SnmpSystem$outboundSchema: z.ZodType<
  SnmpSystem$Outbound,
  z.ZodTypeDef,
  SnmpSystem
> = z.object({
  contact: z.string().optional(),
  desc: z.string().optional(),
  initTime: z.number().int().optional(),
  location: z.string().optional(),
  name: z.string().optional(),
  objectId: z.string().optional(),
  services: SnmpSystemServices$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    initTime: "init_time",
    objectId: "object_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SnmpSystem$ {
  /** @deprecated use `SnmpSystem$inboundSchema` instead. */
  export const inboundSchema = SnmpSystem$inboundSchema;
  /** @deprecated use `SnmpSystem$outboundSchema` instead. */
  export const outboundSchema = SnmpSystem$outboundSchema;
  /** @deprecated use `SnmpSystem$Outbound` instead. */
  export type Outbound = SnmpSystem$Outbound;
}

export function snmpSystemToJSON(snmpSystem: SnmpSystem): string {
  return JSON.stringify(SnmpSystem$outboundSchema.parse(snmpSystem));
}

export function snmpSystemFromJSON(
  jsonString: string,
): SafeParseResult<SnmpSystem, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SnmpSystem$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SnmpSystem' from JSON`,
  );
}
