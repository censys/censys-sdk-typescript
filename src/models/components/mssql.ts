/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  MssqlPreloginOptions,
  MssqlPreloginOptions$inboundSchema,
  MssqlPreloginOptions$Outbound,
  MssqlPreloginOptions$outboundSchema,
} from "./mssqlpreloginoptions.js";

export type Mssql = {
  /**
   * The negotiated ENCRYPT_MODE with the server
   */
  encryptMode?: string | undefined;
  instanceName?: string | undefined;
  preloginOptions?: MssqlPreloginOptions | undefined;
  version?: string | undefined;
};

/** @internal */
export const Mssql$inboundSchema: z.ZodType<Mssql, z.ZodTypeDef, unknown> = z
  .object({
    encrypt_mode: z.string().optional(),
    instance_name: z.string().optional(),
    prelogin_options: MssqlPreloginOptions$inboundSchema.optional(),
    version: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "encrypt_mode": "encryptMode",
      "instance_name": "instanceName",
      "prelogin_options": "preloginOptions",
    });
  });

/** @internal */
export type Mssql$Outbound = {
  encrypt_mode?: string | undefined;
  instance_name?: string | undefined;
  prelogin_options?: MssqlPreloginOptions$Outbound | undefined;
  version?: string | undefined;
};

/** @internal */
export const Mssql$outboundSchema: z.ZodType<
  Mssql$Outbound,
  z.ZodTypeDef,
  Mssql
> = z.object({
  encryptMode: z.string().optional(),
  instanceName: z.string().optional(),
  preloginOptions: MssqlPreloginOptions$outboundSchema.optional(),
  version: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    encryptMode: "encrypt_mode",
    instanceName: "instance_name",
    preloginOptions: "prelogin_options",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Mssql$ {
  /** @deprecated use `Mssql$inboundSchema` instead. */
  export const inboundSchema = Mssql$inboundSchema;
  /** @deprecated use `Mssql$outboundSchema` instead. */
  export const outboundSchema = Mssql$outboundSchema;
  /** @deprecated use `Mssql$Outbound` instead. */
  export type Outbound = Mssql$Outbound;
}

export function mssqlToJSON(mssql: Mssql): string {
  return JSON.stringify(Mssql$outboundSchema.parse(mssql));
}

export function mssqlFromJSON(
  jsonString: string,
): SafeParseResult<Mssql, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Mssql$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Mssql' from JSON`,
  );
}
