/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  RdpEmbeddedRSACert,
  RdpEmbeddedRSACert$inboundSchema,
  RdpEmbeddedRSACert$Outbound,
  RdpEmbeddedRSACert$outboundSchema,
} from "./rdpembeddedrsacert.js";

export type RdpCertificateInfo = {
  internalX509ChainFps?: Array<string> | null | undefined;
  proprietaryRsaKey?: RdpEmbeddedRSACert | undefined;
};

/** @internal */
export const RdpCertificateInfo$inboundSchema: z.ZodType<
  RdpCertificateInfo,
  z.ZodTypeDef,
  unknown
> = z.object({
  internal_x509_chain_fps: z.nullable(z.array(z.string())).optional(),
  proprietary_rsa_key: RdpEmbeddedRSACert$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "internal_x509_chain_fps": "internalX509ChainFps",
    "proprietary_rsa_key": "proprietaryRsaKey",
  });
});

/** @internal */
export type RdpCertificateInfo$Outbound = {
  internal_x509_chain_fps?: Array<string> | null | undefined;
  proprietary_rsa_key?: RdpEmbeddedRSACert$Outbound | undefined;
};

/** @internal */
export const RdpCertificateInfo$outboundSchema: z.ZodType<
  RdpCertificateInfo$Outbound,
  z.ZodTypeDef,
  RdpCertificateInfo
> = z.object({
  internalX509ChainFps: z.nullable(z.array(z.string())).optional(),
  proprietaryRsaKey: RdpEmbeddedRSACert$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    internalX509ChainFps: "internal_x509_chain_fps",
    proprietaryRsaKey: "proprietary_rsa_key",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RdpCertificateInfo$ {
  /** @deprecated use `RdpCertificateInfo$inboundSchema` instead. */
  export const inboundSchema = RdpCertificateInfo$inboundSchema;
  /** @deprecated use `RdpCertificateInfo$outboundSchema` instead. */
  export const outboundSchema = RdpCertificateInfo$outboundSchema;
  /** @deprecated use `RdpCertificateInfo$Outbound` instead. */
  export type Outbound = RdpCertificateInfo$Outbound;
}

export function rdpCertificateInfoToJSON(
  rdpCertificateInfo: RdpCertificateInfo,
): string {
  return JSON.stringify(
    RdpCertificateInfo$outboundSchema.parse(rdpCertificateInfo),
  );
}

export function rdpCertificateInfoFromJSON(
  jsonString: string,
): SafeParseResult<RdpCertificateInfo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RdpCertificateInfo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RdpCertificateInfo' from JSON`,
  );
}
