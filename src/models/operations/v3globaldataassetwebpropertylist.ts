/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type V3GlobaldataAssetWebpropertyListGlobals = {
  organizationId?: string | undefined;
};

export type V3GlobaldataAssetWebpropertyListRequest = {
  /**
   * The ID of a Censys organization to associate the request with. See the [Getting Started docs](https://docs.censys.com/reference/get-started#/set-your-organization-id) for more information.
   */
  organizationId?: string | undefined;
  /**
   * A web property host identifier, the format is hostname:port.
   */
  webpropertyIds: Array<string> | null;
};

export type V3GlobaldataAssetWebpropertyListResponse = {
  headers: { [k: string]: Array<string> };
  result: components.ResponseEnvelopeListWebpropertyAsset;
};

/** @internal */
export const V3GlobaldataAssetWebpropertyListGlobals$inboundSchema: z.ZodType<
  V3GlobaldataAssetWebpropertyListGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  organization_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "organization_id": "organizationId",
  });
});

/** @internal */
export type V3GlobaldataAssetWebpropertyListGlobals$Outbound = {
  organization_id?: string | undefined;
};

/** @internal */
export const V3GlobaldataAssetWebpropertyListGlobals$outboundSchema: z.ZodType<
  V3GlobaldataAssetWebpropertyListGlobals$Outbound,
  z.ZodTypeDef,
  V3GlobaldataAssetWebpropertyListGlobals
> = z.object({
  organizationId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    organizationId: "organization_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3GlobaldataAssetWebpropertyListGlobals$ {
  /** @deprecated use `V3GlobaldataAssetWebpropertyListGlobals$inboundSchema` instead. */
  export const inboundSchema =
    V3GlobaldataAssetWebpropertyListGlobals$inboundSchema;
  /** @deprecated use `V3GlobaldataAssetWebpropertyListGlobals$outboundSchema` instead. */
  export const outboundSchema =
    V3GlobaldataAssetWebpropertyListGlobals$outboundSchema;
  /** @deprecated use `V3GlobaldataAssetWebpropertyListGlobals$Outbound` instead. */
  export type Outbound = V3GlobaldataAssetWebpropertyListGlobals$Outbound;
}

export function v3GlobaldataAssetWebpropertyListGlobalsToJSON(
  v3GlobaldataAssetWebpropertyListGlobals:
    V3GlobaldataAssetWebpropertyListGlobals,
): string {
  return JSON.stringify(
    V3GlobaldataAssetWebpropertyListGlobals$outboundSchema.parse(
      v3GlobaldataAssetWebpropertyListGlobals,
    ),
  );
}

export function v3GlobaldataAssetWebpropertyListGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<
  V3GlobaldataAssetWebpropertyListGlobals,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      V3GlobaldataAssetWebpropertyListGlobals$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'V3GlobaldataAssetWebpropertyListGlobals' from JSON`,
  );
}

/** @internal */
export const V3GlobaldataAssetWebpropertyListRequest$inboundSchema: z.ZodType<
  V3GlobaldataAssetWebpropertyListRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  organization_id: z.string().optional(),
  webproperty_ids: z.nullable(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    "organization_id": "organizationId",
    "webproperty_ids": "webpropertyIds",
  });
});

/** @internal */
export type V3GlobaldataAssetWebpropertyListRequest$Outbound = {
  organization_id?: string | undefined;
  webproperty_ids: Array<string> | null;
};

/** @internal */
export const V3GlobaldataAssetWebpropertyListRequest$outboundSchema: z.ZodType<
  V3GlobaldataAssetWebpropertyListRequest$Outbound,
  z.ZodTypeDef,
  V3GlobaldataAssetWebpropertyListRequest
> = z.object({
  organizationId: z.string().optional(),
  webpropertyIds: z.nullable(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    organizationId: "organization_id",
    webpropertyIds: "webproperty_ids",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3GlobaldataAssetWebpropertyListRequest$ {
  /** @deprecated use `V3GlobaldataAssetWebpropertyListRequest$inboundSchema` instead. */
  export const inboundSchema =
    V3GlobaldataAssetWebpropertyListRequest$inboundSchema;
  /** @deprecated use `V3GlobaldataAssetWebpropertyListRequest$outboundSchema` instead. */
  export const outboundSchema =
    V3GlobaldataAssetWebpropertyListRequest$outboundSchema;
  /** @deprecated use `V3GlobaldataAssetWebpropertyListRequest$Outbound` instead. */
  export type Outbound = V3GlobaldataAssetWebpropertyListRequest$Outbound;
}

export function v3GlobaldataAssetWebpropertyListRequestToJSON(
  v3GlobaldataAssetWebpropertyListRequest:
    V3GlobaldataAssetWebpropertyListRequest,
): string {
  return JSON.stringify(
    V3GlobaldataAssetWebpropertyListRequest$outboundSchema.parse(
      v3GlobaldataAssetWebpropertyListRequest,
    ),
  );
}

export function v3GlobaldataAssetWebpropertyListRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  V3GlobaldataAssetWebpropertyListRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      V3GlobaldataAssetWebpropertyListRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'V3GlobaldataAssetWebpropertyListRequest' from JSON`,
  );
}

/** @internal */
export const V3GlobaldataAssetWebpropertyListResponse$inboundSchema: z.ZodType<
  V3GlobaldataAssetWebpropertyListResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: components.ResponseEnvelopeListWebpropertyAsset$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type V3GlobaldataAssetWebpropertyListResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.ResponseEnvelopeListWebpropertyAsset$Outbound;
};

/** @internal */
export const V3GlobaldataAssetWebpropertyListResponse$outboundSchema: z.ZodType<
  V3GlobaldataAssetWebpropertyListResponse$Outbound,
  z.ZodTypeDef,
  V3GlobaldataAssetWebpropertyListResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: components.ResponseEnvelopeListWebpropertyAsset$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3GlobaldataAssetWebpropertyListResponse$ {
  /** @deprecated use `V3GlobaldataAssetWebpropertyListResponse$inboundSchema` instead. */
  export const inboundSchema =
    V3GlobaldataAssetWebpropertyListResponse$inboundSchema;
  /** @deprecated use `V3GlobaldataAssetWebpropertyListResponse$outboundSchema` instead. */
  export const outboundSchema =
    V3GlobaldataAssetWebpropertyListResponse$outboundSchema;
  /** @deprecated use `V3GlobaldataAssetWebpropertyListResponse$Outbound` instead. */
  export type Outbound = V3GlobaldataAssetWebpropertyListResponse$Outbound;
}

export function v3GlobaldataAssetWebpropertyListResponseToJSON(
  v3GlobaldataAssetWebpropertyListResponse:
    V3GlobaldataAssetWebpropertyListResponse,
): string {
  return JSON.stringify(
    V3GlobaldataAssetWebpropertyListResponse$outboundSchema.parse(
      v3GlobaldataAssetWebpropertyListResponse,
    ),
  );
}

export function v3GlobaldataAssetWebpropertyListResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  V3GlobaldataAssetWebpropertyListResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      V3GlobaldataAssetWebpropertyListResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'V3GlobaldataAssetWebpropertyListResponse' from JSON`,
  );
}
