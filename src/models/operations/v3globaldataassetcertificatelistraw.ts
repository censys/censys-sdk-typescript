/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type V3GlobaldataAssetCertificateListRawGlobals = {
  organizationId?: string | undefined;
};

export type V3GlobaldataAssetCertificateListRawRequest = {
  /**
   * The ID of a Censys organization to associate the request with. See the [Getting Started docs](https://docs.censys.com/reference/get-started#step-3-set-your-organization-id) for more information.
   */
  organizationId?: string | undefined;
  /**
   * A list of SHA-256 certificate fingerprints.
   */
  certificateIds: Array<string> | null;
};

export type V3GlobaldataAssetCertificateListRawResponse = {
  headers: { [k: string]: Array<string> };
  result: components.ResponseEnvelopeListRawCertificateResponse;
};

/** @internal */
export const V3GlobaldataAssetCertificateListRawGlobals$inboundSchema:
  z.ZodType<V3GlobaldataAssetCertificateListRawGlobals, z.ZodTypeDef, unknown> =
    z.object({
      organization_id: z.string().optional(),
    }).transform((v) => {
      return remap$(v, {
        "organization_id": "organizationId",
      });
    });

/** @internal */
export type V3GlobaldataAssetCertificateListRawGlobals$Outbound = {
  organization_id?: string | undefined;
};

/** @internal */
export const V3GlobaldataAssetCertificateListRawGlobals$outboundSchema:
  z.ZodType<
    V3GlobaldataAssetCertificateListRawGlobals$Outbound,
    z.ZodTypeDef,
    V3GlobaldataAssetCertificateListRawGlobals
  > = z.object({
    organizationId: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      organizationId: "organization_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3GlobaldataAssetCertificateListRawGlobals$ {
  /** @deprecated use `V3GlobaldataAssetCertificateListRawGlobals$inboundSchema` instead. */
  export const inboundSchema =
    V3GlobaldataAssetCertificateListRawGlobals$inboundSchema;
  /** @deprecated use `V3GlobaldataAssetCertificateListRawGlobals$outboundSchema` instead. */
  export const outboundSchema =
    V3GlobaldataAssetCertificateListRawGlobals$outboundSchema;
  /** @deprecated use `V3GlobaldataAssetCertificateListRawGlobals$Outbound` instead. */
  export type Outbound = V3GlobaldataAssetCertificateListRawGlobals$Outbound;
}

export function v3GlobaldataAssetCertificateListRawGlobalsToJSON(
  v3GlobaldataAssetCertificateListRawGlobals:
    V3GlobaldataAssetCertificateListRawGlobals,
): string {
  return JSON.stringify(
    V3GlobaldataAssetCertificateListRawGlobals$outboundSchema.parse(
      v3GlobaldataAssetCertificateListRawGlobals,
    ),
  );
}

export function v3GlobaldataAssetCertificateListRawGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<
  V3GlobaldataAssetCertificateListRawGlobals,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      V3GlobaldataAssetCertificateListRawGlobals$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'V3GlobaldataAssetCertificateListRawGlobals' from JSON`,
  );
}

/** @internal */
export const V3GlobaldataAssetCertificateListRawRequest$inboundSchema:
  z.ZodType<V3GlobaldataAssetCertificateListRawRequest, z.ZodTypeDef, unknown> =
    z.object({
      organization_id: z.string().optional(),
      certificate_ids: z.nullable(z.array(z.string())),
    }).transform((v) => {
      return remap$(v, {
        "organization_id": "organizationId",
        "certificate_ids": "certificateIds",
      });
    });

/** @internal */
export type V3GlobaldataAssetCertificateListRawRequest$Outbound = {
  organization_id?: string | undefined;
  certificate_ids: Array<string> | null;
};

/** @internal */
export const V3GlobaldataAssetCertificateListRawRequest$outboundSchema:
  z.ZodType<
    V3GlobaldataAssetCertificateListRawRequest$Outbound,
    z.ZodTypeDef,
    V3GlobaldataAssetCertificateListRawRequest
  > = z.object({
    organizationId: z.string().optional(),
    certificateIds: z.nullable(z.array(z.string())),
  }).transform((v) => {
    return remap$(v, {
      organizationId: "organization_id",
      certificateIds: "certificate_ids",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3GlobaldataAssetCertificateListRawRequest$ {
  /** @deprecated use `V3GlobaldataAssetCertificateListRawRequest$inboundSchema` instead. */
  export const inboundSchema =
    V3GlobaldataAssetCertificateListRawRequest$inboundSchema;
  /** @deprecated use `V3GlobaldataAssetCertificateListRawRequest$outboundSchema` instead. */
  export const outboundSchema =
    V3GlobaldataAssetCertificateListRawRequest$outboundSchema;
  /** @deprecated use `V3GlobaldataAssetCertificateListRawRequest$Outbound` instead. */
  export type Outbound = V3GlobaldataAssetCertificateListRawRequest$Outbound;
}

export function v3GlobaldataAssetCertificateListRawRequestToJSON(
  v3GlobaldataAssetCertificateListRawRequest:
    V3GlobaldataAssetCertificateListRawRequest,
): string {
  return JSON.stringify(
    V3GlobaldataAssetCertificateListRawRequest$outboundSchema.parse(
      v3GlobaldataAssetCertificateListRawRequest,
    ),
  );
}

export function v3GlobaldataAssetCertificateListRawRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  V3GlobaldataAssetCertificateListRawRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      V3GlobaldataAssetCertificateListRawRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'V3GlobaldataAssetCertificateListRawRequest' from JSON`,
  );
}

/** @internal */
export const V3GlobaldataAssetCertificateListRawResponse$inboundSchema:
  z.ZodType<
    V3GlobaldataAssetCertificateListRawResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    Headers: z.record(z.array(z.string())),
    Result: components.ResponseEnvelopeListRawCertificateResponse$inboundSchema,
  }).transform((v) => {
    return remap$(v, {
      "Headers": "headers",
      "Result": "result",
    });
  });

/** @internal */
export type V3GlobaldataAssetCertificateListRawResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.ResponseEnvelopeListRawCertificateResponse$Outbound;
};

/** @internal */
export const V3GlobaldataAssetCertificateListRawResponse$outboundSchema:
  z.ZodType<
    V3GlobaldataAssetCertificateListRawResponse$Outbound,
    z.ZodTypeDef,
    V3GlobaldataAssetCertificateListRawResponse
  > = z.object({
    headers: z.record(z.array(z.string())),
    result:
      components.ResponseEnvelopeListRawCertificateResponse$outboundSchema,
  }).transform((v) => {
    return remap$(v, {
      headers: "Headers",
      result: "Result",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3GlobaldataAssetCertificateListRawResponse$ {
  /** @deprecated use `V3GlobaldataAssetCertificateListRawResponse$inboundSchema` instead. */
  export const inboundSchema =
    V3GlobaldataAssetCertificateListRawResponse$inboundSchema;
  /** @deprecated use `V3GlobaldataAssetCertificateListRawResponse$outboundSchema` instead. */
  export const outboundSchema =
    V3GlobaldataAssetCertificateListRawResponse$outboundSchema;
  /** @deprecated use `V3GlobaldataAssetCertificateListRawResponse$Outbound` instead. */
  export type Outbound = V3GlobaldataAssetCertificateListRawResponse$Outbound;
}

export function v3GlobaldataAssetCertificateListRawResponseToJSON(
  v3GlobaldataAssetCertificateListRawResponse:
    V3GlobaldataAssetCertificateListRawResponse,
): string {
  return JSON.stringify(
    V3GlobaldataAssetCertificateListRawResponse$outboundSchema.parse(
      v3GlobaldataAssetCertificateListRawResponse,
    ),
  );
}

export function v3GlobaldataAssetCertificateListRawResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  V3GlobaldataAssetCertificateListRawResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      V3GlobaldataAssetCertificateListRawResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'V3GlobaldataAssetCertificateListRawResponse' from JSON`,
  );
}
