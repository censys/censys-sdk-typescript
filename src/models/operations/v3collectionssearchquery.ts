/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type V3CollectionsSearchQueryGlobals = {
  organizationId?: string | undefined;
};

export type V3CollectionsSearchQueryRequest = {
  /**
   * The ID of a Censys organization to associate the request with. See the [Getting Started docs](https://docs.censys.com/reference/get-started#/set-your-organization-id) for more information.
   */
  organizationId?: string | undefined;
  /**
   * The UID for the collection
   */
  collectionUid: string;
  searchQueryInputBody: components.SearchQueryInputBody;
};

export type V3CollectionsSearchQueryResponse = {
  headers: { [k: string]: Array<string> };
  result: components.ResponseEnvelopeSearchQueryResponse;
};

/** @internal */
export const V3CollectionsSearchQueryGlobals$inboundSchema: z.ZodType<
  V3CollectionsSearchQueryGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  organization_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "organization_id": "organizationId",
  });
});

/** @internal */
export type V3CollectionsSearchQueryGlobals$Outbound = {
  organization_id?: string | undefined;
};

/** @internal */
export const V3CollectionsSearchQueryGlobals$outboundSchema: z.ZodType<
  V3CollectionsSearchQueryGlobals$Outbound,
  z.ZodTypeDef,
  V3CollectionsSearchQueryGlobals
> = z.object({
  organizationId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    organizationId: "organization_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3CollectionsSearchQueryGlobals$ {
  /** @deprecated use `V3CollectionsSearchQueryGlobals$inboundSchema` instead. */
  export const inboundSchema = V3CollectionsSearchQueryGlobals$inboundSchema;
  /** @deprecated use `V3CollectionsSearchQueryGlobals$outboundSchema` instead. */
  export const outboundSchema = V3CollectionsSearchQueryGlobals$outboundSchema;
  /** @deprecated use `V3CollectionsSearchQueryGlobals$Outbound` instead. */
  export type Outbound = V3CollectionsSearchQueryGlobals$Outbound;
}

export function v3CollectionsSearchQueryGlobalsToJSON(
  v3CollectionsSearchQueryGlobals: V3CollectionsSearchQueryGlobals,
): string {
  return JSON.stringify(
    V3CollectionsSearchQueryGlobals$outboundSchema.parse(
      v3CollectionsSearchQueryGlobals,
    ),
  );
}

export function v3CollectionsSearchQueryGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<V3CollectionsSearchQueryGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V3CollectionsSearchQueryGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V3CollectionsSearchQueryGlobals' from JSON`,
  );
}

/** @internal */
export const V3CollectionsSearchQueryRequest$inboundSchema: z.ZodType<
  V3CollectionsSearchQueryRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  organization_id: z.string().optional(),
  collection_uid: z.string(),
  SearchQueryInputBody: components.SearchQueryInputBody$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "organization_id": "organizationId",
    "collection_uid": "collectionUid",
    "SearchQueryInputBody": "searchQueryInputBody",
  });
});

/** @internal */
export type V3CollectionsSearchQueryRequest$Outbound = {
  organization_id?: string | undefined;
  collection_uid: string;
  SearchQueryInputBody: components.SearchQueryInputBody$Outbound;
};

/** @internal */
export const V3CollectionsSearchQueryRequest$outboundSchema: z.ZodType<
  V3CollectionsSearchQueryRequest$Outbound,
  z.ZodTypeDef,
  V3CollectionsSearchQueryRequest
> = z.object({
  organizationId: z.string().optional(),
  collectionUid: z.string(),
  searchQueryInputBody: components.SearchQueryInputBody$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    organizationId: "organization_id",
    collectionUid: "collection_uid",
    searchQueryInputBody: "SearchQueryInputBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3CollectionsSearchQueryRequest$ {
  /** @deprecated use `V3CollectionsSearchQueryRequest$inboundSchema` instead. */
  export const inboundSchema = V3CollectionsSearchQueryRequest$inboundSchema;
  /** @deprecated use `V3CollectionsSearchQueryRequest$outboundSchema` instead. */
  export const outboundSchema = V3CollectionsSearchQueryRequest$outboundSchema;
  /** @deprecated use `V3CollectionsSearchQueryRequest$Outbound` instead. */
  export type Outbound = V3CollectionsSearchQueryRequest$Outbound;
}

export function v3CollectionsSearchQueryRequestToJSON(
  v3CollectionsSearchQueryRequest: V3CollectionsSearchQueryRequest,
): string {
  return JSON.stringify(
    V3CollectionsSearchQueryRequest$outboundSchema.parse(
      v3CollectionsSearchQueryRequest,
    ),
  );
}

export function v3CollectionsSearchQueryRequestFromJSON(
  jsonString: string,
): SafeParseResult<V3CollectionsSearchQueryRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V3CollectionsSearchQueryRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V3CollectionsSearchQueryRequest' from JSON`,
  );
}

/** @internal */
export const V3CollectionsSearchQueryResponse$inboundSchema: z.ZodType<
  V3CollectionsSearchQueryResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: components.ResponseEnvelopeSearchQueryResponse$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type V3CollectionsSearchQueryResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.ResponseEnvelopeSearchQueryResponse$Outbound;
};

/** @internal */
export const V3CollectionsSearchQueryResponse$outboundSchema: z.ZodType<
  V3CollectionsSearchQueryResponse$Outbound,
  z.ZodTypeDef,
  V3CollectionsSearchQueryResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: components.ResponseEnvelopeSearchQueryResponse$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3CollectionsSearchQueryResponse$ {
  /** @deprecated use `V3CollectionsSearchQueryResponse$inboundSchema` instead. */
  export const inboundSchema = V3CollectionsSearchQueryResponse$inboundSchema;
  /** @deprecated use `V3CollectionsSearchQueryResponse$outboundSchema` instead. */
  export const outboundSchema = V3CollectionsSearchQueryResponse$outboundSchema;
  /** @deprecated use `V3CollectionsSearchQueryResponse$Outbound` instead. */
  export type Outbound = V3CollectionsSearchQueryResponse$Outbound;
}

export function v3CollectionsSearchQueryResponseToJSON(
  v3CollectionsSearchQueryResponse: V3CollectionsSearchQueryResponse,
): string {
  return JSON.stringify(
    V3CollectionsSearchQueryResponse$outboundSchema.parse(
      v3CollectionsSearchQueryResponse,
    ),
  );
}

export function v3CollectionsSearchQueryResponseFromJSON(
  jsonString: string,
): SafeParseResult<V3CollectionsSearchQueryResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V3CollectionsSearchQueryResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V3CollectionsSearchQueryResponse' from JSON`,
  );
}
