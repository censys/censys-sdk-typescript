/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type V3GlobaldataAssetWebpropertyGlobals = {
  organizationId?: string | undefined;
};

export type V3GlobaldataAssetWebpropertyRequest = {
  /**
   * The ID of a Censys organization to associate the request with. See the [Getting Started docs](https://docs.censys.com/reference/get-started#step-3-set-your-organization-id) for more information.
   */
  organizationId?: string | undefined;
  /**
   * A web property host identifier, the format is hostname:port.
   */
  webpropertyId: string;
  /**
   * RFC3339 Timestamp to view a webproperty at a specific point in time. Must be a valid RFC3339 string. Ensure that you suffix the date with T00:00:00Z or a specific time
   */
  atTime?: Date | undefined;
};

export type V3GlobaldataAssetWebpropertyResponse = {
  headers: { [k: string]: Array<string> };
  result: components.ResponseEnvelopeWebpropertyAsset;
};

/** @internal */
export const V3GlobaldataAssetWebpropertyGlobals$inboundSchema: z.ZodType<
  V3GlobaldataAssetWebpropertyGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  organization_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "organization_id": "organizationId",
  });
});

/** @internal */
export type V3GlobaldataAssetWebpropertyGlobals$Outbound = {
  organization_id?: string | undefined;
};

/** @internal */
export const V3GlobaldataAssetWebpropertyGlobals$outboundSchema: z.ZodType<
  V3GlobaldataAssetWebpropertyGlobals$Outbound,
  z.ZodTypeDef,
  V3GlobaldataAssetWebpropertyGlobals
> = z.object({
  organizationId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    organizationId: "organization_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3GlobaldataAssetWebpropertyGlobals$ {
  /** @deprecated use `V3GlobaldataAssetWebpropertyGlobals$inboundSchema` instead. */
  export const inboundSchema =
    V3GlobaldataAssetWebpropertyGlobals$inboundSchema;
  /** @deprecated use `V3GlobaldataAssetWebpropertyGlobals$outboundSchema` instead. */
  export const outboundSchema =
    V3GlobaldataAssetWebpropertyGlobals$outboundSchema;
  /** @deprecated use `V3GlobaldataAssetWebpropertyGlobals$Outbound` instead. */
  export type Outbound = V3GlobaldataAssetWebpropertyGlobals$Outbound;
}

export function v3GlobaldataAssetWebpropertyGlobalsToJSON(
  v3GlobaldataAssetWebpropertyGlobals: V3GlobaldataAssetWebpropertyGlobals,
): string {
  return JSON.stringify(
    V3GlobaldataAssetWebpropertyGlobals$outboundSchema.parse(
      v3GlobaldataAssetWebpropertyGlobals,
    ),
  );
}

export function v3GlobaldataAssetWebpropertyGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<V3GlobaldataAssetWebpropertyGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      V3GlobaldataAssetWebpropertyGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V3GlobaldataAssetWebpropertyGlobals' from JSON`,
  );
}

/** @internal */
export const V3GlobaldataAssetWebpropertyRequest$inboundSchema: z.ZodType<
  V3GlobaldataAssetWebpropertyRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  organization_id: z.string().optional(),
  webproperty_id: z.string(),
  at_time: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "organization_id": "organizationId",
    "webproperty_id": "webpropertyId",
    "at_time": "atTime",
  });
});

/** @internal */
export type V3GlobaldataAssetWebpropertyRequest$Outbound = {
  organization_id?: string | undefined;
  webproperty_id: string;
  at_time?: string | undefined;
};

/** @internal */
export const V3GlobaldataAssetWebpropertyRequest$outboundSchema: z.ZodType<
  V3GlobaldataAssetWebpropertyRequest$Outbound,
  z.ZodTypeDef,
  V3GlobaldataAssetWebpropertyRequest
> = z.object({
  organizationId: z.string().optional(),
  webpropertyId: z.string(),
  atTime: z.date().transform(v => v.toISOString()).optional(),
}).transform((v) => {
  return remap$(v, {
    organizationId: "organization_id",
    webpropertyId: "webproperty_id",
    atTime: "at_time",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3GlobaldataAssetWebpropertyRequest$ {
  /** @deprecated use `V3GlobaldataAssetWebpropertyRequest$inboundSchema` instead. */
  export const inboundSchema =
    V3GlobaldataAssetWebpropertyRequest$inboundSchema;
  /** @deprecated use `V3GlobaldataAssetWebpropertyRequest$outboundSchema` instead. */
  export const outboundSchema =
    V3GlobaldataAssetWebpropertyRequest$outboundSchema;
  /** @deprecated use `V3GlobaldataAssetWebpropertyRequest$Outbound` instead. */
  export type Outbound = V3GlobaldataAssetWebpropertyRequest$Outbound;
}

export function v3GlobaldataAssetWebpropertyRequestToJSON(
  v3GlobaldataAssetWebpropertyRequest: V3GlobaldataAssetWebpropertyRequest,
): string {
  return JSON.stringify(
    V3GlobaldataAssetWebpropertyRequest$outboundSchema.parse(
      v3GlobaldataAssetWebpropertyRequest,
    ),
  );
}

export function v3GlobaldataAssetWebpropertyRequestFromJSON(
  jsonString: string,
): SafeParseResult<V3GlobaldataAssetWebpropertyRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      V3GlobaldataAssetWebpropertyRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V3GlobaldataAssetWebpropertyRequest' from JSON`,
  );
}

/** @internal */
export const V3GlobaldataAssetWebpropertyResponse$inboundSchema: z.ZodType<
  V3GlobaldataAssetWebpropertyResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: components.ResponseEnvelopeWebpropertyAsset$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type V3GlobaldataAssetWebpropertyResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.ResponseEnvelopeWebpropertyAsset$Outbound;
};

/** @internal */
export const V3GlobaldataAssetWebpropertyResponse$outboundSchema: z.ZodType<
  V3GlobaldataAssetWebpropertyResponse$Outbound,
  z.ZodTypeDef,
  V3GlobaldataAssetWebpropertyResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: components.ResponseEnvelopeWebpropertyAsset$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3GlobaldataAssetWebpropertyResponse$ {
  /** @deprecated use `V3GlobaldataAssetWebpropertyResponse$inboundSchema` instead. */
  export const inboundSchema =
    V3GlobaldataAssetWebpropertyResponse$inboundSchema;
  /** @deprecated use `V3GlobaldataAssetWebpropertyResponse$outboundSchema` instead. */
  export const outboundSchema =
    V3GlobaldataAssetWebpropertyResponse$outboundSchema;
  /** @deprecated use `V3GlobaldataAssetWebpropertyResponse$Outbound` instead. */
  export type Outbound = V3GlobaldataAssetWebpropertyResponse$Outbound;
}

export function v3GlobaldataAssetWebpropertyResponseToJSON(
  v3GlobaldataAssetWebpropertyResponse: V3GlobaldataAssetWebpropertyResponse,
): string {
  return JSON.stringify(
    V3GlobaldataAssetWebpropertyResponse$outboundSchema.parse(
      v3GlobaldataAssetWebpropertyResponse,
    ),
  );
}

export function v3GlobaldataAssetWebpropertyResponseFromJSON(
  jsonString: string,
): SafeParseResult<V3GlobaldataAssetWebpropertyResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      V3GlobaldataAssetWebpropertyResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V3GlobaldataAssetWebpropertyResponse' from JSON`,
  );
}
