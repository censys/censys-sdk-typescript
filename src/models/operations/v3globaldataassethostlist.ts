/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type V3GlobaldataAssetHostListGlobals = {
  organizationId?: string | undefined;
};

export type V3GlobaldataAssetHostListRequest = {
  /**
   * The ID of a Censys organization to associate the request with. See the [Getting Started docs](https://docs.censys.com/reference/get-started#step-3-set-your-organization-id) for more information.
   */
  organizationId?: string | undefined;
  /**
   * A list of host IP addresses.
   */
  hostIds: Array<string> | null;
};

export type V3GlobaldataAssetHostListResponse = {
  headers: { [k: string]: Array<string> };
  result: components.ResponseEnvelopeListHostAsset;
};

/** @internal */
export const V3GlobaldataAssetHostListGlobals$inboundSchema: z.ZodType<
  V3GlobaldataAssetHostListGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  organization_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "organization_id": "organizationId",
  });
});

/** @internal */
export type V3GlobaldataAssetHostListGlobals$Outbound = {
  organization_id?: string | undefined;
};

/** @internal */
export const V3GlobaldataAssetHostListGlobals$outboundSchema: z.ZodType<
  V3GlobaldataAssetHostListGlobals$Outbound,
  z.ZodTypeDef,
  V3GlobaldataAssetHostListGlobals
> = z.object({
  organizationId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    organizationId: "organization_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3GlobaldataAssetHostListGlobals$ {
  /** @deprecated use `V3GlobaldataAssetHostListGlobals$inboundSchema` instead. */
  export const inboundSchema = V3GlobaldataAssetHostListGlobals$inboundSchema;
  /** @deprecated use `V3GlobaldataAssetHostListGlobals$outboundSchema` instead. */
  export const outboundSchema = V3GlobaldataAssetHostListGlobals$outboundSchema;
  /** @deprecated use `V3GlobaldataAssetHostListGlobals$Outbound` instead. */
  export type Outbound = V3GlobaldataAssetHostListGlobals$Outbound;
}

export function v3GlobaldataAssetHostListGlobalsToJSON(
  v3GlobaldataAssetHostListGlobals: V3GlobaldataAssetHostListGlobals,
): string {
  return JSON.stringify(
    V3GlobaldataAssetHostListGlobals$outboundSchema.parse(
      v3GlobaldataAssetHostListGlobals,
    ),
  );
}

export function v3GlobaldataAssetHostListGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<V3GlobaldataAssetHostListGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V3GlobaldataAssetHostListGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V3GlobaldataAssetHostListGlobals' from JSON`,
  );
}

/** @internal */
export const V3GlobaldataAssetHostListRequest$inboundSchema: z.ZodType<
  V3GlobaldataAssetHostListRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  organization_id: z.string().optional(),
  host_ids: z.nullable(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    "organization_id": "organizationId",
    "host_ids": "hostIds",
  });
});

/** @internal */
export type V3GlobaldataAssetHostListRequest$Outbound = {
  organization_id?: string | undefined;
  host_ids: Array<string> | null;
};

/** @internal */
export const V3GlobaldataAssetHostListRequest$outboundSchema: z.ZodType<
  V3GlobaldataAssetHostListRequest$Outbound,
  z.ZodTypeDef,
  V3GlobaldataAssetHostListRequest
> = z.object({
  organizationId: z.string().optional(),
  hostIds: z.nullable(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    organizationId: "organization_id",
    hostIds: "host_ids",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3GlobaldataAssetHostListRequest$ {
  /** @deprecated use `V3GlobaldataAssetHostListRequest$inboundSchema` instead. */
  export const inboundSchema = V3GlobaldataAssetHostListRequest$inboundSchema;
  /** @deprecated use `V3GlobaldataAssetHostListRequest$outboundSchema` instead. */
  export const outboundSchema = V3GlobaldataAssetHostListRequest$outboundSchema;
  /** @deprecated use `V3GlobaldataAssetHostListRequest$Outbound` instead. */
  export type Outbound = V3GlobaldataAssetHostListRequest$Outbound;
}

export function v3GlobaldataAssetHostListRequestToJSON(
  v3GlobaldataAssetHostListRequest: V3GlobaldataAssetHostListRequest,
): string {
  return JSON.stringify(
    V3GlobaldataAssetHostListRequest$outboundSchema.parse(
      v3GlobaldataAssetHostListRequest,
    ),
  );
}

export function v3GlobaldataAssetHostListRequestFromJSON(
  jsonString: string,
): SafeParseResult<V3GlobaldataAssetHostListRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V3GlobaldataAssetHostListRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V3GlobaldataAssetHostListRequest' from JSON`,
  );
}

/** @internal */
export const V3GlobaldataAssetHostListResponse$inboundSchema: z.ZodType<
  V3GlobaldataAssetHostListResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: components.ResponseEnvelopeListHostAsset$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type V3GlobaldataAssetHostListResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.ResponseEnvelopeListHostAsset$Outbound;
};

/** @internal */
export const V3GlobaldataAssetHostListResponse$outboundSchema: z.ZodType<
  V3GlobaldataAssetHostListResponse$Outbound,
  z.ZodTypeDef,
  V3GlobaldataAssetHostListResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: components.ResponseEnvelopeListHostAsset$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3GlobaldataAssetHostListResponse$ {
  /** @deprecated use `V3GlobaldataAssetHostListResponse$inboundSchema` instead. */
  export const inboundSchema = V3GlobaldataAssetHostListResponse$inboundSchema;
  /** @deprecated use `V3GlobaldataAssetHostListResponse$outboundSchema` instead. */
  export const outboundSchema =
    V3GlobaldataAssetHostListResponse$outboundSchema;
  /** @deprecated use `V3GlobaldataAssetHostListResponse$Outbound` instead. */
  export type Outbound = V3GlobaldataAssetHostListResponse$Outbound;
}

export function v3GlobaldataAssetHostListResponseToJSON(
  v3GlobaldataAssetHostListResponse: V3GlobaldataAssetHostListResponse,
): string {
  return JSON.stringify(
    V3GlobaldataAssetHostListResponse$outboundSchema.parse(
      v3GlobaldataAssetHostListResponse,
    ),
  );
}

export function v3GlobaldataAssetHostListResponseFromJSON(
  jsonString: string,
): SafeParseResult<V3GlobaldataAssetHostListResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V3GlobaldataAssetHostListResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V3GlobaldataAssetHostListResponse' from JSON`,
  );
}
