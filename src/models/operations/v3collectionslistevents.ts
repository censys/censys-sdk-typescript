/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type V3CollectionsListEventsGlobals = {
  organizationId?: string | undefined;
};

export const ChangeTypes = {
  Asset: "asset",
  Status: "status",
} as const;
export type ChangeTypes = ClosedEnum<typeof ChangeTypes>;

export const AssetChangeTypes = {
  Added: "added",
  Removed: "removed",
} as const;
export type AssetChangeTypes = ClosedEnum<typeof AssetChangeTypes>;

export const StatusChangeTypes = {
  Active: "active",
  Archived: "archived",
  Paused: "paused",
  Populating: "populating",
} as const;
export type StatusChangeTypes = ClosedEnum<typeof StatusChangeTypes>;

export type V3CollectionsListEventsRequest = {
  /**
   * The ID of a Censys organization to associate the request with. See the [Getting Started docs](https://docs.censys.com/reference/get-started#/set-your-organization-id) for more information.
   */
  organizationId?: string | undefined;
  /**
   * The UID for the collection
   */
  collectionUid: string;
  pageSize?: number | undefined;
  pageToken?: string | undefined;
  /**
   * Change types
   */
  changeTypes?: Array<ChangeTypes> | null | undefined;
  /**
   * Asset change types
   */
  assetChangeTypes?: Array<AssetChangeTypes> | null | undefined;
  /**
   * Status change types
   */
  statusChangeTypes?: Array<StatusChangeTypes> | null | undefined;
  /**
   * Start time of the host timeline
   */
  startTime?: Date | undefined;
  /**
   * End time of the host timeline
   */
  endTime?: Date | undefined;
};

export type V3CollectionsListEventsResponse = {
  headers: { [k: string]: Array<string> };
  result: components.ResponseEnvelopeCollectionEventsResponse;
};

/** @internal */
export const V3CollectionsListEventsGlobals$inboundSchema: z.ZodType<
  V3CollectionsListEventsGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  organization_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "organization_id": "organizationId",
  });
});

/** @internal */
export type V3CollectionsListEventsGlobals$Outbound = {
  organization_id?: string | undefined;
};

/** @internal */
export const V3CollectionsListEventsGlobals$outboundSchema: z.ZodType<
  V3CollectionsListEventsGlobals$Outbound,
  z.ZodTypeDef,
  V3CollectionsListEventsGlobals
> = z.object({
  organizationId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    organizationId: "organization_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3CollectionsListEventsGlobals$ {
  /** @deprecated use `V3CollectionsListEventsGlobals$inboundSchema` instead. */
  export const inboundSchema = V3CollectionsListEventsGlobals$inboundSchema;
  /** @deprecated use `V3CollectionsListEventsGlobals$outboundSchema` instead. */
  export const outboundSchema = V3CollectionsListEventsGlobals$outboundSchema;
  /** @deprecated use `V3CollectionsListEventsGlobals$Outbound` instead. */
  export type Outbound = V3CollectionsListEventsGlobals$Outbound;
}

export function v3CollectionsListEventsGlobalsToJSON(
  v3CollectionsListEventsGlobals: V3CollectionsListEventsGlobals,
): string {
  return JSON.stringify(
    V3CollectionsListEventsGlobals$outboundSchema.parse(
      v3CollectionsListEventsGlobals,
    ),
  );
}

export function v3CollectionsListEventsGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<V3CollectionsListEventsGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V3CollectionsListEventsGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V3CollectionsListEventsGlobals' from JSON`,
  );
}

/** @internal */
export const ChangeTypes$inboundSchema: z.ZodNativeEnum<typeof ChangeTypes> = z
  .nativeEnum(ChangeTypes);

/** @internal */
export const ChangeTypes$outboundSchema: z.ZodNativeEnum<typeof ChangeTypes> =
  ChangeTypes$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChangeTypes$ {
  /** @deprecated use `ChangeTypes$inboundSchema` instead. */
  export const inboundSchema = ChangeTypes$inboundSchema;
  /** @deprecated use `ChangeTypes$outboundSchema` instead. */
  export const outboundSchema = ChangeTypes$outboundSchema;
}

/** @internal */
export const AssetChangeTypes$inboundSchema: z.ZodNativeEnum<
  typeof AssetChangeTypes
> = z.nativeEnum(AssetChangeTypes);

/** @internal */
export const AssetChangeTypes$outboundSchema: z.ZodNativeEnum<
  typeof AssetChangeTypes
> = AssetChangeTypes$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AssetChangeTypes$ {
  /** @deprecated use `AssetChangeTypes$inboundSchema` instead. */
  export const inboundSchema = AssetChangeTypes$inboundSchema;
  /** @deprecated use `AssetChangeTypes$outboundSchema` instead. */
  export const outboundSchema = AssetChangeTypes$outboundSchema;
}

/** @internal */
export const StatusChangeTypes$inboundSchema: z.ZodNativeEnum<
  typeof StatusChangeTypes
> = z.nativeEnum(StatusChangeTypes);

/** @internal */
export const StatusChangeTypes$outboundSchema: z.ZodNativeEnum<
  typeof StatusChangeTypes
> = StatusChangeTypes$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StatusChangeTypes$ {
  /** @deprecated use `StatusChangeTypes$inboundSchema` instead. */
  export const inboundSchema = StatusChangeTypes$inboundSchema;
  /** @deprecated use `StatusChangeTypes$outboundSchema` instead. */
  export const outboundSchema = StatusChangeTypes$outboundSchema;
}

/** @internal */
export const V3CollectionsListEventsRequest$inboundSchema: z.ZodType<
  V3CollectionsListEventsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  organization_id: z.string().optional(),
  collection_uid: z.string(),
  page_size: z.number().int().optional(),
  page_token: z.string().optional(),
  change_types: z.nullable(z.array(ChangeTypes$inboundSchema)).optional(),
  asset_change_types: z.nullable(z.array(AssetChangeTypes$inboundSchema))
    .optional(),
  status_change_types: z.nullable(z.array(StatusChangeTypes$inboundSchema))
    .optional(),
  start_time: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  end_time: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "organization_id": "organizationId",
    "collection_uid": "collectionUid",
    "page_size": "pageSize",
    "page_token": "pageToken",
    "change_types": "changeTypes",
    "asset_change_types": "assetChangeTypes",
    "status_change_types": "statusChangeTypes",
    "start_time": "startTime",
    "end_time": "endTime",
  });
});

/** @internal */
export type V3CollectionsListEventsRequest$Outbound = {
  organization_id?: string | undefined;
  collection_uid: string;
  page_size?: number | undefined;
  page_token?: string | undefined;
  change_types?: Array<string> | null | undefined;
  asset_change_types?: Array<string> | null | undefined;
  status_change_types?: Array<string> | null | undefined;
  start_time?: string | undefined;
  end_time?: string | undefined;
};

/** @internal */
export const V3CollectionsListEventsRequest$outboundSchema: z.ZodType<
  V3CollectionsListEventsRequest$Outbound,
  z.ZodTypeDef,
  V3CollectionsListEventsRequest
> = z.object({
  organizationId: z.string().optional(),
  collectionUid: z.string(),
  pageSize: z.number().int().optional(),
  pageToken: z.string().optional(),
  changeTypes: z.nullable(z.array(ChangeTypes$outboundSchema)).optional(),
  assetChangeTypes: z.nullable(z.array(AssetChangeTypes$outboundSchema))
    .optional(),
  statusChangeTypes: z.nullable(z.array(StatusChangeTypes$outboundSchema))
    .optional(),
  startTime: z.date().transform(v => v.toISOString()).optional(),
  endTime: z.date().transform(v => v.toISOString()).optional(),
}).transform((v) => {
  return remap$(v, {
    organizationId: "organization_id",
    collectionUid: "collection_uid",
    pageSize: "page_size",
    pageToken: "page_token",
    changeTypes: "change_types",
    assetChangeTypes: "asset_change_types",
    statusChangeTypes: "status_change_types",
    startTime: "start_time",
    endTime: "end_time",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3CollectionsListEventsRequest$ {
  /** @deprecated use `V3CollectionsListEventsRequest$inboundSchema` instead. */
  export const inboundSchema = V3CollectionsListEventsRequest$inboundSchema;
  /** @deprecated use `V3CollectionsListEventsRequest$outboundSchema` instead. */
  export const outboundSchema = V3CollectionsListEventsRequest$outboundSchema;
  /** @deprecated use `V3CollectionsListEventsRequest$Outbound` instead. */
  export type Outbound = V3CollectionsListEventsRequest$Outbound;
}

export function v3CollectionsListEventsRequestToJSON(
  v3CollectionsListEventsRequest: V3CollectionsListEventsRequest,
): string {
  return JSON.stringify(
    V3CollectionsListEventsRequest$outboundSchema.parse(
      v3CollectionsListEventsRequest,
    ),
  );
}

export function v3CollectionsListEventsRequestFromJSON(
  jsonString: string,
): SafeParseResult<V3CollectionsListEventsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V3CollectionsListEventsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V3CollectionsListEventsRequest' from JSON`,
  );
}

/** @internal */
export const V3CollectionsListEventsResponse$inboundSchema: z.ZodType<
  V3CollectionsListEventsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: components.ResponseEnvelopeCollectionEventsResponse$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type V3CollectionsListEventsResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.ResponseEnvelopeCollectionEventsResponse$Outbound;
};

/** @internal */
export const V3CollectionsListEventsResponse$outboundSchema: z.ZodType<
  V3CollectionsListEventsResponse$Outbound,
  z.ZodTypeDef,
  V3CollectionsListEventsResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: components.ResponseEnvelopeCollectionEventsResponse$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3CollectionsListEventsResponse$ {
  /** @deprecated use `V3CollectionsListEventsResponse$inboundSchema` instead. */
  export const inboundSchema = V3CollectionsListEventsResponse$inboundSchema;
  /** @deprecated use `V3CollectionsListEventsResponse$outboundSchema` instead. */
  export const outboundSchema = V3CollectionsListEventsResponse$outboundSchema;
  /** @deprecated use `V3CollectionsListEventsResponse$Outbound` instead. */
  export type Outbound = V3CollectionsListEventsResponse$Outbound;
}

export function v3CollectionsListEventsResponseToJSON(
  v3CollectionsListEventsResponse: V3CollectionsListEventsResponse,
): string {
  return JSON.stringify(
    V3CollectionsListEventsResponse$outboundSchema.parse(
      v3CollectionsListEventsResponse,
    ),
  );
}

export function v3CollectionsListEventsResponseFromJSON(
  jsonString: string,
): SafeParseResult<V3CollectionsListEventsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V3CollectionsListEventsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V3CollectionsListEventsResponse' from JSON`,
  );
}
