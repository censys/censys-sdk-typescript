/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type V3GlobaldataScansRescanGlobals = {
  organizationId?: string | undefined;
};

export type V3GlobaldataScansRescanRequest = {
  /**
   * The ID of a Censys organization to associate the request with. See the [Getting Started docs](https://docs.censys.com/reference/get-started#step-3-set-your-organization-id) for more information.
   */
  organizationId?: string | undefined;
  scansRescanInputBody: components.ScansRescanInputBody;
};

export type V3GlobaldataScansRescanResponse = {
  headers: { [k: string]: Array<string> };
  result: components.ResponseEnvelopeTrackedScan;
};

/** @internal */
export const V3GlobaldataScansRescanGlobals$inboundSchema: z.ZodType<
  V3GlobaldataScansRescanGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  organization_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "organization_id": "organizationId",
  });
});

/** @internal */
export type V3GlobaldataScansRescanGlobals$Outbound = {
  organization_id?: string | undefined;
};

/** @internal */
export const V3GlobaldataScansRescanGlobals$outboundSchema: z.ZodType<
  V3GlobaldataScansRescanGlobals$Outbound,
  z.ZodTypeDef,
  V3GlobaldataScansRescanGlobals
> = z.object({
  organizationId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    organizationId: "organization_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3GlobaldataScansRescanGlobals$ {
  /** @deprecated use `V3GlobaldataScansRescanGlobals$inboundSchema` instead. */
  export const inboundSchema = V3GlobaldataScansRescanGlobals$inboundSchema;
  /** @deprecated use `V3GlobaldataScansRescanGlobals$outboundSchema` instead. */
  export const outboundSchema = V3GlobaldataScansRescanGlobals$outboundSchema;
  /** @deprecated use `V3GlobaldataScansRescanGlobals$Outbound` instead. */
  export type Outbound = V3GlobaldataScansRescanGlobals$Outbound;
}

export function v3GlobaldataScansRescanGlobalsToJSON(
  v3GlobaldataScansRescanGlobals: V3GlobaldataScansRescanGlobals,
): string {
  return JSON.stringify(
    V3GlobaldataScansRescanGlobals$outboundSchema.parse(
      v3GlobaldataScansRescanGlobals,
    ),
  );
}

export function v3GlobaldataScansRescanGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<V3GlobaldataScansRescanGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V3GlobaldataScansRescanGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V3GlobaldataScansRescanGlobals' from JSON`,
  );
}

/** @internal */
export const V3GlobaldataScansRescanRequest$inboundSchema: z.ZodType<
  V3GlobaldataScansRescanRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  organization_id: z.string().optional(),
  ScansRescanInputBody: components.ScansRescanInputBody$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "organization_id": "organizationId",
    "ScansRescanInputBody": "scansRescanInputBody",
  });
});

/** @internal */
export type V3GlobaldataScansRescanRequest$Outbound = {
  organization_id?: string | undefined;
  ScansRescanInputBody: components.ScansRescanInputBody$Outbound;
};

/** @internal */
export const V3GlobaldataScansRescanRequest$outboundSchema: z.ZodType<
  V3GlobaldataScansRescanRequest$Outbound,
  z.ZodTypeDef,
  V3GlobaldataScansRescanRequest
> = z.object({
  organizationId: z.string().optional(),
  scansRescanInputBody: components.ScansRescanInputBody$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    organizationId: "organization_id",
    scansRescanInputBody: "ScansRescanInputBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3GlobaldataScansRescanRequest$ {
  /** @deprecated use `V3GlobaldataScansRescanRequest$inboundSchema` instead. */
  export const inboundSchema = V3GlobaldataScansRescanRequest$inboundSchema;
  /** @deprecated use `V3GlobaldataScansRescanRequest$outboundSchema` instead. */
  export const outboundSchema = V3GlobaldataScansRescanRequest$outboundSchema;
  /** @deprecated use `V3GlobaldataScansRescanRequest$Outbound` instead. */
  export type Outbound = V3GlobaldataScansRescanRequest$Outbound;
}

export function v3GlobaldataScansRescanRequestToJSON(
  v3GlobaldataScansRescanRequest: V3GlobaldataScansRescanRequest,
): string {
  return JSON.stringify(
    V3GlobaldataScansRescanRequest$outboundSchema.parse(
      v3GlobaldataScansRescanRequest,
    ),
  );
}

export function v3GlobaldataScansRescanRequestFromJSON(
  jsonString: string,
): SafeParseResult<V3GlobaldataScansRescanRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V3GlobaldataScansRescanRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V3GlobaldataScansRescanRequest' from JSON`,
  );
}

/** @internal */
export const V3GlobaldataScansRescanResponse$inboundSchema: z.ZodType<
  V3GlobaldataScansRescanResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: components.ResponseEnvelopeTrackedScan$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type V3GlobaldataScansRescanResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.ResponseEnvelopeTrackedScan$Outbound;
};

/** @internal */
export const V3GlobaldataScansRescanResponse$outboundSchema: z.ZodType<
  V3GlobaldataScansRescanResponse$Outbound,
  z.ZodTypeDef,
  V3GlobaldataScansRescanResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: components.ResponseEnvelopeTrackedScan$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3GlobaldataScansRescanResponse$ {
  /** @deprecated use `V3GlobaldataScansRescanResponse$inboundSchema` instead. */
  export const inboundSchema = V3GlobaldataScansRescanResponse$inboundSchema;
  /** @deprecated use `V3GlobaldataScansRescanResponse$outboundSchema` instead. */
  export const outboundSchema = V3GlobaldataScansRescanResponse$outboundSchema;
  /** @deprecated use `V3GlobaldataScansRescanResponse$Outbound` instead. */
  export type Outbound = V3GlobaldataScansRescanResponse$Outbound;
}

export function v3GlobaldataScansRescanResponseToJSON(
  v3GlobaldataScansRescanResponse: V3GlobaldataScansRescanResponse,
): string {
  return JSON.stringify(
    V3GlobaldataScansRescanResponse$outboundSchema.parse(
      v3GlobaldataScansRescanResponse,
    ),
  );
}

export function v3GlobaldataScansRescanResponseFromJSON(
  jsonString: string,
): SafeParseResult<V3GlobaldataScansRescanResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V3GlobaldataScansRescanResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V3GlobaldataScansRescanResponse' from JSON`,
  );
}
