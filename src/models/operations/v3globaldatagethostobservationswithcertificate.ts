/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type V3GlobaldataGetHostObservationsWithCertificateGlobals = {
  organizationId?: string | undefined;
};

export type V3GlobaldataGetHostObservationsWithCertificateRequest = {
  /**
   * The ID of a Censys organization to associate the request with. See the [Getting Started docs](https://docs.censys.com/reference/get-started#step-3-set-your-organization-id) for more information.
   */
  organizationId?: string | undefined;
  /**
   * SHA-256 hash of the certificate
   */
  certificateId: string;
  /**
   * Only show ranges ending at or after this time (ISO 8601)
   */
  startTime?: string | undefined;
  /**
   * Only show ranges starting at or before this time (ISO 8601)
   */
  endTime?: string | undefined;
  /**
   * The port to filter by
   */
  port?: number | undefined;
  /**
   * The transport protocol to filter by
   */
  protocol?: string | undefined;
  /**
   * Pagination token from previous response to retrieve next page of results
   */
  pageToken?: string | undefined;
  /**
   * Number of results per page. Maximum 100, defaults to 100 if not specified
   */
  pageSize?: number | undefined;
};

export type V3GlobaldataGetHostObservationsWithCertificateResponse = {
  headers: { [k: string]: Array<string> };
  result: components.ResponseEnvelopeHostObservationResponse;
};

/** @internal */
export const V3GlobaldataGetHostObservationsWithCertificateGlobals$inboundSchema:
  z.ZodType<
    V3GlobaldataGetHostObservationsWithCertificateGlobals,
    z.ZodTypeDef,
    unknown
  > = z.object({
    organization_id: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "organization_id": "organizationId",
    });
  });

/** @internal */
export type V3GlobaldataGetHostObservationsWithCertificateGlobals$Outbound = {
  organization_id?: string | undefined;
};

/** @internal */
export const V3GlobaldataGetHostObservationsWithCertificateGlobals$outboundSchema:
  z.ZodType<
    V3GlobaldataGetHostObservationsWithCertificateGlobals$Outbound,
    z.ZodTypeDef,
    V3GlobaldataGetHostObservationsWithCertificateGlobals
  > = z.object({
    organizationId: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      organizationId: "organization_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3GlobaldataGetHostObservationsWithCertificateGlobals$ {
  /** @deprecated use `V3GlobaldataGetHostObservationsWithCertificateGlobals$inboundSchema` instead. */
  export const inboundSchema =
    V3GlobaldataGetHostObservationsWithCertificateGlobals$inboundSchema;
  /** @deprecated use `V3GlobaldataGetHostObservationsWithCertificateGlobals$outboundSchema` instead. */
  export const outboundSchema =
    V3GlobaldataGetHostObservationsWithCertificateGlobals$outboundSchema;
  /** @deprecated use `V3GlobaldataGetHostObservationsWithCertificateGlobals$Outbound` instead. */
  export type Outbound =
    V3GlobaldataGetHostObservationsWithCertificateGlobals$Outbound;
}

export function v3GlobaldataGetHostObservationsWithCertificateGlobalsToJSON(
  v3GlobaldataGetHostObservationsWithCertificateGlobals:
    V3GlobaldataGetHostObservationsWithCertificateGlobals,
): string {
  return JSON.stringify(
    V3GlobaldataGetHostObservationsWithCertificateGlobals$outboundSchema.parse(
      v3GlobaldataGetHostObservationsWithCertificateGlobals,
    ),
  );
}

export function v3GlobaldataGetHostObservationsWithCertificateGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<
  V3GlobaldataGetHostObservationsWithCertificateGlobals,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      V3GlobaldataGetHostObservationsWithCertificateGlobals$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'V3GlobaldataGetHostObservationsWithCertificateGlobals' from JSON`,
  );
}

/** @internal */
export const V3GlobaldataGetHostObservationsWithCertificateRequest$inboundSchema:
  z.ZodType<
    V3GlobaldataGetHostObservationsWithCertificateRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    organization_id: z.string().optional(),
    certificate_id: z.string(),
    start_time: z.string().optional(),
    end_time: z.string().optional(),
    port: z.number().int().optional(),
    protocol: z.string().optional(),
    page_token: z.string().optional(),
    page_size: z.number().int().optional(),
  }).transform((v) => {
    return remap$(v, {
      "organization_id": "organizationId",
      "certificate_id": "certificateId",
      "start_time": "startTime",
      "end_time": "endTime",
      "page_token": "pageToken",
      "page_size": "pageSize",
    });
  });

/** @internal */
export type V3GlobaldataGetHostObservationsWithCertificateRequest$Outbound = {
  organization_id?: string | undefined;
  certificate_id: string;
  start_time?: string | undefined;
  end_time?: string | undefined;
  port?: number | undefined;
  protocol?: string | undefined;
  page_token?: string | undefined;
  page_size?: number | undefined;
};

/** @internal */
export const V3GlobaldataGetHostObservationsWithCertificateRequest$outboundSchema:
  z.ZodType<
    V3GlobaldataGetHostObservationsWithCertificateRequest$Outbound,
    z.ZodTypeDef,
    V3GlobaldataGetHostObservationsWithCertificateRequest
  > = z.object({
    organizationId: z.string().optional(),
    certificateId: z.string(),
    startTime: z.string().optional(),
    endTime: z.string().optional(),
    port: z.number().int().optional(),
    protocol: z.string().optional(),
    pageToken: z.string().optional(),
    pageSize: z.number().int().optional(),
  }).transform((v) => {
    return remap$(v, {
      organizationId: "organization_id",
      certificateId: "certificate_id",
      startTime: "start_time",
      endTime: "end_time",
      pageToken: "page_token",
      pageSize: "page_size",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3GlobaldataGetHostObservationsWithCertificateRequest$ {
  /** @deprecated use `V3GlobaldataGetHostObservationsWithCertificateRequest$inboundSchema` instead. */
  export const inboundSchema =
    V3GlobaldataGetHostObservationsWithCertificateRequest$inboundSchema;
  /** @deprecated use `V3GlobaldataGetHostObservationsWithCertificateRequest$outboundSchema` instead. */
  export const outboundSchema =
    V3GlobaldataGetHostObservationsWithCertificateRequest$outboundSchema;
  /** @deprecated use `V3GlobaldataGetHostObservationsWithCertificateRequest$Outbound` instead. */
  export type Outbound =
    V3GlobaldataGetHostObservationsWithCertificateRequest$Outbound;
}

export function v3GlobaldataGetHostObservationsWithCertificateRequestToJSON(
  v3GlobaldataGetHostObservationsWithCertificateRequest:
    V3GlobaldataGetHostObservationsWithCertificateRequest,
): string {
  return JSON.stringify(
    V3GlobaldataGetHostObservationsWithCertificateRequest$outboundSchema.parse(
      v3GlobaldataGetHostObservationsWithCertificateRequest,
    ),
  );
}

export function v3GlobaldataGetHostObservationsWithCertificateRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  V3GlobaldataGetHostObservationsWithCertificateRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      V3GlobaldataGetHostObservationsWithCertificateRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'V3GlobaldataGetHostObservationsWithCertificateRequest' from JSON`,
  );
}

/** @internal */
export const V3GlobaldataGetHostObservationsWithCertificateResponse$inboundSchema:
  z.ZodType<
    V3GlobaldataGetHostObservationsWithCertificateResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    Headers: z.record(z.array(z.string())),
    Result: components.ResponseEnvelopeHostObservationResponse$inboundSchema,
  }).transform((v) => {
    return remap$(v, {
      "Headers": "headers",
      "Result": "result",
    });
  });

/** @internal */
export type V3GlobaldataGetHostObservationsWithCertificateResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.ResponseEnvelopeHostObservationResponse$Outbound;
};

/** @internal */
export const V3GlobaldataGetHostObservationsWithCertificateResponse$outboundSchema:
  z.ZodType<
    V3GlobaldataGetHostObservationsWithCertificateResponse$Outbound,
    z.ZodTypeDef,
    V3GlobaldataGetHostObservationsWithCertificateResponse
  > = z.object({
    headers: z.record(z.array(z.string())),
    result: components.ResponseEnvelopeHostObservationResponse$outboundSchema,
  }).transform((v) => {
    return remap$(v, {
      headers: "Headers",
      result: "Result",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3GlobaldataGetHostObservationsWithCertificateResponse$ {
  /** @deprecated use `V3GlobaldataGetHostObservationsWithCertificateResponse$inboundSchema` instead. */
  export const inboundSchema =
    V3GlobaldataGetHostObservationsWithCertificateResponse$inboundSchema;
  /** @deprecated use `V3GlobaldataGetHostObservationsWithCertificateResponse$outboundSchema` instead. */
  export const outboundSchema =
    V3GlobaldataGetHostObservationsWithCertificateResponse$outboundSchema;
  /** @deprecated use `V3GlobaldataGetHostObservationsWithCertificateResponse$Outbound` instead. */
  export type Outbound =
    V3GlobaldataGetHostObservationsWithCertificateResponse$Outbound;
}

export function v3GlobaldataGetHostObservationsWithCertificateResponseToJSON(
  v3GlobaldataGetHostObservationsWithCertificateResponse:
    V3GlobaldataGetHostObservationsWithCertificateResponse,
): string {
  return JSON.stringify(
    V3GlobaldataGetHostObservationsWithCertificateResponse$outboundSchema.parse(
      v3GlobaldataGetHostObservationsWithCertificateResponse,
    ),
  );
}

export function v3GlobaldataGetHostObservationsWithCertificateResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  V3GlobaldataGetHostObservationsWithCertificateResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      V3GlobaldataGetHostObservationsWithCertificateResponse$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'V3GlobaldataGetHostObservationsWithCertificateResponse' from JSON`,
  );
}
