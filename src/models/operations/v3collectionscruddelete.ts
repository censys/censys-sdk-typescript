/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type V3CollectionsCrudDeleteGlobals = {
  organizationId?: string | undefined;
};

export type V3CollectionsCrudDeleteRequest = {
  /**
   * The ID of a Censys organization to associate the request with. See the [Getting Started docs](https://docs.censys.com/reference/get-started#step-3-set-your-organization-id) for more information.
   */
  organizationId?: string | undefined;
  /**
   * The UID for the collection
   */
  collectionUid: string;
};

export type V3CollectionsCrudDeleteResponse = {
  headers: { [k: string]: Array<string> };
};

/** @internal */
export const V3CollectionsCrudDeleteGlobals$inboundSchema: z.ZodType<
  V3CollectionsCrudDeleteGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  organization_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "organization_id": "organizationId",
  });
});

/** @internal */
export type V3CollectionsCrudDeleteGlobals$Outbound = {
  organization_id?: string | undefined;
};

/** @internal */
export const V3CollectionsCrudDeleteGlobals$outboundSchema: z.ZodType<
  V3CollectionsCrudDeleteGlobals$Outbound,
  z.ZodTypeDef,
  V3CollectionsCrudDeleteGlobals
> = z.object({
  organizationId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    organizationId: "organization_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3CollectionsCrudDeleteGlobals$ {
  /** @deprecated use `V3CollectionsCrudDeleteGlobals$inboundSchema` instead. */
  export const inboundSchema = V3CollectionsCrudDeleteGlobals$inboundSchema;
  /** @deprecated use `V3CollectionsCrudDeleteGlobals$outboundSchema` instead. */
  export const outboundSchema = V3CollectionsCrudDeleteGlobals$outboundSchema;
  /** @deprecated use `V3CollectionsCrudDeleteGlobals$Outbound` instead. */
  export type Outbound = V3CollectionsCrudDeleteGlobals$Outbound;
}

export function v3CollectionsCrudDeleteGlobalsToJSON(
  v3CollectionsCrudDeleteGlobals: V3CollectionsCrudDeleteGlobals,
): string {
  return JSON.stringify(
    V3CollectionsCrudDeleteGlobals$outboundSchema.parse(
      v3CollectionsCrudDeleteGlobals,
    ),
  );
}

export function v3CollectionsCrudDeleteGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<V3CollectionsCrudDeleteGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V3CollectionsCrudDeleteGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V3CollectionsCrudDeleteGlobals' from JSON`,
  );
}

/** @internal */
export const V3CollectionsCrudDeleteRequest$inboundSchema: z.ZodType<
  V3CollectionsCrudDeleteRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  organization_id: z.string().optional(),
  collection_uid: z.string(),
}).transform((v) => {
  return remap$(v, {
    "organization_id": "organizationId",
    "collection_uid": "collectionUid",
  });
});

/** @internal */
export type V3CollectionsCrudDeleteRequest$Outbound = {
  organization_id?: string | undefined;
  collection_uid: string;
};

/** @internal */
export const V3CollectionsCrudDeleteRequest$outboundSchema: z.ZodType<
  V3CollectionsCrudDeleteRequest$Outbound,
  z.ZodTypeDef,
  V3CollectionsCrudDeleteRequest
> = z.object({
  organizationId: z.string().optional(),
  collectionUid: z.string(),
}).transform((v) => {
  return remap$(v, {
    organizationId: "organization_id",
    collectionUid: "collection_uid",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3CollectionsCrudDeleteRequest$ {
  /** @deprecated use `V3CollectionsCrudDeleteRequest$inboundSchema` instead. */
  export const inboundSchema = V3CollectionsCrudDeleteRequest$inboundSchema;
  /** @deprecated use `V3CollectionsCrudDeleteRequest$outboundSchema` instead. */
  export const outboundSchema = V3CollectionsCrudDeleteRequest$outboundSchema;
  /** @deprecated use `V3CollectionsCrudDeleteRequest$Outbound` instead. */
  export type Outbound = V3CollectionsCrudDeleteRequest$Outbound;
}

export function v3CollectionsCrudDeleteRequestToJSON(
  v3CollectionsCrudDeleteRequest: V3CollectionsCrudDeleteRequest,
): string {
  return JSON.stringify(
    V3CollectionsCrudDeleteRequest$outboundSchema.parse(
      v3CollectionsCrudDeleteRequest,
    ),
  );
}

export function v3CollectionsCrudDeleteRequestFromJSON(
  jsonString: string,
): SafeParseResult<V3CollectionsCrudDeleteRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V3CollectionsCrudDeleteRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V3CollectionsCrudDeleteRequest' from JSON`,
  );
}

/** @internal */
export const V3CollectionsCrudDeleteResponse$inboundSchema: z.ZodType<
  V3CollectionsCrudDeleteResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
  });
});

/** @internal */
export type V3CollectionsCrudDeleteResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
};

/** @internal */
export const V3CollectionsCrudDeleteResponse$outboundSchema: z.ZodType<
  V3CollectionsCrudDeleteResponse$Outbound,
  z.ZodTypeDef,
  V3CollectionsCrudDeleteResponse
> = z.object({
  headers: z.record(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3CollectionsCrudDeleteResponse$ {
  /** @deprecated use `V3CollectionsCrudDeleteResponse$inboundSchema` instead. */
  export const inboundSchema = V3CollectionsCrudDeleteResponse$inboundSchema;
  /** @deprecated use `V3CollectionsCrudDeleteResponse$outboundSchema` instead. */
  export const outboundSchema = V3CollectionsCrudDeleteResponse$outboundSchema;
  /** @deprecated use `V3CollectionsCrudDeleteResponse$Outbound` instead. */
  export type Outbound = V3CollectionsCrudDeleteResponse$Outbound;
}

export function v3CollectionsCrudDeleteResponseToJSON(
  v3CollectionsCrudDeleteResponse: V3CollectionsCrudDeleteResponse,
): string {
  return JSON.stringify(
    V3CollectionsCrudDeleteResponse$outboundSchema.parse(
      v3CollectionsCrudDeleteResponse,
    ),
  );
}

export function v3CollectionsCrudDeleteResponseFromJSON(
  jsonString: string,
): SafeParseResult<V3CollectionsCrudDeleteResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V3CollectionsCrudDeleteResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V3CollectionsCrudDeleteResponse' from JSON`,
  );
}
