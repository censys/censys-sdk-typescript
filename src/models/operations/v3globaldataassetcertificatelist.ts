/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type V3GlobaldataAssetCertificateListGlobals = {
  organizationId?: string | undefined;
};

export type V3GlobaldataAssetCertificateListRequest = {
  /**
   * The ID of a Censys organization to associate the request with. See the [Getting Started docs](https://docs.censys.com/reference/get-started#/set-your-organization-id) for more information.
   */
  organizationId?: string | undefined;
  /**
   * A list of SHA-256 certificate fingerprints.
   */
  certificateIds: Array<string> | null;
};

export type V3GlobaldataAssetCertificateListResponse = {
  headers: { [k: string]: Array<string> };
  result: components.ResponseEnvelopeListCertificateAsset;
};

/** @internal */
export const V3GlobaldataAssetCertificateListGlobals$inboundSchema: z.ZodType<
  V3GlobaldataAssetCertificateListGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  organization_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "organization_id": "organizationId",
  });
});

/** @internal */
export type V3GlobaldataAssetCertificateListGlobals$Outbound = {
  organization_id?: string | undefined;
};

/** @internal */
export const V3GlobaldataAssetCertificateListGlobals$outboundSchema: z.ZodType<
  V3GlobaldataAssetCertificateListGlobals$Outbound,
  z.ZodTypeDef,
  V3GlobaldataAssetCertificateListGlobals
> = z.object({
  organizationId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    organizationId: "organization_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3GlobaldataAssetCertificateListGlobals$ {
  /** @deprecated use `V3GlobaldataAssetCertificateListGlobals$inboundSchema` instead. */
  export const inboundSchema =
    V3GlobaldataAssetCertificateListGlobals$inboundSchema;
  /** @deprecated use `V3GlobaldataAssetCertificateListGlobals$outboundSchema` instead. */
  export const outboundSchema =
    V3GlobaldataAssetCertificateListGlobals$outboundSchema;
  /** @deprecated use `V3GlobaldataAssetCertificateListGlobals$Outbound` instead. */
  export type Outbound = V3GlobaldataAssetCertificateListGlobals$Outbound;
}

export function v3GlobaldataAssetCertificateListGlobalsToJSON(
  v3GlobaldataAssetCertificateListGlobals:
    V3GlobaldataAssetCertificateListGlobals,
): string {
  return JSON.stringify(
    V3GlobaldataAssetCertificateListGlobals$outboundSchema.parse(
      v3GlobaldataAssetCertificateListGlobals,
    ),
  );
}

export function v3GlobaldataAssetCertificateListGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<
  V3GlobaldataAssetCertificateListGlobals,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      V3GlobaldataAssetCertificateListGlobals$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'V3GlobaldataAssetCertificateListGlobals' from JSON`,
  );
}

/** @internal */
export const V3GlobaldataAssetCertificateListRequest$inboundSchema: z.ZodType<
  V3GlobaldataAssetCertificateListRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  organization_id: z.string().optional(),
  certificate_ids: z.nullable(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    "organization_id": "organizationId",
    "certificate_ids": "certificateIds",
  });
});

/** @internal */
export type V3GlobaldataAssetCertificateListRequest$Outbound = {
  organization_id?: string | undefined;
  certificate_ids: Array<string> | null;
};

/** @internal */
export const V3GlobaldataAssetCertificateListRequest$outboundSchema: z.ZodType<
  V3GlobaldataAssetCertificateListRequest$Outbound,
  z.ZodTypeDef,
  V3GlobaldataAssetCertificateListRequest
> = z.object({
  organizationId: z.string().optional(),
  certificateIds: z.nullable(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    organizationId: "organization_id",
    certificateIds: "certificate_ids",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3GlobaldataAssetCertificateListRequest$ {
  /** @deprecated use `V3GlobaldataAssetCertificateListRequest$inboundSchema` instead. */
  export const inboundSchema =
    V3GlobaldataAssetCertificateListRequest$inboundSchema;
  /** @deprecated use `V3GlobaldataAssetCertificateListRequest$outboundSchema` instead. */
  export const outboundSchema =
    V3GlobaldataAssetCertificateListRequest$outboundSchema;
  /** @deprecated use `V3GlobaldataAssetCertificateListRequest$Outbound` instead. */
  export type Outbound = V3GlobaldataAssetCertificateListRequest$Outbound;
}

export function v3GlobaldataAssetCertificateListRequestToJSON(
  v3GlobaldataAssetCertificateListRequest:
    V3GlobaldataAssetCertificateListRequest,
): string {
  return JSON.stringify(
    V3GlobaldataAssetCertificateListRequest$outboundSchema.parse(
      v3GlobaldataAssetCertificateListRequest,
    ),
  );
}

export function v3GlobaldataAssetCertificateListRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  V3GlobaldataAssetCertificateListRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      V3GlobaldataAssetCertificateListRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'V3GlobaldataAssetCertificateListRequest' from JSON`,
  );
}

/** @internal */
export const V3GlobaldataAssetCertificateListResponse$inboundSchema: z.ZodType<
  V3GlobaldataAssetCertificateListResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: components.ResponseEnvelopeListCertificateAsset$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type V3GlobaldataAssetCertificateListResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.ResponseEnvelopeListCertificateAsset$Outbound;
};

/** @internal */
export const V3GlobaldataAssetCertificateListResponse$outboundSchema: z.ZodType<
  V3GlobaldataAssetCertificateListResponse$Outbound,
  z.ZodTypeDef,
  V3GlobaldataAssetCertificateListResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: components.ResponseEnvelopeListCertificateAsset$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3GlobaldataAssetCertificateListResponse$ {
  /** @deprecated use `V3GlobaldataAssetCertificateListResponse$inboundSchema` instead. */
  export const inboundSchema =
    V3GlobaldataAssetCertificateListResponse$inboundSchema;
  /** @deprecated use `V3GlobaldataAssetCertificateListResponse$outboundSchema` instead. */
  export const outboundSchema =
    V3GlobaldataAssetCertificateListResponse$outboundSchema;
  /** @deprecated use `V3GlobaldataAssetCertificateListResponse$Outbound` instead. */
  export type Outbound = V3GlobaldataAssetCertificateListResponse$Outbound;
}

export function v3GlobaldataAssetCertificateListResponseToJSON(
  v3GlobaldataAssetCertificateListResponse:
    V3GlobaldataAssetCertificateListResponse,
): string {
  return JSON.stringify(
    V3GlobaldataAssetCertificateListResponse$outboundSchema.parse(
      v3GlobaldataAssetCertificateListResponse,
    ),
  );
}

export function v3GlobaldataAssetCertificateListResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  V3GlobaldataAssetCertificateListResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      V3GlobaldataAssetCertificateListResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'V3GlobaldataAssetCertificateListResponse' from JSON`,
  );
}
