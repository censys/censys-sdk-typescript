/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type V3GlobaldataAssetHostTimelineGlobals = {
  organizationId?: string | undefined;
};

export type V3GlobaldataAssetHostTimelineRequest = {
  /**
   * The ID of a Censys organization to associate the request with. See the [Getting Started docs](https://docs.censys.com/reference/get-started#step-3-set-your-organization-id) for more information.
   */
  organizationId?: string | undefined;
  /**
   * The IP address of a host.
   */
  hostId: string;
  /**
   * Start time of the host timeline. Equivalent to the To field in the event history UI. This must be the timestamp closest to the current time. For example, if you want events from January 1, 2025 to the start of January 2, 2025, input the January 2 timestamp here. Must be a valid RFC3339 string. Ensure that you suffix the date with T00:00:00Z or a specific time.
   */
  startTime: Date;
  /**
   * End time of the host timeline. Equivalent to the From field in the event history UI. This must be the timestamp furthest from the current time. For example, if you want events from January 1, 2025 to the start of January 2, 2025, input the January 1 timestamp here. Must be a valid RFC3339 string. Ensure that you suffix the date with T00:00:00Z or a specific time.
   */
  endTime: Date;
};

export type V3GlobaldataAssetHostTimelineResponse = {
  headers: { [k: string]: Array<string> };
  result: components.ResponseEnvelopeHostTimeline;
};

/** @internal */
export const V3GlobaldataAssetHostTimelineGlobals$inboundSchema: z.ZodType<
  V3GlobaldataAssetHostTimelineGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  organization_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "organization_id": "organizationId",
  });
});

/** @internal */
export type V3GlobaldataAssetHostTimelineGlobals$Outbound = {
  organization_id?: string | undefined;
};

/** @internal */
export const V3GlobaldataAssetHostTimelineGlobals$outboundSchema: z.ZodType<
  V3GlobaldataAssetHostTimelineGlobals$Outbound,
  z.ZodTypeDef,
  V3GlobaldataAssetHostTimelineGlobals
> = z.object({
  organizationId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    organizationId: "organization_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3GlobaldataAssetHostTimelineGlobals$ {
  /** @deprecated use `V3GlobaldataAssetHostTimelineGlobals$inboundSchema` instead. */
  export const inboundSchema =
    V3GlobaldataAssetHostTimelineGlobals$inboundSchema;
  /** @deprecated use `V3GlobaldataAssetHostTimelineGlobals$outboundSchema` instead. */
  export const outboundSchema =
    V3GlobaldataAssetHostTimelineGlobals$outboundSchema;
  /** @deprecated use `V3GlobaldataAssetHostTimelineGlobals$Outbound` instead. */
  export type Outbound = V3GlobaldataAssetHostTimelineGlobals$Outbound;
}

export function v3GlobaldataAssetHostTimelineGlobalsToJSON(
  v3GlobaldataAssetHostTimelineGlobals: V3GlobaldataAssetHostTimelineGlobals,
): string {
  return JSON.stringify(
    V3GlobaldataAssetHostTimelineGlobals$outboundSchema.parse(
      v3GlobaldataAssetHostTimelineGlobals,
    ),
  );
}

export function v3GlobaldataAssetHostTimelineGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<V3GlobaldataAssetHostTimelineGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      V3GlobaldataAssetHostTimelineGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V3GlobaldataAssetHostTimelineGlobals' from JSON`,
  );
}

/** @internal */
export const V3GlobaldataAssetHostTimelineRequest$inboundSchema: z.ZodType<
  V3GlobaldataAssetHostTimelineRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  organization_id: z.string().optional(),
  host_id: z.string(),
  start_time: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  end_time: z.string().datetime({ offset: true }).transform(v => new Date(v)),
}).transform((v) => {
  return remap$(v, {
    "organization_id": "organizationId",
    "host_id": "hostId",
    "start_time": "startTime",
    "end_time": "endTime",
  });
});

/** @internal */
export type V3GlobaldataAssetHostTimelineRequest$Outbound = {
  organization_id?: string | undefined;
  host_id: string;
  start_time: string;
  end_time: string;
};

/** @internal */
export const V3GlobaldataAssetHostTimelineRequest$outboundSchema: z.ZodType<
  V3GlobaldataAssetHostTimelineRequest$Outbound,
  z.ZodTypeDef,
  V3GlobaldataAssetHostTimelineRequest
> = z.object({
  organizationId: z.string().optional(),
  hostId: z.string(),
  startTime: z.date().transform(v => v.toISOString()),
  endTime: z.date().transform(v => v.toISOString()),
}).transform((v) => {
  return remap$(v, {
    organizationId: "organization_id",
    hostId: "host_id",
    startTime: "start_time",
    endTime: "end_time",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3GlobaldataAssetHostTimelineRequest$ {
  /** @deprecated use `V3GlobaldataAssetHostTimelineRequest$inboundSchema` instead. */
  export const inboundSchema =
    V3GlobaldataAssetHostTimelineRequest$inboundSchema;
  /** @deprecated use `V3GlobaldataAssetHostTimelineRequest$outboundSchema` instead. */
  export const outboundSchema =
    V3GlobaldataAssetHostTimelineRequest$outboundSchema;
  /** @deprecated use `V3GlobaldataAssetHostTimelineRequest$Outbound` instead. */
  export type Outbound = V3GlobaldataAssetHostTimelineRequest$Outbound;
}

export function v3GlobaldataAssetHostTimelineRequestToJSON(
  v3GlobaldataAssetHostTimelineRequest: V3GlobaldataAssetHostTimelineRequest,
): string {
  return JSON.stringify(
    V3GlobaldataAssetHostTimelineRequest$outboundSchema.parse(
      v3GlobaldataAssetHostTimelineRequest,
    ),
  );
}

export function v3GlobaldataAssetHostTimelineRequestFromJSON(
  jsonString: string,
): SafeParseResult<V3GlobaldataAssetHostTimelineRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      V3GlobaldataAssetHostTimelineRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V3GlobaldataAssetHostTimelineRequest' from JSON`,
  );
}

/** @internal */
export const V3GlobaldataAssetHostTimelineResponse$inboundSchema: z.ZodType<
  V3GlobaldataAssetHostTimelineResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: components.ResponseEnvelopeHostTimeline$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type V3GlobaldataAssetHostTimelineResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.ResponseEnvelopeHostTimeline$Outbound;
};

/** @internal */
export const V3GlobaldataAssetHostTimelineResponse$outboundSchema: z.ZodType<
  V3GlobaldataAssetHostTimelineResponse$Outbound,
  z.ZodTypeDef,
  V3GlobaldataAssetHostTimelineResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: components.ResponseEnvelopeHostTimeline$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3GlobaldataAssetHostTimelineResponse$ {
  /** @deprecated use `V3GlobaldataAssetHostTimelineResponse$inboundSchema` instead. */
  export const inboundSchema =
    V3GlobaldataAssetHostTimelineResponse$inboundSchema;
  /** @deprecated use `V3GlobaldataAssetHostTimelineResponse$outboundSchema` instead. */
  export const outboundSchema =
    V3GlobaldataAssetHostTimelineResponse$outboundSchema;
  /** @deprecated use `V3GlobaldataAssetHostTimelineResponse$Outbound` instead. */
  export type Outbound = V3GlobaldataAssetHostTimelineResponse$Outbound;
}

export function v3GlobaldataAssetHostTimelineResponseToJSON(
  v3GlobaldataAssetHostTimelineResponse: V3GlobaldataAssetHostTimelineResponse,
): string {
  return JSON.stringify(
    V3GlobaldataAssetHostTimelineResponse$outboundSchema.parse(
      v3GlobaldataAssetHostTimelineResponse,
    ),
  );
}

export function v3GlobaldataAssetHostTimelineResponseFromJSON(
  jsonString: string,
): SafeParseResult<V3GlobaldataAssetHostTimelineResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      V3GlobaldataAssetHostTimelineResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V3GlobaldataAssetHostTimelineResponse' from JSON`,
  );
}
