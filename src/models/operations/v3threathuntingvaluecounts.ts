/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type V3ThreathuntingValueCountsGlobals = {
  organizationId?: string | undefined;
};

export type V3ThreathuntingValueCountsRequest = {
  /**
   * The ID of a Censys organization to associate the request with. See the [Getting Started docs](https://docs.censys.com/reference/get-started#step-3-set-your-organization-id) for more information.
   */
  organizationId?: string | undefined;
  searchValueCountsInputBody: components.SearchValueCountsInputBody;
};

export type V3ThreathuntingValueCountsResponse = {
  headers: { [k: string]: Array<string> };
  result: components.ResponseEnvelopeValueCountsResponse;
};

/** @internal */
export const V3ThreathuntingValueCountsGlobals$inboundSchema: z.ZodType<
  V3ThreathuntingValueCountsGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  organization_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "organization_id": "organizationId",
  });
});

/** @internal */
export type V3ThreathuntingValueCountsGlobals$Outbound = {
  organization_id?: string | undefined;
};

/** @internal */
export const V3ThreathuntingValueCountsGlobals$outboundSchema: z.ZodType<
  V3ThreathuntingValueCountsGlobals$Outbound,
  z.ZodTypeDef,
  V3ThreathuntingValueCountsGlobals
> = z.object({
  organizationId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    organizationId: "organization_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3ThreathuntingValueCountsGlobals$ {
  /** @deprecated use `V3ThreathuntingValueCountsGlobals$inboundSchema` instead. */
  export const inboundSchema = V3ThreathuntingValueCountsGlobals$inboundSchema;
  /** @deprecated use `V3ThreathuntingValueCountsGlobals$outboundSchema` instead. */
  export const outboundSchema =
    V3ThreathuntingValueCountsGlobals$outboundSchema;
  /** @deprecated use `V3ThreathuntingValueCountsGlobals$Outbound` instead. */
  export type Outbound = V3ThreathuntingValueCountsGlobals$Outbound;
}

export function v3ThreathuntingValueCountsGlobalsToJSON(
  v3ThreathuntingValueCountsGlobals: V3ThreathuntingValueCountsGlobals,
): string {
  return JSON.stringify(
    V3ThreathuntingValueCountsGlobals$outboundSchema.parse(
      v3ThreathuntingValueCountsGlobals,
    ),
  );
}

export function v3ThreathuntingValueCountsGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<V3ThreathuntingValueCountsGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V3ThreathuntingValueCountsGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V3ThreathuntingValueCountsGlobals' from JSON`,
  );
}

/** @internal */
export const V3ThreathuntingValueCountsRequest$inboundSchema: z.ZodType<
  V3ThreathuntingValueCountsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  organization_id: z.string().optional(),
  SearchValueCountsInputBody:
    components.SearchValueCountsInputBody$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "organization_id": "organizationId",
    "SearchValueCountsInputBody": "searchValueCountsInputBody",
  });
});

/** @internal */
export type V3ThreathuntingValueCountsRequest$Outbound = {
  organization_id?: string | undefined;
  SearchValueCountsInputBody: components.SearchValueCountsInputBody$Outbound;
};

/** @internal */
export const V3ThreathuntingValueCountsRequest$outboundSchema: z.ZodType<
  V3ThreathuntingValueCountsRequest$Outbound,
  z.ZodTypeDef,
  V3ThreathuntingValueCountsRequest
> = z.object({
  organizationId: z.string().optional(),
  searchValueCountsInputBody:
    components.SearchValueCountsInputBody$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    organizationId: "organization_id",
    searchValueCountsInputBody: "SearchValueCountsInputBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3ThreathuntingValueCountsRequest$ {
  /** @deprecated use `V3ThreathuntingValueCountsRequest$inboundSchema` instead. */
  export const inboundSchema = V3ThreathuntingValueCountsRequest$inboundSchema;
  /** @deprecated use `V3ThreathuntingValueCountsRequest$outboundSchema` instead. */
  export const outboundSchema =
    V3ThreathuntingValueCountsRequest$outboundSchema;
  /** @deprecated use `V3ThreathuntingValueCountsRequest$Outbound` instead. */
  export type Outbound = V3ThreathuntingValueCountsRequest$Outbound;
}

export function v3ThreathuntingValueCountsRequestToJSON(
  v3ThreathuntingValueCountsRequest: V3ThreathuntingValueCountsRequest,
): string {
  return JSON.stringify(
    V3ThreathuntingValueCountsRequest$outboundSchema.parse(
      v3ThreathuntingValueCountsRequest,
    ),
  );
}

export function v3ThreathuntingValueCountsRequestFromJSON(
  jsonString: string,
): SafeParseResult<V3ThreathuntingValueCountsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V3ThreathuntingValueCountsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V3ThreathuntingValueCountsRequest' from JSON`,
  );
}

/** @internal */
export const V3ThreathuntingValueCountsResponse$inboundSchema: z.ZodType<
  V3ThreathuntingValueCountsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: components.ResponseEnvelopeValueCountsResponse$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type V3ThreathuntingValueCountsResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.ResponseEnvelopeValueCountsResponse$Outbound;
};

/** @internal */
export const V3ThreathuntingValueCountsResponse$outboundSchema: z.ZodType<
  V3ThreathuntingValueCountsResponse$Outbound,
  z.ZodTypeDef,
  V3ThreathuntingValueCountsResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: components.ResponseEnvelopeValueCountsResponse$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3ThreathuntingValueCountsResponse$ {
  /** @deprecated use `V3ThreathuntingValueCountsResponse$inboundSchema` instead. */
  export const inboundSchema = V3ThreathuntingValueCountsResponse$inboundSchema;
  /** @deprecated use `V3ThreathuntingValueCountsResponse$outboundSchema` instead. */
  export const outboundSchema =
    V3ThreathuntingValueCountsResponse$outboundSchema;
  /** @deprecated use `V3ThreathuntingValueCountsResponse$Outbound` instead. */
  export type Outbound = V3ThreathuntingValueCountsResponse$Outbound;
}

export function v3ThreathuntingValueCountsResponseToJSON(
  v3ThreathuntingValueCountsResponse: V3ThreathuntingValueCountsResponse,
): string {
  return JSON.stringify(
    V3ThreathuntingValueCountsResponse$outboundSchema.parse(
      v3ThreathuntingValueCountsResponse,
    ),
  );
}

export function v3ThreathuntingValueCountsResponseFromJSON(
  jsonString: string,
): SafeParseResult<V3ThreathuntingValueCountsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      V3ThreathuntingValueCountsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V3ThreathuntingValueCountsResponse' from JSON`,
  );
}
